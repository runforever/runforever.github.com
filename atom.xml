<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Runforever</title>
  <subtitle>K.I.S.S</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://runforever.github.io/"/>
  <updated>2017-02-06T12:56:47.000Z</updated>
  <id>http://runforever.github.io/</id>
  
  <author>
    <name>runforever</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>扩展 Docker 官方镜像（以 Elasticsearch 添加 ik 分词为例）</title>
    <link href="http://runforever.github.io/2017-02-06/2017-02-06-%E6%89%A9%E5%B1%95-docker-%E5%AE%98%E6%96%B9%E9%95%9C%E5%83%8F%EF%BC%88%E4%BB%A5-elasticsearch-%E6%B7%BB%E5%8A%A0-ik-%E5%88%86%E8%AF%8D%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
    <id>http://runforever.github.io/2017-02-06/2017-02-06-扩展-docker-官方镜像（以-elasticsearch-添加-ik-分词为例）/</id>
    <published>2017-02-05T16:00:00.000Z</published>
    <updated>2017-02-06T12:56:47.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">需求</h2>
<div class="outline-text-2" id="text-1">
<p>
最近做的一个应用使用 Elasticsearch 做全文搜索引擎，由于是中文的全文搜索，需要 Elasticsearch 的中文分词插件对内容进行分词，经过调研决定使用 Elasticsearch 5.1.1 版本（现已更新成 5.2.0 版本）和 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">elasticsearch-analysis-ik</a> 中文分词插件。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">使用 Docker 搭建环境</h2>
<div class="outline-text-2" id="text-2">
<p>
我主要使用 Docker 来搭建一切开发环境，所以便想到了使用 Elastisearch 的官方 Docker 镜像扩展安装 ik 分词插件的方案。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">方案一：使用 docker commit 的方式扩展</h2>
<div class="outline-text-2" id="text-3">
<p>
<b>先说结果，这种方式扩展官方镜像无法启动，具体原因不明，读者如果知道，请告诉我。</b>
</p>

<p>
之所以一开始使用这种方案是因为我自己 Django 开发环境的镜像都是这样扩展的，但是经过我的测试用这种方式扩展 PostgreSQL 和 Elasticsearch 的官方 Docker 镜像就会导致扩展后的镜像无法启动，虽然不能使用，我还是把这个方案的操作流程分享出来。
</p>

<p>
<a id="more"></a>
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">操作流程</h3>
<div class="outline-text-3" id="text-3-1">
<p>
下载 Elasticsearch 镜像
</p>
<div class="org-src-container">

<pre class="src src-bash">docker pull elasticsearch
</pre>
</div>

<p>
下载 ik 的分词
进入 ik 的 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="external">release</a> 下载页面，根据 Elasticsearch 的版本下载相应的编译好的 ik 分词插件，然后解压
</p>

<p>
进入镜像的 bash shell，新建 ik 分词插件文件夹
</p>
<div class="org-src-container">

<pre class="src src-bash">docker run -it elasticsearch:latest /bin/bash
mkdir -p /usr/share/elasticsearch/plugins/ik
</pre>
</div>

<p>
使用 docker copy 命令将下载并且解压好的 ik 分词拷贝到 docker container 里
</p>
<div class="org-src-container">

<pre class="src src-bash">docker copy elasticsearch-analysis-ik-5.2.0 es_container_id:/root
</pre>
</div>

<p>
使用打开的 bash shell container 将 /root 目录下的 ik 分词文件拷贝到 /usr/share/elasticsearch/plugins/ik 中
</p>
<div class="org-src-container">

<pre class="src src-bash">cd /root
cp -r elasticsearch-analysis-ik-5.2.0/* /usr/share/elasticsearch/plugins/ik
</pre>
</div>

<p>
退出 docker container 并且将修改提交
</p>
<div class="org-src-container">

<pre class="src src-bash">docker commit -a 'add ik plugin' -m 'runforever' es_container_id{768cadafcd9} es_ik:latest
</pre>
</div>

<p>
使用如下 docker-compose.yml 启动，启动命令 <code>docker-compose up</code>
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ffff00;">version</span>: <span style="color: #00ff00;">'2'</span>
<span style="color: #ffff00;">services</span>:
  <span style="color: #ffff00;">es</span>:
    <span style="color: #ffff00;">build</span>: .
    <span style="color: #ffff00;">image</span>: es_ik:latest
    <span style="color: #ffff00;">environment</span>:
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
</pre>
</div>

<p>
报错提示：
<img src="http://cdn.defcoding.com/9BDDB7EF-B72F-4252-97A5-048E4C4AD5E3.png" alt="9BDDB7EF-B72F-4252-97A5-048E4C4AD5E3.png">
</p>

<p>
参考：ik <a href="https://github.com/medcl/elasticsearch-analysis-ik#install" target="_blank" rel="external">安装文档 </a>
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">方案二：使用 Dockerfile 扩展</h2>
<div class="outline-text-2" id="text-4">
<p>
上面的方案不行就只有使用 Dockerfile 扩展方案了，这个方案只是把上面的操作写到 Dockerfile 里。
</p>
<div class="org-src-container">

<pre class="src src-bash">FROM elasticsearch:latest
RUN sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
RUN apt-get update &amp;&amp; apt-get install zip
RUN mkdir -p /usr/share/elasticsearch/plugins/ik
RUN cd /usr/share/elasticsearch/plugins/ik &amp;&amp; wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.1.1/elasticsearch-analysis-ik-5.1.1.zip &amp;&amp; unzip elasticsearch-analysis-ik-5.1.1.zip
</pre>
</div>

<p>
使用：
</p>
<div class="org-src-container">

<pre class="src src-bash">docker build . -t es_ik:latest
docker-compose up
</pre>
</div>

<p>
运行结果：
<img src="http://cdn.defcoding.com/1E49F66B-D801-437D-B138-21CA2370BDE9.png" alt="1E49F66B-D801-437D-B138-21CA2370BDE9.png">
</p>

<p>
GitHub 地址：<a href="https://github.com/runforever/es_ik5.1.1" target="_blank" rel="external">es_ik5.1.1</a>
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">总结</h2>
<div class="outline-text-2" id="text-5">
<p>
如果需要给官方 Docker 官方镜像添加功能，使用 Dockerfile 的方式就可以了。
</p>

<p>
小技巧一：使用 daocloud 可以加速下载 Docker Hub 镜像的速度，<a href="https://www.daocloud.io/mirror#accelerator-doc" target="_blank" rel="external">使用教程</a>。<br>
小技巧二：扩展镜像的时候把软件源换成国内的源，例如：<br>
<code>RUN sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list</code>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;需求&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
最近做的一个应用使用 Elasticsearch 做全文搜索引擎，由于是中文的全文搜索，需要 Elasticsearch 的中文分词插件对内容进行分词，经过调研决定使用 Elasticsearch 5.1.1 版本（现已更新成 5.2.0 版本）和 &lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-ik&quot;&gt;elasticsearch-analysis-ik&lt;/a&gt; 中文分词插件。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;使用 Docker 搭建环境&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
我主要使用 Docker 来搭建一切开发环境，所以便想到了使用 Elastisearch 的官方 Docker 镜像扩展安装 ik 分词插件的方案。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;方案一：使用 docker commit 的方式扩展&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
&lt;b&gt;先说结果，这种方式扩展官方镜像无法启动，具体原因不明，读者如果知道，请告诉我。&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
之所以一开始使用这种方案是因为我自己 Django 开发环境的镜像都是这样扩展的，但是经过我的测试用这种方式扩展 PostgreSQL 和 Elasticsearch 的官方 Docker 镜像就会导致扩展后的镜像无法启动，虽然不能使用，我还是把这个方案的操作流程分享出来。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://runforever.github.io/categories/Docker/"/>
    
      <category term="Elasticsearch" scheme="http://runforever.github.io/categories/Docker/Elasticsearch/"/>
    
    
  </entry>
  
  <entry>
    <title>PostgresSQL 同步数据到 Elasticsearch 方案调研总结</title>
    <link href="http://runforever.github.io/2017-02-05/2017-02-05-postgressql-%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%88%B0-elasticsearch-%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88%E8%B0%83%E7%A0%94/"/>
    <id>http://runforever.github.io/2017-02-05/2017-02-05-postgressql-同步数据到-elasticsearch-技术方案调研/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2017-02-06T12:49:24.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">需求</h2>
<div class="outline-text-2" id="text-1">
<p>
最近在做一个 Web App，需要使用 Elasticsearch 用作全文搜索，Web App 的业务数据库使用的是 PostgreSQL，为了同步
PostgreSQL 的表数据到 Elasticsearch 于是便开始了方案调研。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Web App 的技术栈介绍</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>Django、Django REST framework 作为 Web 开发框架。
</li>
<li>Redis 作为缓存和消息队列。
</li>
<li>PostgreSQL 作为业务数据库。
</li>
<li>Celery 作为异步消息任务框架。
</li>
<li>Elasticsearch 用作全文搜索。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">方案一：通过 PostgreSQL 的 FDW 功能同步</h2>
<div class="outline-text-2" id="text-3">
<p>
方案的来源：<a href="https://yq.aliyun.com/articles/56824" target="_blank" rel="external">PostgreSQL内核扩展之 - Elasticsearch同步插件</a>
</p>

<p>
架构图：
<img src="http://cdn.defcoding.com/70591D01-86B9-4006-BA3A-EEBE4D64787B.png" alt="70591D01-86B9-4006-BA3A-EEBE4D64787B.png">
</p>

<p>
关键技术点：通过 PostgreSQL 的 <a href="https://wiki.postgresql.org/wiki/Foreign_data_wrappers" target="_blank" rel="external">FDW</a>（Foreign data wrappers）特性，在 PostgreSQL 层面使用数据库触发器的方式将相应的表数据同步到 Elasticsearch 中，
在要同步的表上添加新建、更新、删除的同步触发器。
</p>

<p>
<a id="more"></a>
</p>

<p>
咋一看这个方案好像还是那么一回事，当我真正去使用的时候才发现问题很多，而且这些问题目前还没有解决方案。
</p>

<p>
根据教程，我先扩展了 PostgreSQL 的 Docker <a href="https://hub.docker.com/_/postgres/" target="_blank" rel="external">官方镜像</a>，为镜像添加上了 <a href="http://multicorn.org" target="_blank" rel="external">multicorn</a> 和 <a href="https://github.com/Mikulas/pg-es-fdw?spm=5176.100239.blogcont56824.12.9bOrBa" target="_blank" rel="external">pg-es-fdw </a>，扩展镜像地址：<a href="https:github.com/runforever/docker-psql-es" target="_blank" rel="external">docker-psql-es</a>。<br>
说明：pg-es-fdw 使用 multicorn 同步 PostgreSQL 的数据到 Elasticsearch 中。
</p>

<p>
环境搭建完成各个组件的版本：
</p>

<ol class="org-ol">
<li>PostgreSQL 9.5.5
</li>
<li>Elasticsearch 5.1.1
</li>
<li>multicorn 1.3.3
</li>
<li>pg-es-fdw
</li>
</ol>

<p>
测试的时候，果不其然，新建 PostgreSQL 表数据可以正常同步到 Elasticsearch 中，更新的时候就报错了，于是发现了这个 <a href="https://github.com/Mikulas/pg-es-fdw/issues/2" target="_blank" rel="external">issue </a>：
<img src="http://cdn.defcoding.com/B4F39FD4-F28C-4B90-A308-DA2EC13D9245.png" alt="B4F39FD4-F28C-4B90-A308-DA2EC13D9245.png">
</p>

<p>
Elasticsearch 版本是 1.7 才能解决，这个方案简直要了亲命，1.7 到 5.1.1 都跨了 2.x 这个大版本了，再看看 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="external">elasticsearch-analysis-ik</a> 中文分词的支持版本，有种要绝望的感觉，1.7 版本我是肯定不能用的。
</p>

<p>
结论：
当我 Google 搜索方案的时候就很少，当我看到 pg-es-fdw 最后更新时间和 star 情况后其实有所预知会出现这样的问题，可是还是想试试，结果浪费了大量时间。<br>
这个方案要等 multicorn 这个库对新版 Elasticsearch 有所支持才行，这个库是 C 语言写的，我现在无力折腾，只好放弃这个方案。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">方案二：MySQL 配合 go-mysql-elasticsearch 工具同步</h2>
<div class="outline-text-2" id="text-4">
<p>
这个方案业务数据库要换成 MySQL，<a href="https://github.com/siddontang/go-mysql-elasticsearch" target="_blank" rel="external">go-mysql-elasticsearch</a> 这个工具会通过 mysqldump 获取 MySQL 的原始数据，之后用 binlog 同步。<br>
这个方案不错，Star 很多，应该可行，于是便开始扩展 Docker 镜像。<br>
</p>

<p>
制作镜像的过程中我突然想到这些方式我都没有办法监控到同步过程中的错误，对我来说有种没法控制的感觉，于是灵光一现，Django 不是有个 Signal 机制可以做这些事吗？于是便中断这个方案的测试，开始使用 Signal 机制同步。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">方案三：Django Signal 配合 Celery 同步</h2>
<div class="outline-text-2" id="text-5">
<p>
前面两个方案是将同步过程放到数据库层面，只要表数据有更新就会同步，而我想到的这个方案是放在应用层面做的同步，必须通过 Django Web API 写入表才会触发 Signal 进而调用同步逻辑同步数据到 Elasticsearch 中。
</p>

<p>
架构图：
<img src="http://cdn.defcoding.com/757D7026-EDCB-4D77-AFA4-C30AC0C45A0C.png" alt="757D7026-EDCB-4D77-AFA4-C30AC0C45A0C.png">
</p>

<p>
优点：<br>
</p>
<ol class="org-ol">
<li>实现简单，不依赖数据库和 Elasticsearch 版本。
</li>
<li>可以通过 Celery 来监控到同步错误，方便 Bug 修复和重新同步。
</li>
</ol>

<p>
缺点：<br>
数据写入必须通过 Web 接口。
</p>

<p>
写完 Signal 代码测试了一下，这个方案确实可用，而且可控。
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">其他小知识</h2>
<div class="outline-text-2" id="text-6">
<p>
使用 Elasticsearch 的时候先提前做好 Index 中每个 field 的数据类型，不要使用默认的，因为 field 的类型不能修改。
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">总结</h2>
<div class="outline-text-2" id="text-7">
<p>
方案调研完后我发现似乎没有通用的方案来解决同步数据到 Elasticsearch 的问题，我想大家还是根据自己项目来制定相应的方案，目前我自己用的这个方案用作 Web App 的快速原型还不错，如果数据量大了，再考虑其他的方案。
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;需求&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
最近在做一个 Web App，需要使用 Elasticsearch 用作全文搜索，Web App 的业务数据库使用的是 PostgreSQL，为了同步
PostgreSQL 的表数据到 Elasticsearch 于是便开始了方案调研。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Web App 的技术栈介绍&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Django、Django REST framework 作为 Web 开发框架。
&lt;/li&gt;
&lt;li&gt;Redis 作为缓存和消息队列。
&lt;/li&gt;
&lt;li&gt;PostgreSQL 作为业务数据库。
&lt;/li&gt;
&lt;li&gt;Celery 作为异步消息任务框架。
&lt;/li&gt;
&lt;li&gt;Elasticsearch 用作全文搜索。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;方案一：通过 PostgreSQL 的 FDW 功能同步&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
方案的来源：&lt;a href=&quot;https://yq.aliyun.com/articles/56824&quot;&gt;PostgreSQL内核扩展之 - Elasticsearch同步插件&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
架构图：
&lt;img src=&quot;http://cdn.defcoding.com/70591D01-86B9-4006-BA3A-EEBE4D64787B.png&quot; alt=&quot;70591D01-86B9-4006-BA3A-EEBE4D64787B.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
关键技术点：通过 PostgreSQL 的 &lt;a href=&quot;https://wiki.postgresql.org/wiki/Foreign_data_wrappers&quot;&gt;FDW&lt;/a&gt;（Foreign data wrappers）特性，在 PostgreSQL 层面使用数据库触发器的方式将相应的表数据同步到 Elasticsearch 中，
在要同步的表上添加新建、更新、删除的同步触发器。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="PostgreSQL" scheme="http://runforever.github.io/categories/PostgreSQL/"/>
    
      <category term="Elasticsearch" scheme="http://runforever.github.io/categories/PostgreSQL/Elasticsearch/"/>
    
    
  </entry>
  
  <entry>
    <title>我用 5 天写了一个 OSX Menu Bar App（第五天）</title>
    <link href="http://runforever.github.io/2017-02-04/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/"/>
    <id>http://runforever.github.io/2017-02-04/2017-02-03-我用-5-天写了一个-osx-menu-bar-app（第五天）/</id>
    <published>2017-02-03T16:00:00.000Z</published>
    <updated>2017-02-03T13:01:30.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">目录</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/" target="_blank" rel="external">第一天（方案调研和框架搭建）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第二天（快速原型跑通流程）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第三天（拖动上传和上传多张图片）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第四天（UI 细节调整）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第五天（设计 Logo 和总结）</a>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">第五天（设计 Logo 和总结）</h2>
<div class="outline-text-2" id="text-2">
<p>
前面的工作做完这个应用就基本成型了，接下来就是重构代码，迭代新 Feature，设计一下 Logo，写写总结了。<br>
重构和迭代是一个持续的过程，这个没什么好说的，就是不断的改进代码，设计 Logo 的过程倒是可以说说。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">设计 Logo</h2>
<div class="outline-text-2" id="text-3">
<p>
前段时间看了一篇文章<a href="http://www.techug.com/post/logo-designed-by-programmers.html" target="_blank" rel="external">《一群程序员去设计logo，闹剧发生了》</a>，当时觉得太搞笑了，现在轮到自己设计 Logo 了，结果闹剧仍然在继续。<br>
我先网上找了一个设计 Logo 的网站 <a href="http://www.logoko.com.cn/design" target="_blank" rel="external">http://www.logoko.com.cn/design</a> ，然后一不小心，Logo 设计成下面的样子：
<img src="http://cdn.defcoding.com/B26C13F2-FE63-438D-B83C-09936416A66B.png" alt="B26C13F2-FE63-438D-B83C-09936416A66B.png">
没有关系，我信奉的原则，Logo 不需要包含任何含义。
</p>

<p>
Logo 设计出来了，要把它转成 Mac 需要格式和大小，不知道什么时候我电脑里面居然装了 <a href="https://itunes.apple.com/us/app/iconkit-icon-resizer-for-app/id507135296?mt=12" target="_blank" rel="external">IconKit</a>，于是就用它来转换了，转换后效果：
<img src="http://cdn.defcoding.com/8CD5DF79-690B-495A-B211-DEB62234744C.png" alt="8CD5DF79-690B-495A-B211-DEB62234744C.png">
</p>

<p>
将转换后的图片放到 <code>Assets.xcassets</code> 中的 <code>AppIcon</code> 里，最终效果：
<img src="http://cdn.defcoding.com/A33E8D51-FF2A-4CDA-88AD-12DDEEB87067.png" alt="A33E8D51-FF2A-4CDA-88AD-12DDEEB87067.png">
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">获取编译后的 App</h2>
<div class="outline-text-2" id="text-4">
<p>
我不是 iOS 开发者，并没有 Apple 的开发者账号，我一开始想做这个应用的原因只是解决我写书插入图片的问题，所以我想先自己用，用的不错再注册开发者账号发布出去，也是 Google 了半天，结果发现，就在 <code>Products</code> 文件夹中，复制到 <code>Applications</code> （应用程序）文件夹中就可以了。
<img src="http://cdn.defcoding.com/0C82BAA0-5732-4C79-A3EB-88F3C34FE1B6.png" alt="0C82BAA0-5732-4C79-A3EB-88F3C34FE1B6.png">
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">写总结</h2>
<div class="outline-text-2" id="text-5">
<p>
没有开源项目和网上的博客资料我觉得我写不出来这个应用，项目完成后我想自己应该好好总结一下学到的东西，
看是否能帮助到其他人，现在写的博客，图片上传都是用的自己写的工具，这种感觉挺有意思的，文章中描述的大多是我解决问题的思路过程，
其实学习技术细节花了很多时间，最终版的应用也不是当时 5 天完成的样子了，由于我经常用 QQ 截图，所以后来又加上了剪贴板直接上传的功能，
再加上一些断断续续的改进，现在的代码结构跟刚刚完成的时候已经完全不一样了，如今我把项目源码完全公开，希望可以帮助到更多的人。
</p>

<p>
项目地址：<a href="https://github.com/runforever/iDrag" target="_blank" rel="external">iDrag</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/&quot;&gt;第一天（方案调研和框架搭建）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/&quot;&gt;第二天（快速原型跑通流程）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/&quot;&gt;第三天（拖动上传和上传多张图片）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/&quot;&gt;第四天（UI 细节调整）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/&quot;&gt;第五天（设计 Logo 和总结）&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;第五天（设计 Logo 和总结）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
前面的工作做完这个应用就基本成型了，接下来就是重构代码，迭代新 Feature，设计一下 Logo，写写总结了。&lt;br  /&gt;
重构和迭代是一个持续的过程，这个没什么好说的，就是不断的改进代码，设计 Logo 的过程倒是可以说说。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://runforever.github.io/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>我用 5 天写了一个 OSX Menu Bar App（第四天）</title>
    <link href="http://runforever.github.io/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/"/>
    <id>http://runforever.github.io/2017-02-03/2017-02-03-我用-5-天写了一个-osx-menu-bar-app（第四天）/</id>
    <published>2017-02-02T16:00:00.000Z</published>
    <updated>2017-02-03T12:51:43.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">目录</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/" target="_blank" rel="external">第一天（方案调研和框架搭建）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第二天（快速原型跑通流程）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第三天（拖动上传和上传多张图片）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第四天（UI 细节调整）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第五天（设计 Logo 和总结）</a>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">第四天（UI 细节调整）</h2>
<div class="outline-text-2" id="text-2">
<p>
拖动上传多个文件已经实现，前面的工作解决了上传的问题，接下来要解决的是上传完成后如何使用的问题，经过一番需求分析，总结如下：
</p>
<ol class="org-ol">
<li>UI 需要展示出上传后文件的缩略图和文件名，方便获取到文件的信息。
</li>
<li>我要在 org 格式和 Markdown 格式的文档中插入图片，因此要提供复制链接和复制 Markdown 的操作。
</li>
<li>将七牛 AccessKey、SecretKey、Bucket 和回调 Domain 做成设置 UI，提供给其他人使用。
</li>
</ol>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">最终的 UI</h3>
<div class="outline-text-3" id="text-2-1">
<p>
上传成功的 UI
<img src="http://cdn.defcoding.com/6FDE92BD-2FE0-4063-BB98-B9573AA94D3C.png" alt="6FDE92BD-2FE0-4063-BB98-B9573AA94D3C.png">
</p>

<p>
设置的 UI
<img src="http://cdn.defcoding.com/E9A7253E-51F1-420F-AF85-DDB558831949.png" alt="E9A7253E-51F1-420F-AF85-DDB558831949.png">
</p>

<p>
下面开始折腾。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">设置功能</h2>
<div class="outline-text-2" id="text-3">
<p>
由于第一次开发 OSX 应用，经验不多，本着先易后难的原则，先从设置功能开始，熟悉 OSX 应用开发模式，也为接下来做复杂 UI 的工作积累经验。
</p>

<p>
设置功能需求：
</p>
<ol class="org-ol">
<li>提供 AccessKey、SecretKey 等七牛账号的配置。
</li>
<li>能保存配置。
</li>
<li>支持 OSX 本身调出设置的快捷键。
</li>
</ol>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">在 Main.storyboard 添加设置 UI</h3>
<div class="outline-text-3" id="text-3-1">
<p>
<b>在菜单栏中添加设置选项</b>
<img src="http://cdn.defcoding.com/8EF0EBB1-5A2D-47D5-81C4-AF7FFF8ADE0E.png" alt="8EF0EBB1-5A2D-47D5-81C4-AF7FFF8ADE0E.png">
</p>

<p>
<b>配置完成效果</b>
<img src="http://cdn.defcoding.com/D9E4FC99-C689-459D-9D91-2652F64A9B20.png" alt="D9E4FC99-C689-459D-9D91-2652F64A9B20.png">
</p>

<p>
<b>添加设置窗口</b>
<img src="http://cdn.defcoding.com/7C32F025-AAF1-4443-A238-3723CBB25223.png" alt="7C32F025-AAF1-4443-A238-3723CBB25223.png">
</p>

<p>
<b>Ctrl + Drag 操作连接设置选项和设置窗口</b>
<img src="http://cdn.defcoding.com/ctrldrag.gif" alt="ctrldrag.gif">
<code>Action Segue</code> 的 Action 选择 <code>Show</code>
</p>

<p>
<b>运行测试</b>
<img src="http://cdn.defcoding.com/EF847758-2289-45DA-A7DF-833A1883D1D7.png" alt="EF847758-2289-45DA-A7DF-833A1883D1D7.png">
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">添加配置项</h3>
<div class="outline-text-3" id="text-3-2">
<p>
布局对我来说一直是个比较难的点，好在新版的 Mac OSX 支持 StackView 布局，很方便的解决了问题，
我学习 UI 布局是通过 <a href="https://www.appcoda.com/swift/" target="_blank" rel="external">Beginning iOS 10 Programming With Swift</a> 这本书和 <a href="https://www.youtube.com" target="_blank" rel="external">YouTube</a> 上的 iOS 相关的教程，
在做这个应用前花了不少功夫，布局的知识很多，也不是我要表达的重点，限于篇幅，这里就不扩展了。
</p>

<p>
<b>使用 StackView 布局的配置项效果</b>
<img src="http://cdn.defcoding.com/D704D97C-3C3E-4AFD-AD93-77DE41F862DC.png" alt="D704D97C-3C3E-4AFD-AD93-77DE41F862DC.png">
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">保存设置逻辑实现</h3>
<div class="outline-text-3" id="text-3-3">
<p>
我不想每次启动应用都要重新配置七牛相关的东西，配置要保存下来，Google 了相关方案，找到了 <a href="https://developer.apple.com/reference/appkit/nsuserdefaultscontroller" target="_blank" rel="external">NSUserDefaultsController</a> API，看了 API 介绍和一些教程文档，确定这个东西可以解决我的问题。
</p>

<p>
设置功能是一个新 Feature，所以需要一个新的 ViewController 来实现它，没有人能忍受把所有代码都放到一个文件中，
不相关的功能代码能分开就分开，方便以后维护，我一直信奉 K.I.S.S 原则，一个东西（包、模块、类、函数）只做一件事并且做好。
</p>

<p>
需要实现的逻辑：
</p>
<ol class="org-ol">
<li>保存，保存设置项到 NSUserDefaults。
</li>
<li>取消，直接关闭设置窗口。
</li>
</ol>

<p>
<b>新建 SettingViewController.swift 文件</b>
<img src="http://cdn.defcoding.com/B0CCBD34-B986-4339-937B-91C1B2029F89.png" alt="B0CCBD34-B986-4339-937B-91C1B2029F89.png">
</p>

<p>
<b>绑定设置 UI</b>
<img src="http://cdn.defcoding.com/E424D78D-1E88-4F41-9E67-74B1740CD0BB.png" alt="E424D78D-1E88-4F41-9E67-74B1740CD0BB.png">
</p>

<p>
<b>Ctrl + Drag 将 UI 元素和代码绑定</b>
<img src="http://cdn.defcoding.com/8DF7CCAB-FD59-4355-9AF0-167C6B3E5CF2.png" alt="8DF7CCAB-FD59-4355-9AF0-167C6B3E5CF2.png">
</p>

<p>
<b>代码讲解</b>
</p>
<div class="org-src-container">

<pre class="src src-swift">//
//  SettingViewController.swift
//  iDragProject
//
//  Created by runforever on 2017/2/3.
//  Copyright © 2017年 defcoding. All rights reserved.
//

import Cocoa

class SettingViewController: NSViewController {

    @IBOutlet var accessKeyInput: NSTextField!
    @IBOutlet var secretKeyInput: NSTextField!
    @IBOutlet var bucketInput: NSTextField!
    @IBOutlet var domainInput: NSTextField!

    var userDefaults: UserDefaults!
    var settingMeta: [String: NSTextField]!

    override func viewDidLoad() {
        super.viewDidLoad()

        // 设置项与UI的对应配置，方便存取设置数据
        settingMeta = [
            "accessKey": accessKeyInput,
            "secretKey": secretKeyInput,
            "bucket": bucketInput,
            "domain": domainInput,
        ]
        userDefaults = NSUserDefaultsController.shared().defaults

        // 展示已经保存的设置项
        displaySettings()
    }

    func displaySettings() {
        // 根据设置项与UI的对应配置，展示相应的设置到UI中
        for (key, input) in settingMeta {
            if let value = userDefaults.string(forKey: key) {
                input.stringValue = value
            }
        }
    }

    @IBAction func confirmAction(_ sender: NSButton) {
        // 保存UI中的值到配置中
        for (key, input) in settingMeta {
            let setting = input.stringValue
            userDefaults.set(setting, forKey: key)
        }

        userDefaults.synchronize()
        self.view.window?.close()
    }

    @IBAction func cancelAction(_ sender: NSButton) {
        self.view.window?.close()
    }
}
</pre>
</div>

<p>
<b>测试运行</b>
<img src="http://cdn.defcoding.com/BFB5F22E-A9AF-4C5D-9A5F-7EECFDC4EB12.png" alt="BFB5F22E-A9AF-4C5D-9A5F-7EECFDC4EB12.png">
</p>

<p>
<b>修改获取设置项的代码</b>
<img src="http://cdn.defcoding.com/D91D4D4A-64E3-4112-A673-64593A35C052.png" alt="D91D4D4A-64E3-4112-A673-64593A35C052.png">
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">上传完成 UI 展示实现</h2>
<div class="outline-text-2" id="text-4">
<p>
有了前面做 UI 的经验，这块功能做起来顺手一些了，不过这块功能本身比较复杂，花的时间也比较多，
由于所需要的知识跟前面差不多，我就不说实现细节了，把实现思路和大家分享一下。
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">展示方案</h3>
<div class="outline-text-3" id="text-4-1">
<p>
依然是 Google 找列表展示方案，确定使用 Scroll View，Scroll View 包含一个 TableView，TableView 中定义好每行展示的 UI 就行，方案如下图：
<img src="http://cdn.defcoding.com/4760EECB-1B9D-40D9-9169-EAF07BC2C9A8.png" alt="4760EECB-1B9D-40D9-9169-EAF07BC2C9A8.png">
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">复制功能</h3>
<div class="outline-text-3" id="text-4-2">
<p>
复制功能是用系统剪贴板 <a href="https://developer.apple.com/reference/appkit/nspasteboard" target="_blank" rel="external">NSPasteboard</a> 实现
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">实现思路</h3>
<div class="outline-text-3" id="text-4-3">
<ol class="org-ol">
<li>新建 <code>UploadImageView.swift</code> 文件放 Scroll View 的 UI 操作相关代码。
</li>
<li>新建 <code>UploadImageCell.swift</code> 文件放 Scroll View 中每一行的 UI 操作相关代码。
</li>
<li>新建 <code>Models.swift</code> 文件放 Scroll View 中每一行 UI 元素的结构体代码。
</li>
</ol>

<p>
架构的思路：解耦、K.I.S.S<br>
相关的操作：=Ctrl Drag=<br>
遇到不会的：Google 和使用 Dash 查看 API 文档
</p>

<p>
剩下来的就是写代码实现了。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">总结</h2>
<div class="outline-text-2" id="text-5">
<ol class="org-ol">
<li>UI 布局很重要，要花功夫学。
</li>
<li>学会在 Storyboard 实现 UI 的操作。
</li>
<li>使用 K.I.S.S 思想控制代码的复杂度。
</li>
<li>坚持，使用各种方法（Google、查看 API、StackOverflow、YouTube）解决问题。
</li>
</ol>

<p>
示例代码：<a href="https://github.com/runforever/iDragProject" target="_blank" rel="external">iDragProject</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/&quot;&gt;第一天（方案调研和框架搭建）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/&quot;&gt;第二天（快速原型跑通流程）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/&quot;&gt;第三天（拖动上传和上传多张图片）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/&quot;&gt;第四天（UI 细节调整）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/&quot;&gt;第五天（设计 Logo 和总结）&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;第四天（UI 细节调整）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
拖动上传多个文件已经实现，前面的工作解决了上传的问题，接下来要解决的是上传完成后如何使用的问题，经过一番需求分析，总结如下：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;UI 需要展示出上传后文件的缩略图和文件名，方便获取到文件的信息。
&lt;/li&gt;
&lt;li&gt;我要在 org 格式和 Markdown 格式的文档中插入图片，因此要提供复制链接和复制 Markdown 的操作。
&lt;/li&gt;
&lt;li&gt;将七牛 AccessKey、SecretKey、Bucket 和回调 Domain 做成设置 UI，提供给其他人使用。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;最终的 UI&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
上传成功的 UI
&lt;img src=&quot;http://cdn.defcoding.com/6FDE92BD-2FE0-4063-BB98-B9573AA94D3C.png&quot; alt=&quot;6FDE92BD-2FE0-4063-BB98-B9573AA94D3C.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
设置的 UI
&lt;img src=&quot;http://cdn.defcoding.com/E9A7253E-51F1-420F-AF85-DDB558831949.png&quot; alt=&quot;E9A7253E-51F1-420F-AF85-DDB558831949.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
下面开始折腾。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://runforever.github.io/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>我用 5 天写了一个 OSX Menu Bar App（第三天）</title>
    <link href="http://runforever.github.io/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/"/>
    <id>http://runforever.github.io/2017-02-02/2017-02-02-我用-5-天写了一个-osx-menu-bar-app（第三天）/</id>
    <published>2017-02-01T16:00:00.000Z</published>
    <updated>2017-02-03T12:51:43.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">目录</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/" target="_blank" rel="external">第一天（方案调研和框架搭建）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第二天（快速原型跑通流程）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第三天（拖动上传和上传多张图片）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第四天（UI 细节调整）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第五天（设计 Logo 和总结）</a>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">第三天（拖动上传和上传多张图片）</h2>
<div class="outline-text-2" id="text-2">
<p>
前面上传流程已经跑通了，不过也仅仅是功能跑通了，要达到可以使用至少需要实现从
文件夹拖动文件上传，并且可以同时上传多张图片。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">拖动上传方案调研</h2>
<div class="outline-text-2" id="text-3">
<p>
使用 Google 先查找方案：
<img src="http://cdn.defcoding.com/CB8C546F-AD0E-4F7E-9AFA-29138BBFE187.png" alt="CB8C546F-AD0E-4F7E-9AFA-29138BBFE187.png">
</p>

<p>
根据 Google 搜到文章的更新时间查看了一下相关资料，其中这篇 <a href="http://swiftrien.blogspot.hk/2015/03/file-drag-drop-for-os-x.html" target="_blank" rel="external">File drag &amp; drop for OS-X</a> 让
我对 <code>OSX 的 Drag &amp; Drop</code> 编程有了个大概的了解，进而查找到了<a href="https://developer.apple.com/reference/appkit/nsdraggingdestination" target="_blank" rel="external">NSDraggingDestination</a>  协议，
查看官方文档确定这个是我想要的东西。
<img src="http://cdn.defcoding.com/BB27652F-7B86-433A-A19E-1365AEA67B24.png" alt="BB27652F-7B86-433A-A19E-1365AEA67B24.png">
</p>

<p>
NSDraaingDestination 的使用总结：
</p>
<ol class="org-ol">
<li>DragAppController 扩展 NSDraggingDestination 协议。
</li>
<li>window 对象使用 <code>registerForDraggedTypes</code> 方法注册 Drag 操作。
</li>
<li>重写 <code>draggingEntered</code> 方法，实现文件拖动标识。
</li>
<li>重写 <code>performDragOperation</code> 方法，实现上传操作。
</li>
</ol>

<p>
下面开始写代码。
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">拖动上传代码实现</h2>
<div class="outline-text-2" id="text-4">

<div class="figure">
<p><img src="http://cdn.defcoding.com/D272FE29-ED2F-445E-A9FD-A05AB16559B8.png" alt="D272FE29-ED2F-445E-A9FD-A05AB16559B8.png">
</p>
</div>

<p>
代码讲解：
</p>
<div class="org-src-container">

<pre class="src src-swift">import Cocoa

// 扩展 NSWindowDelegate, NSDraggingDestination 协议
class DragAppController: NSObject, NSWindowDelegate, NSDraggingDestination {

    @IBOutlet weak var dragMenu: NSMenu!
    let dragStatusItem = NSStatusBar.system().statusItem(withLength: NSVariableStatusItemLength)

    override func awakeFromNib() {
        dragStatusItem.title = "iDrag"
        dragStatusItem.menu = dragMenu

        // 注册 Drag 操作
        dragStatusItem.button?.window?.registerForDraggedTypes([NSFilenamesPboardType])
        dragStatusItem.button?.window?.delegate = self

    }

    // 重写 draggingEntered 方法
    // 实现文件拖动到 menu 的时候显示绿色的 "+" 号
    func draggingEntered(_ sender: NSDraggingInfo) -&gt; NSDragOperation {
        return NSDragOperation.copy
    }

    // 重写 performDragOperation 方法
    // 实现上传文件操作
    func performDragOperation(_ sender: NSDraggingInfo) -&gt; Bool {
        // 获取拖动文件的路径
        let pasteBoard = sender.draggingPasteboard()
        let filePaths = pasteBoard.propertyList(forType: NSFilenamesPboardType) as! NSArray

        // 分别上传每一个文件
        let uploadManager = DragUploadManager()
        for filePath in filePaths {
            uploadManager.uploadFile(filePath: filePath as! String)
        }
        return true
    }

    @IBAction func quitAction(_ sender: NSMenuItem) {
        NSApplication.shared().terminate(self)
    }

}
</pre>
</div>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">运行测试拖动上传</h3>
<div class="outline-text-3" id="text-4-1">

<div class="figure">
<p><img src="http://cdn.defcoding.com/QQ20170202-144424-iloveimg-compressed.gif" alt="QQ20170202-144424-iloveimg-compressed.gif">
</p>
</div>

<p>
测试上传图片成功了，这个应用目前是支持多张图片同时上传的，不过如果想达到所有图片都上传成功之后做一些通知相关的操作就比较麻烦了，因为上传 API 异步编程模型（callback 回调方式的编程模型），为了让代码可读性更高，避免 Callback Hell，我 Google 了相关的方案，找到了 <a href="http://promisekit.org" target="_blank" rel="external">PromiseKit</a> 这个库，目的是用同步的方式写出异步的代码。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">PromiseKit 使用</h2>
<div class="outline-text-2" id="text-5">
<p>
使用一项技术前，必须先对技术有一定的了解，确定这项技术是否能解决问题，而不是“靠撞大运编程”，我已经确定 Promise 编程范式可以达到我的目的，所以我使用它，关于 Promise 编程范式可以参考 <a href="http://liubin.org/promises-book/" target="_blank" rel="external">JavaScript Promise 迷你书</a>，这里不拓展了。
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">使用 CocoaPods 安装 PromiseKit</h3>
<div class="outline-text-3" id="text-5-1">
<p>
又该 CocoaPods 上场了，Podfile 添加上 PromiseKit，然后执行 <code>pod update</code> 。
</p>

<p>
Podfile 代码：
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">Uncomment this line to define a global platform for your project</span>
platform <span style="color: #ff00ff;">:osx</span>, <span style="color: #00ff00;">'10.11'</span>

target <span style="color: #00ff00;">'iDragProject'</span> <span style="color: #00ffff; font-weight: bold;">do</span>
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Comment this line if you're not using Swift and don't want to use dynamic frameworks</span>
  use_frameworks!

  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Pods for iDrag</span>
  pod <span style="color: #00ff00;">"Qiniu"</span>, <span style="color: #00ff00;">"~&gt; 7.1"</span>
  pod <span style="color: #00ff00;">"CryptoSwift"</span>
  pod <span style="color: #00ff00;">"SwiftyJSON"</span>
  pod <span style="color: #00ff00;">"PromiseKit"</span>, <span style="color: #00ff00;">"~&gt; 4.0"</span>
<span style="color: #00ffff; font-weight: bold;">end</span>

post_install <span style="color: #00ffff; font-weight: bold;">do</span> |installer|
  installer.pods_project.targets.each <span style="color: #00ffff; font-weight: bold;">do</span> |target|
    target.build_configurations.each <span style="color: #00ffff; font-weight: bold;">do</span> |config|
      config.build_settings[<span style="color: #00ff00;">'SWIFT_VERSION'</span>] = <span style="color: #00ff00;">'3.0'</span>
    <span style="color: #00ffff; font-weight: bold;">end</span>
  <span style="color: #00ffff; font-weight: bold;">end</span>
<span style="color: #00ffff; font-weight: bold;">end</span>
</pre>
</div>

<p>
执行 <code>pod update</code> ：
<img src="http://cdn.defcoding.com/7D071A5C-CE97-4256-A350-7A4940D2CBDF.png" alt="7D071A5C-CE97-4256-A350-7A4940D2CBDF.png">
</p>

<p>
安装完成后，重新打开我们的项目，使用 <code>Cmd + b</code> 重新编译项目。
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">使用 PromiseKit</h3>
<div class="outline-text-3" id="text-5-2">
<p>
实施方案：
</p>
<ol class="org-ol">
<li>将上传函数 <code>uploadFile</code> 封装成 Promise 对象。
</li>
<li>需要一个管理同时上传多个文件的函数 <code>uploadFiles</code> 。
</li>
<li>由于是多个文件都上传成功后才执行相应的操作，经过调研需要使用 PromiseKit 中的 <code>when</code> 方法。
</li>
</ol>

<p>
实现：
<img src="http://cdn.defcoding.com/9F1E98D2-DFE7-49BE-B4A1-9663B44C73FD.png" alt="9F1E98D2-DFE7-49BE-B4A1-9663B44C73FD.png">
</p>

<p>
修改上传调用代码：
<img src="http://cdn.defcoding.com/E8C45853-39C8-4A56-8AE1-15C0EDB11B5C.png" alt="E8C45853-39C8-4A56-8AE1-15C0EDB11B5C.png">
</p>

<p>
<code>Controllers.swift</code> 代码讲解：
</p>
<div class="org-src-container">

<pre class="src src-swift">func uploadFiles(filePaths: NSArray) {
    var uploadFiles: [Promise&lt;String&gt;] = []

    // 将需要上传的文件加入到 promise 对象列表中
    for path in filePaths {
        let filePath = path as! String
        uploadFiles.append(uploadFile(filePath: filePath))
    }

    // 当所有文件都上传完成后执行操作
    when(fulfilled: uploadFiles).then(
        execute: { filenames -&gt; Void in
            print("upload success")
        }
    ).catch(
        execute: {error in
            print(error)
        }
    )
}

func uploadFile(filePath: String) -&gt; Promise&lt;String&gt; {
    // 构造 Promise 对象
    return Promise { fulfill, reject in
        // 获取文件路径中的文件名
        let filename = NSURL(fileURLWithPath: filePath).lastPathComponent!

        // 创建上传凭证
        let token = createQiniuToken(filename: filename)

        // 上传文件
        let qiNiu = QNUploadManager()!
        qiNiu.putFile(filePath, key: filename, token: token, complete: {info, key, resp -&gt; Void in
            switch info?.statusCode {
            case Int32(200)?:
                print("\(filename) upload success")
                fulfill(filename)
            default:
                reject((info?.error)!)
            }
        }, option: nil)
    }
}
</pre>
</div>

<p>
运行测试：
<img src="http://cdn.defcoding.com/4C5D080B-37D6-49FB-835B-F0BD1779B18B.png" alt="4C5D080B-37D6-49FB-835B-F0BD1779B18B.png">
</p>

<p>
测试成功，在所有文件上传完成后打印 <code>upload success</code> ，完全符合预期。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">总结：</h2>
<div class="outline-text-2" id="text-6">
<p>
可以使用的版本有了，之后就是界面和交互的优化了。
</p>

<p>
Promise 编程模型和 PromiseKit 库是非常值得学习的，在 iOS 相关的编程同样可以使用得到。
</p>

<p>
示例代码：<a href="https://github.com/runforever/iDragProject" target="_blank" rel="external">iDragProject</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/&quot;&gt;第一天（方案调研和框架搭建）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/&quot;&gt;第二天（快速原型跑通流程）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/&quot;&gt;第三天（拖动上传和上传多张图片）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/&quot;&gt;第四天（UI 细节调整）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/&quot;&gt;第五天（设计 Logo 和总结）&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;第三天（拖动上传和上传多张图片）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
前面上传流程已经跑通了，不过也仅仅是功能跑通了，要达到可以使用至少需要实现从
文件夹拖动文件上传，并且可以同时上传多张图片。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;拖动上传方案调研&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
使用 Google 先查找方案：
&lt;img src=&quot;http://cdn.defcoding.com/CB8C546F-AD0E-4F7E-9AFA-29138BBFE187.png&quot; alt=&quot;CB8C546F-AD0E-4F7E-9AFA-29138BBFE187.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
根据 Google 搜到文章的更新时间查看了一下相关资料，其中这篇 &lt;a href=&quot;http://swiftrien.blogspot.hk/2015/03/file-drag-drop-for-os-x.html&quot;&gt;File drag &amp;amp; drop for OS-X&lt;/a&gt; 让
我对 &lt;code&gt;OSX 的 Drag &amp;amp; Drop&lt;/code&gt; 编程有了个大概的了解，进而查找到了&lt;a href=&quot;https://developer.apple.com/reference/appkit/nsdraggingdestination&quot;&gt;NSDraggingDestination&lt;/a&gt;  协议，
查看官方文档确定这个是我想要的东西。
&lt;img src=&quot;http://cdn.defcoding.com/BB27652F-7B86-433A-A19E-1365AEA67B24.png&quot; alt=&quot;BB27652F-7B86-433A-A19E-1365AEA67B24.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;
NSDraaingDestination 的使用总结：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;DragAppController 扩展 NSDraggingDestination 协议。
&lt;/li&gt;
&lt;li&gt;window 对象使用 &lt;code&gt;registerForDraggedTypes&lt;/code&gt; 方法注册 Drag 操作。
&lt;/li&gt;
&lt;li&gt;重写 &lt;code&gt;draggingEntered&lt;/code&gt; 方法，实现文件拖动标识。
&lt;/li&gt;
&lt;li&gt;重写 &lt;code&gt;performDragOperation&lt;/code&gt; 方法，实现上传操作。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
下面开始写代码。
    
    </summary>
    
      <category term="Swift" scheme="http://runforever.github.io/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>我用 5 天写了一个 OSX Menu Bar App（第二天）</title>
    <link href="http://runforever.github.io/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/"/>
    <id>http://runforever.github.io/2017-02-01/2017-02-01-我用-5-天写了一个-osx-menu-bar-app（第二天）/</id>
    <published>2017-01-31T16:00:00.000Z</published>
    <updated>2017-02-03T12:51:44.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">目录</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/" target="_blank" rel="external">第一天（方案调研和框架搭建）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第二天（快速原型跑通流程）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第三天（拖动上传和上传多张图片）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第四天（UI 细节调整）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第五天（设计 Logo 和总结）</a>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">第二天（快速原型跑通流程）</h2>
<div class="outline-text-2" id="text-2">
<p>
前面把框架搭好了，我个人喜欢的开发方式是快速原型先做 MVP（最小可行性产品），
然后基于 MVP 迭代新功能，而我想做的东西的 MVP 就是能上传图片。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">调研如何使用七牛</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">七牛推荐的模型</h3>
<div class="outline-text-3" id="text-3-1">
<p>
<img src="http://cdn.defcoding.com/3DC4851E-57DE-4743-AD1C-9ED2DC763D02.png" alt="3DC4851E-57DE-4743-AD1C-9ED2DC763D02.png">
参考文档：<a href="https://developer.qiniu.io/kodo/manual/security" target="_blank" rel="external">七牛安全机制</a>
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">重要的概念：</h3>
<div class="outline-text-3" id="text-3-2">
<ol class="org-ol">
<li>密钥（AccessKey/SecretKey），作用：生成上传凭证。
</li>
<li>上传凭证（UploadToken），作用：上传文件时用作七牛服务器认证。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">七牛上传的流程：</h3>
<div class="outline-text-3" id="text-3-3">
<ol class="org-ol">
<li>使用密钥构造上传凭证。
</li>
<li>使用七牛 SDK 将上传凭证和文件一并提交实现上传。
</li>
</ol>

<p>
七牛推荐的方式是客户端在上传时先请求服务端生成上传策略，客户端获取到上传策略后才能上传文件。<br>
这个应用只有客户端，上传凭证只能在客户端构造，构造的算法参考：<a href="https://developer.qiniu.io/kodo/manual/upload-token" target="_blank" rel="external">上传凭证</a>
</p>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">经过分析，我需要如下 Swift 库：</h3>
<div class="outline-text-3" id="text-3-4">
<ol class="org-ol">
<li>七牛的官方 <a href="https://github.com/qiniu/objc-sdk" target="_blank" rel="external">iOS SDK</a>。
</li>
<li>对字符串进行 HMAC-SHA1 加密的库 <a href="https://github.com/krzyzanowskim/CryptoSwift" target="_blank" rel="external">CryptoSwift</a>。
</li>
<li>能解析 JSON 的库 <a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="external">SwiftyJSON</a>。
</li>
</ol>

<p>
下面开始折腾。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">使用 CocoaPods 安装 Swift 库</h2>
<div class="outline-text-2" id="text-4">
<p>
我写应用的时候刚好赶上 Swift3 发布，Swift3 有了自己的包管理器 <a href="https://github.com/apple/swift-package-manager" target="_blank" rel="external">Swift Package Manager（SPM）</a>，因为是刚刚发布，可能很多库上面都还没有，
保险起见我还是使用 <a href="https://cocoapods.org" target="_blank" rel="external">CocoaPods</a> 来管理 Swift 的库。
</p>

<p>
我使用 <a href="https://rvm.io" target="_blank" rel="external">RVM</a> 管理 Ruby 环境，按照 <a href="https:guides.cocoapods.org/using/getting-started.html#getting-started" target="_blank" rel="external">官方安装文档</a> 安装 CocoaPods 很顺利，执行 <code>pod repo update</code> 同步的时候巨慢，原因大家都懂，
网上有加速的办法，大家自行寻找适合自己的吧，我自己使用的是 ShadowSocks + proxychains4，我的同步方法 <code>proxychains4 pod repo update</code> 。
<img src="http://cdn.defcoding.com/E399924F-EE60-486E-AF8F-E66247BD534B.png" alt="E399924F-EE60-486E-AF8F-E66247BD534B.png">
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">CocoaPods 使用</h3>
<div class="outline-text-3" id="text-4-1">
<p>
在项目根目录建一个 <code>Podfile</code> 文件
</p>
<div class="org-src-container">

<pre class="src src-swift">iDragProject
├── Podfile  # 创建的文件
├── iDragProject
└── iDragProject.xcodeproj

3 directories, 1 file
</pre>
</div>

<p>
里面写入要安装的库
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">Uncomment this line to define a global platform for your project</span>
platform <span style="color: #ff00ff;">:osx</span>, <span style="color: #00ff00;">'10.11'</span>

target <span style="color: #00ff00;">'iDrag'</span> <span style="color: #00ffff; font-weight: bold;">do</span>
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Comment this line if you're not using Swift and don't want to use dynamic frameworks</span>
  use_frameworks!

  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Pods for iDrag</span>
  pod <span style="color: #00ff00;">"Qiniu"</span>, <span style="color: #00ff00;">"~&gt; 7.1"</span>
  pod <span style="color: #00ff00;">"CryptoSwift"</span>
  pod <span style="color: #00ff00;">"SwiftyJSON"</span>
<span style="color: #00ffff; font-weight: bold;">end</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#30001;&#20110;&#25105;&#20351;&#29992;swift3&#65292;&#38656;&#35201;&#37197;&#32622;&#19968;&#19979;&#32534;&#35793;&#35774;&#32622;</span>
post_install <span style="color: #00ffff; font-weight: bold;">do</span> |installer|
  installer.pods_project.targets.each <span style="color: #00ffff; font-weight: bold;">do</span> |target|
    target.build_configurations.each <span style="color: #00ffff; font-weight: bold;">do</span> |config|
      config.build_settings[<span style="color: #00ff00;">'SWIFT_VERSION'</span>] = <span style="color: #00ff00;">'3.0'</span>
    <span style="color: #00ffff; font-weight: bold;">end</span>
  <span style="color: #00ffff; font-weight: bold;">end</span>
<span style="color: #00ffff; font-weight: bold;">end</span>
</pre>
</div>

<p>
Podfile 配置完后，使用 <code>pod install</code> 命令即可安装。
<img src="http://cdn.defcoding.com/E649A905-13A2-405C-80F0-354761202F9E.png" alt="E649A905-13A2-405C-80F0-354761202F9E.png">
</p>

<p>
安装完成后，项目里面会多出 3 个文件， <code>Podfile.lock</code> 、 <code>Pods</code> 和 <code>iDrag.xcworkspace</code> ，使用 Xcode 打开项目的时候选择 <code>iDrag.xcworkspace</code> 而不是原来的 <code>iDrag.xcodeproj</code> 。
<img src="http://cdn.defcoding.com/CBED4913-0C06-44A5-9038-87466799DE46.png" alt="CBED4913-0C06-44A5-9038-87466799DE46.png">
</p>

<p>
打开后运行测试一下
<img src="http://cdn.defcoding.com/7228A76B-0A6B-4AA1-9A18-CDAD3CFD67A3.png" alt="7228A76B-0A6B-4AA1-9A18-CDAD3CFD67A3.png">
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">如何添加新的 Swift 库</h3>
<div class="outline-text-3" id="text-4-2">
<p>
在 Podfile 里添加上新的库配置，然后执行 <code>pod update</code> 命令即可更新。
</p>

<p>
库准备好了，可以开始写代码了，先从构造上传凭证开始。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">构造上传凭证</h2>
<div class="outline-text-2" id="text-5">
<p>
目前对七牛 SDK 的操作有构造上传凭证和上传文件，以后还有其他上传操作，我决定把这些操作统一放到名字为 <code>DragUploadManager</code> 的类里。<br>
</p>

<p>
新建一个 <code>Controllers.swift</code> 的文件，里面放上传相关操作的代码。
<img src="http://cdn.defcoding.com/BF993D43-8622-4E15-9072-B53A3892F4B8.png" alt="BF993D43-8622-4E15-9072-B53A3892F4B8.png">
</p>

<p>
实现代码：
</p>
<div class="org-src-container">

<pre class="src src-swift">func createQiniuToken(filename: String) -&gt; String {
    let accessKey = "your access key"
    let secretKey = "your secret key"
    let bucket = "your bucket"

    // 上传凭证需要的 deadline 参数，Google 搜到的 Swift 转时间戳的方法，两个小时
    let deadline = round(NSDate(timeIntervalSinceNow: 3600).timeIntervalSince1970)

    // 上传凭证构造第一步，准备 Json 格式数据，使用 SwiftJSON 库来构造
    let putPolicyDict:JSON = [
        "scope": "\(bucket):\(filename)",
        "deadline": deadline,
        ]

    // 上传凭证构造第二步，用 Base64 编码数据
    let b64PutPolicy = QNUrlSafeBase64.encode(putPolicyDict.rawString()!)!

    // 上传凭证第三步，用 secretKey 将上面 Base64 编码后的数据使用 HMAC sha1 算法加密
    // 转成二进制格式
    let secretSign =  try! HMAC(key: (secretKey.utf8.map({$0})), variant: .sha1).authenticate((b64PutPolicy.utf8.map({$0})))

    // 上传凭证第四步，将加密后的数据在用 Base64 编码
    let b64SecretSign = QNUrlSafeBase64.encode(Data(bytes: secretSign))!

    // 最后，按照七牛的格式构造成上传凭证
    let putPolicy:String = [accessKey, b64SecretSign, b64PutPolicy].joined(separator: ":")
    return putPolicy
}
</pre>
</div>

<p>
运行看看效果
<img src="http://cdn.defcoding.com/03656444-A868-47FD-8502-A7ED8E0C3892.png" alt="03656444-A868-47FD-8502-A7ED8E0C3892.png">
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">实现上传</h2>
<div class="outline-text-2" id="text-6">
<p>
上传凭证构造好之后，可以开始测试上传文件功能了，查看了七牛 SDK 的 API，可以使用 <code>putFile</code> 函数来做测试。
</p>

<p>
<code>DragUploadManger</code> 添加 <code>uploadFile</code> 函数
</p>
<div class="org-src-container">

<pre class="src src-swift">func uploadFile(filePath: String) {
    // 获取文件路径中的文件名
    let filename = NSURL(fileURLWithPath: filePath).lastPathComponent!

    // 创建上传凭证
    let token = createQiniuToken(filename: filename)

    // 上传文件
    let qiNiu = QNUploadManager()!
    qiNiu.putFile(filePath, key: filename, token: token, complete: {info, key, resp -&gt; Void in
        switch info?.statusCode {
        case Int32(200)?:
            print("upload success")
        default:
            print("upload fail")
        }
    }, option: nil)
}
</pre>
</div>

<p>
添加测试代码测试上传
<img src="http://cdn.defcoding.com/25AA7415-08B5-4AE5-A7EC-CE8AD403C92E.png" alt="25AA7415-08B5-4AE5-A7EC-CE8AD403C92E.png">
</p>

<p>
上传失败信息
</p>
<div class="org-src-container">

<pre class="src src-bash">017-02-01 21:46:17.286161 iDragProject[29836:489720] App Transport Security
has blocked a cleartext HTTP (http://) resource load since it is insecure.
Temporary exceptions can be configured via your app's Info.plist file.
upload fail
</pre>
</div>
<p>
苹果安全机制限制，http 不安全，要实现上传需要到 Info.plist 设置一下
</p>

<p>
设置 Info.plist
<img src="http://cdn.defcoding.com/736C21D3-5FA2-45BB-80C9-F9D106548EE9.png" alt="736C21D3-5FA2-45BB-80C9-F9D106548EE9.png">
</p>

<p>
打开后文件最后添加如下代码
</p>
<div class="org-src-container">

<pre class="src src-xml">&lt;<span style="color: #0000ff; font-weight: bold;">key</span>&gt;NSAppTransportSecurity&lt;/<span style="color: #0000ff; font-weight: bold;">key</span>&gt;
&lt;<span style="color: #0000ff; font-weight: bold;">dict</span>&gt;
    &lt;<span style="color: #0000ff; font-weight: bold;">key</span>&gt;NSExceptionDomains&lt;/<span style="color: #0000ff; font-weight: bold;">key</span>&gt;
    &lt;<span style="color: #0000ff; font-weight: bold;">dict</span>&gt;
        &lt;<span style="color: #0000ff; font-weight: bold;">key</span>&gt;qiniu.com&lt;/<span style="color: #0000ff; font-weight: bold;">key</span>&gt;
        &lt;<span style="color: #0000ff; font-weight: bold;">dict</span>&gt;
            &lt;<span style="color: #0000ff; font-weight: bold;">key</span>&gt;NSIncludesSubdomains&lt;/<span style="color: #0000ff; font-weight: bold;">key</span>&gt;
            &lt;<span style="color: #0000ff; font-weight: bold;">true</span>/&gt;
            &lt;<span style="color: #0000ff; font-weight: bold;">key</span>&gt;NSTemporaryExceptionAllowsInsecureHTTPLoads&lt;/<span style="color: #0000ff; font-weight: bold;">key</span>&gt;
            &lt;<span style="color: #0000ff; font-weight: bold;">true</span>/&gt;
            &lt;<span style="color: #0000ff; font-weight: bold;">key</span>&gt;NSTemporaryExceptionMinimumTLSVersion&lt;/<span style="color: #0000ff; font-weight: bold;">key</span>&gt;
            &lt;<span style="color: #0000ff; font-weight: bold;">string</span>&gt;TLSv1.1&lt;/<span style="color: #0000ff; font-weight: bold;">string</span>&gt;
        &lt;/<span style="color: #0000ff; font-weight: bold;">dict</span>&gt;
    &lt;/<span style="color: #0000ff; font-weight: bold;">dict</span>&gt;
&lt;/<span style="color: #0000ff; font-weight: bold;">dict</span>&gt;
</pre>
</div>

<p>
代码添加位置
<img src="http://cdn.defcoding.com/997A225D-7BDA-4C18-82C7-4E6FDB0A4048.png" alt="997A225D-7BDA-4C18-82C7-4E6FDB0A4048.png">
</p>

<p>
添加完后效果
<img src="http://cdn.defcoding.com/24FA762F-A515-4207-A832-529C96158C9A.png" alt="24FA762F-A515-4207-A832-529C96158C9A.png">
</p>

<p>
再次测试上传
<img src="http://cdn.defcoding.com/D2F5D4C8-079B-48E9-A6DC-636F825B2FC5.png" alt="D2F5D4C8-079B-48E9-A6DC-636F825B2FC5.png">
日志显示上传成功，可以去七牛的后台检查一下是否有上传的文件
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">总结</h2>
<div class="outline-text-2" id="text-7">
<p>
上传功能已经实现，接下来就是要实现拖动文件上传了。<br>
值得注意的地方是：一定要学会使用 CocoaPods 管理 Swift 库。
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/&quot;&gt;第一天（方案调研和框架搭建）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/&quot;&gt;第二天（快速原型跑通流程）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/&quot;&gt;第三天（拖动上传和上传多张图片）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/&quot;&gt;第四天（UI 细节调整）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/&quot;&gt;第五天（设计 Logo 和总结）&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;第二天（快速原型跑通流程）&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
前面把框架搭好了，我个人喜欢的开发方式是快速原型先做 MVP（最小可行性产品），
然后基于 MVP 迭代新功能，而我想做的东西的 MVP 就是能上传图片。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;调研如何使用七牛&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;七牛推荐的模型&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
&lt;img src=&quot;http://cdn.defcoding.com/3DC4851E-57DE-4743-AD1C-9ED2DC763D02.png&quot; alt=&quot;3DC4851E-57DE-4743-AD1C-9ED2DC763D02.png&quot; /&gt;
参考文档：&lt;a href=&quot;https://developer.qiniu.io/kodo/manual/security&quot;&gt;七牛安全机制&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;重要的概念：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;密钥（AccessKey/SecretKey），作用：生成上传凭证。
&lt;/li&gt;
&lt;li&gt;上传凭证（UploadToken），作用：上传文件时用作七牛服务器认证。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;七牛上传的流程：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;使用密钥构造上传凭证。
&lt;/li&gt;
&lt;li&gt;使用七牛 SDK 将上传凭证和文件一并提交实现上传。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
七牛推荐的方式是客户端在上传时先请求服务端生成上传策略，客户端获取到上传策略后才能上传文件。&lt;br  /&gt;
这个应用只有客户端，上传凭证只能在客户端构造，构造的算法参考：&lt;a href=&quot;https://developer.qiniu.io/kodo/manual/upload-token&quot;&gt;上传凭证&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;经过分析，我需要如下 Swift 库：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;七牛的官方 &lt;a href=&quot;https://github.com/qiniu/objc-sdk&quot;&gt;iOS SDK&lt;/a&gt;。
&lt;/li&gt;
&lt;li&gt;对字符串进行 HMAC-SHA1 加密的库 &lt;a href=&quot;https://github.com/krzyzanowskim/CryptoSwift&quot;&gt;CryptoSwift&lt;/a&gt;。
&lt;/li&gt;
&lt;li&gt;能解析 JSON 的库 &lt;a href=&quot;https://github.com/SwiftyJSON/SwiftyJSON&quot;&gt;SwiftyJSON&lt;/a&gt;。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
下面开始折腾。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://runforever.github.io/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>我用 5 天写了一个 OSX Menu Bar App（第一天）</title>
    <link href="http://runforever.github.io/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/"/>
    <id>http://runforever.github.io/2016-12-05/2016-12-05-我用-5-天写了一个-osx-menu-bar-app/</id>
    <published>2016-12-04T16:00:00.000Z</published>
    <updated>2017-02-03T12:51:44.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">目录</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/" target="_blank" rel="external">第一天（方案调研和框架搭建）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第二天（快速原型跑通流程）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第三天（拖动上传和上传多张图片）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第四天（UI 细节调整）</a>
</li>
<li><a href="http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/" target="_blank" rel="external">第五天（设计 Logo 和总结）</a>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">第一天（方案调研和框架搭建）</h2>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">起源</h2>
<div class="outline-text-2" id="text-3">
<p>
我在尝试写一本初学者的编程书《<a href="http://py.defcoding.com" target="_blank" rel="external">如何教妹子学 Python</a>》，书中的图片是上传到七牛云上的，每次上传图片的流程让我觉得很难受，保存图片到桌面，打开浏览器，进入七牛后台，选择图片，上传成功，复制链接，写成 Markdown，放到书里&#x2026;&#x2026;<br>
在 App Store 里找了一圈，有个叫 iPic 的工具，感觉是我想要的东西，但是我接受不了每年要交 20 元的收费模式，又不是什么很难的东西，打算自己实现，实现的过程中学到了很多东西，便有了将实现过程分享出来的想法，
试着帮助那些遇到同样问题的人，上传工具早在国庆期间就写完了，现在才写文章完全是自己的拖延症导致的。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">需求</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>实现一个 Menubar App。
</li>
<li>图片和文件上传到七牛。
</li>
<li>支持多文件拖动上传。
</li>
<li>支持剪贴板上传。
</li>
<li>可以方便的复制文件上传后的 url 和 markdown 格式的 url。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">技术可行性</h2>
<div class="outline-text-2" id="text-5">
<ol class="org-ol">
<li>使用Swift 可以实现 Menubar App。
</li>
<li>七牛有相应的 SDK 可以实现上传图片。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">准备工作</h2>
<div class="outline-text-2" id="text-6">
<ol class="org-ol">
<li>会使用 Swift 语言。
</li>
<li>会使用 cocopods 安装 Swift 库。
</li>
<li>安装了 Dash 工具可以随时查看 cocoa 的 API 文档。
</li>
<li>可以使用 Google 找解决方案。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">最终效果</h2>
<div class="outline-text-2" id="text-7">

<div class="figure">
<p><img src="http://cdn.defcoding.com/idragshow.gif" alt="idragshow.gif">
</p>
</div>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">开始折腾</h2>
<div class="outline-text-2" id="text-8">
</div><div id="outline-container-sec-8-1" class="outline-3">
<h3 id="sec-8-1">Search the f**king google</h3>
<div class="outline-text-3" id="text-8-1">
<p>
确定好需求，开始在 Google 上找解决方案，一开始我并不知道我要做的应用叫 Menubar app，我是这样搜索的：
<img src="http://cdn.defcoding.com/BE2F3DD9-139A-4F10-AEB8-14E5872F7B22.png" alt="BE2F3DD9-139A-4F10-AEB8-14E5872F7B22.png">
</p>

<p>
箭头指向的 <a href="http://footle.org/WeatherBar/" target="_blank" rel="external">文章</a> 对我帮助最大，项目基础框架就是根据这篇文章搭建出来的。
</p>
</div>
</div>

<div id="outline-container-sec-8-2" class="outline-3">
<h3 id="sec-8-2">新建项目</h3>
<div class="outline-text-3" id="text-8-2">
</div><div id="outline-container-sec-8-2-1" class="outline-4">
<h4 id="sec-8-2-1">第一步：选择 macos 的 cocoa 应用</h4>
<div class="outline-text-4" id="text-8-2-1">

<div class="figure">
<p><img src="http://cdn.defcoding.com/5E4913C2-C137-4BDD-B10D-68D4936C90C1.png" alt="5E4913C2-C137-4BDD-B10D-68D4936C90C1.png">
</p>
</div>
</div>
</div>

<div id="outline-container-sec-8-2-2" class="outline-4">
<h4 id="sec-8-2-2">第二步：填写好乱七八糟的项目信息</h4>
<div class="outline-text-4" id="text-8-2-2">

<div class="figure">
<p><img src="http://cdn.defcoding.com/CD7DD7D4-8E7A-4B3C-8AA7-688BC25F8C1D.png" alt="CD7DD7D4-8E7A-4B3C-8AA7-688BC25F8C1D.png">
</p>
</div>
</div>
</div>

<div id="outline-container-sec-8-2-3" class="outline-4">
<h4 id="sec-8-2-3">第三步：运行试试</h4>
<div class="outline-text-4" id="text-8-2-3">
<p>
点击运行按钮，尝试一下 <code>Hello world</code> 的感觉
<img src="http://cdn.defcoding.com/6495FACD-DD72-4CA5-A6B6-ED19CEEC8B79.png" alt="6495FACD-DD72-4CA5-A6B6-ED19CEEC8B79.png">
</p>
</div>
</div>

<div id="outline-container-sec-8-2-4" class="outline-4">
<h4 id="sec-8-2-4">第四步：调整成 Menubar App</h4>
<div class="outline-text-4" id="text-8-2-4">
<p>
Menubar App 不需要主窗口，也不需要显示在 Dock 栏中，只需要显示在屏幕右上角的 Menubar 中就可以了。<br>
</p>

<p>
<code>Main.Storyboard</code> 是编辑 App 界面的地方，这个跟 iOS 一样嘛，看来前段时间学习的 iOS 编程有用武之地了。
</p>

<p>
<b>打开 <code>Main.Storyboard</code> ，删除不需要的东西</b><br>
<img src="http://cdn.defcoding.com/451BEA2D-26EB-472E-A78E-0186C120251D.png" alt="451BEA2D-26EB-472E-A78E-0186C120251D.png">
</p>

<p>
<b>添加上 Menu Item 控件</b><br>
<img src="http://cdn.defcoding.com/34D0D3AE-88FB-441A-95A9-0262B2839660.png" alt="34D0D3AE-88FB-441A-95A9-0262B2839660.png">
</p>

<p>
<b>添加程序启动入口 NSObject</b><br>
和添加 Menu 一样的操作，先搜索，后拖动<br>
<img src="http://cdn.defcoding.com/72739EF5-3DF0-4646-9CA8-812BE9515D76.png" alt="72739EF5-3DF0-4646-9CA8-812BE9515D76.png">
</p>

<p>
新建入口源代码文件，选择类型<br>
<img src="http://cdn.defcoding.com/64243827-5702-492B-96E1-291D64D6E5B9.png" alt="64243827-5702-492B-96E1-291D64D6E5B9.png">
</p>

<p>
填写名字和继承类<br>
<img src="http://cdn.defcoding.com/8C24E5DE-5831-4716-877F-69F4E0241179.png" alt="8C24E5DE-5831-4716-877F-69F4E0241179.png">
</p>

<p>
写入启动代码<br>
</p>
<div class="org-src-container">

<pre class="src src-swift">import Cocoa

class DragAppController: NSObject {

    override func awakeFromNib() {
        print("hello world")
    }
}
</pre>
</div>

<p>
绑定代码和 UI<br>
<img src="http://cdn.defcoding.com/18C2172B-034D-42EC-AD84-589E1F6398A5.png" alt="18C2172B-034D-42EC-AD84-589E1F6398A5.png">
</p>

<p>
测试运行一下<br>
<img src="http://cdn.defcoding.com/6617CFE7-48EE-478E-AA64-D99BC4549A1B.png" alt="6617CFE7-48EE-478E-AA64-D99BC4549A1B.png">
</p>

<p>
<b>设置在 Dock 栏中不展示应用</b><br>
<img src="http://cdn.defcoding.com/272E780C-2FC1-4159-A9BB-831E38693FC4.png" alt="272E780C-2FC1-4159-A9BB-831E38693FC4.png">
</p>

<p>
<b>绑定 Menu Item，使用 Ctrl + Drag 操作</b><br>
同时展示 UI 和 代码技巧<br>
<img src="http://cdn.defcoding.com/DE13C6D9-429B-4939-862B-8EFDF2016359.png" alt="DE13C6D9-429B-4939-862B-8EFDF2016359.png">
</p>

<p>
Ctrl + Drag 操作，按住键盘上的 Ctrl，然后用鼠标拖拽<br>
<img src="http://cdn.defcoding.com/29C85A61-8065-4190-BB40-BC092A274CCD.png" alt="29C85A61-8065-4190-BB40-BC092A274CCD.png">
</p>

<p>
填写变量名<br>
<img src="http://cdn.defcoding.com/77DBFBAE-94F2-4438-AB8B-DA9BE0C2F81D.png" alt="77DBFBAE-94F2-4438-AB8B-DA9BE0C2F81D.png">
</p>

<p>
写代码<br>
</p>
<div class="org-src-container">

<pre class="src src-swift">import Cocoa

class DragAppController: NSObject {

    @IBOutlet weak var dragMenu: NSMenu!
    let dragStatusItem = NSStatusBar.system().statusItem(withLength: NSVariableStatusItemLength)

    override func awakeFromNib() {
        dragStatusItem.title = "iDrag"
        dragStatusItem.menu = dragMenu
    }
}
</pre>
</div>

<p>
运行<br>
<img src="http://cdn.defcoding.com/5045E8C5-A1C7-4301-9F7B-4A88795A882F.png" alt="5045E8C5-A1C7-4301-9F7B-4A88795A882F.png">
</p>

<p>
<b>看不懂 NSStatusBar 是什么鬼，Read the f**king manual</b>
<img src="http://cdn.defcoding.com/453F83F0-753C-4BDF-8C4B-514B4DCEB883.png" alt="453F83F0-753C-4BDF-8C4B-514B4DCEB883.png">
</p>

<p>
遇到什么不懂的只有多看 API 文档，没有别的办法。
</p>

<p>
到这里我们已经把框架搭建好了，下面我们尝试写一个 Action。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-8-3" class="outline-3">
<h3 id="sec-8-3">编写退出应用的 Action</h3>
<div class="outline-text-3" id="text-8-3">
<p>
<b>调整 UI 删除没有的选项和配置相关属性</b><br>
<img src="http://cdn.defcoding.com/6EEC0F20-FEE0-4C69-A9B5-98E874BAEFE3.png" alt="6EEC0F20-FEE0-4C69-A9B5-98E874BAEFE3.png">
</p>

<p>
<b>使用 Ctrl + Drag 建立 Action 与代码的连接</b>
<img src="http://cdn.defcoding.com/291D8B08-04BC-4BC5-A912-69326F7AF216.png" alt="291D8B08-04BC-4BC5-A912-69326F7AF216.png">
</p>

<p>
<b>填写 Action 信息</b>
<img src="http://cdn.defcoding.com/7A917924-4B84-424B-BEAE-CC725C3B88D3.png" alt="7A917924-4B84-424B-BEAE-CC725C3B88D3.png">
</p>

<p>
<b>写代码</b>
</p>
<div class="org-src-container">

<pre class="src src-swift">import Cocoa

class DragAppController: NSObject {

    @IBOutlet weak var dragMenu: NSMenu!
    let dragStatusItem = NSStatusBar.system().statusItem(withLength: NSVariableStatusItemLength)

    override func awakeFromNib() {
        dragStatusItem.title = "iDrag"
        dragStatusItem.menu = dragMenu
    }

    // 退出代码
    @IBAction func quitAction(_ sender: NSMenuItem) {
        NSApplication.shared().terminate(self)
    }
}
</pre>
</div>

<p>
<b>运行</b><br>
<img src="http://cdn.defcoding.com/823ED2FB-C5CA-4D3A-AF74-2AAF9C42812A.png" alt="823ED2FB-C5CA-4D3A-AF74-2AAF9C42812A.png">
</p>
</div>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">总结</h2>
<div class="outline-text-2" id="text-9">
<p>
框架搭好了，可以尝试写逻辑了，有几个点是一定要注意的：
</p>

<ol class="org-ol">
<li>学会同时展示 UI 和代码。
</li>
<li>会用 Ctrl + Drag。
</li>
<li>会查文档。
</li>
</ol>

<p>
示例代码：<a href="https://github.com/runforever/iDragProject" target="_blank" rel="external">iDragProject</a>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2016-12-05/2016-12-05-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app/&quot;&gt;第一天（方案调研和框架搭建）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-01/2017-02-01-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%A4%A9%EF%BC%89/&quot;&gt;第二天（快速原型跑通流程）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-02/2017-02-02-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%B8%89%E5%A4%A9%EF%BC%89/&quot;&gt;第三天（拖动上传和上传多张图片）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E5%9B%9B%E5%A4%A9%EF%BC%89/&quot;&gt;第四天（UI 细节调整）&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.defcoding.com/2017-02-03/2017-02-03-%E6%88%91%E7%94%A8-5-%E5%A4%A9%E5%86%99%E4%BA%86%E4%B8%80%E4%B8%AA-osx-menu-bar-app%EF%BC%88%E7%AC%AC%E4%BA%94%E5%A4%A9%EF%BC%89/&quot;&gt;第五天（设计 Logo 和总结）&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;第一天（方案调研和框架搭建）&lt;/h2&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;起源&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
我在尝试写一本初学者的编程书《&lt;a href=&quot;http://py.defcoding.com&quot;&gt;如何教妹子学 Python&lt;/a&gt;》，书中的图片是上传到七牛云上的，每次上传图片的流程让我觉得很难受，保存图片到桌面，打开浏览器，进入七牛后台，选择图片，上传成功，复制链接，写成 Markdown，放到书里&amp;#x2026;&amp;#x2026;&lt;br  /&gt;
在 App Store 里找了一圈，有个叫 iPic 的工具，感觉是我想要的东西，但是我接受不了每年要交 20 元的收费模式，又不是什么很难的东西，打算自己实现，实现的过程中学到了很多东西，便有了将实现过程分享出来的想法，
试着帮助那些遇到同样问题的人，上传工具早在国庆期间就写完了，现在才写文章完全是自己的拖延症导致的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;需求&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;实现一个 Menubar App。
&lt;/li&gt;
&lt;li&gt;图片和文件上传到七牛。
&lt;/li&gt;
&lt;li&gt;支持多文件拖动上传。
&lt;/li&gt;
&lt;li&gt;支持剪贴板上传。
&lt;/li&gt;
&lt;li&gt;可以方便的复制文件上传后的 url 和 markdown 格式的 url。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-5&quot;&gt;技术可行性&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;使用Swift 可以实现 Menubar App。
&lt;/li&gt;
&lt;li&gt;七牛有相应的 SDK 可以实现上传图片。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-6&quot;&gt;准备工作&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;会使用 Swift 语言。
&lt;/li&gt;
&lt;li&gt;会使用 cocopods 安装 Swift 库。
&lt;/li&gt;
&lt;li&gt;安装了 Dash 工具可以随时查看 cocoa 的 API 文档。
&lt;/li&gt;
&lt;li&gt;可以使用 Google 找解决方案。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-7&quot;&gt;最终效果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.defcoding.com/idragshow.gif&quot; alt=&quot;idragshow.gif&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Swift" scheme="http://runforever.github.io/categories/Swift/"/>
    
    
  </entry>
  
  <entry>
    <title>Git Flow 重新思考</title>
    <link href="http://runforever.github.io/2016-11-16/2016-11-16-git-flow-%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://runforever.github.io/2016-11-16/2016-11-16-git-flow-的思考和模式/</id>
    <published>2016-11-15T16:00:00.000Z</published>
    <updated>2016-11-19T13:25:33.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">一次 Git Flow 的讨论</h2>
<div class="outline-text-2" id="text-1">
<p>
新项目启动，我建议使用 Fork + Pull Request 模式开发，保持提交的干净整洁，其他的同学则建议用一个 dev 分支中央式开发，方便多人协作和同步代码，
最终使用了一个 dev 分支的模式，后端觉得项目初始阶段相互依赖会比较多，方便协作，前端觉得这样方便同时与多人对接后端的接口。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">对于 Git Flow 的思考</h2>
<div class="outline-text-2" id="text-2">
<p>
讨论结束后，我开始重新思考 Git Flow 的模式和使用，得到的答案是使用最基本的 Git 协作流程就可以适应各种 Git Flow。
</p>

<blockquote>
<p>
Git 是为了管理 Linux 内核源代码而开发的版本控制系统，它与生俱来的特点就是 <b><b>分布式</b></b> 和 <b><b>简单的分支管理</b></b>
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">我的需求</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>协作方便。
</li>
<li>提交历史要干净整洁。
</li>
<li>方便 code review。
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Fork + Pull Request 模式</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">理想场景</h3>
<div class="outline-text-3" id="text-4-1">

<div class="figure">
<p><img src="http://cdn.defcoding.com/42231478-BC3F-4F9B-91D5-27D160DEB630.png" alt="42231478-BC3F-4F9B-91D5-27D160DEB630.png">
</p>
</div>

<p>
理想场景下开发者 A、B、C 开发的功能互不依赖，每个人可以在自己 fork 的仓库下随便搞，但是必须保证 Pull Request 的 Commit 干净整洁。<br>
从这里可以看出来，Fork + Pull Request 的模式是鼓励每个人把 Commit 做好的。
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">协作场景</h3>
<div class="outline-text-3" id="text-4-2">
<p>
现实中的场景往往涉及到多人协作，一个人很容易保持干净的提交历史，在多人开发协作要保证这点就需要好好利用 Git 的特点了。
<img src="http://cdn.defcoding.com/img_0059.jpg" alt="img_0059.jpg">
</p>

<p>
现在 A、B、C 三个人都在 <code>cooperate-feature</code> 分支上开发，如果没有任何方案去管理 Commit，很有可能出现下面的情况。
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/85771217-ECD7-401C-977C-71D60B9C9B94.png" alt="85771217-ECD7-401C-977C-71D60B9C9B94.png">
</p>
</div>

<p>
如果可以 A、B、C 做的提交合并一下就好了，类似下面的结果。
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/0CE21100-0C88-4A95-9BDF-AD2E144B42BE.png" alt="0CE21100-0C88-4A95-9BDF-AD2E144B42BE.png">
</p>
</div>

<p>
使用下面的流程可以要达到上面的目的。
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/160609DE-5A2F-4265-B2A4-9EDCBEAB3B1A.png" alt="160609DE-5A2F-4265-B2A4-9EDCBEAB3B1A.png">
</p>
</div>

<p>
具体流程：
</p>
<ol class="org-ol">
<li>定义一个协作分支，不能直接在上面做提交，只用作同步和分支合并。
</li>
<li>每次要开发新功能都需要切分支，如： <code>feature-xxx</code> 、 <code>bugfix-xxx</code> 、 <code>hotfix-xxx</code> 。
</li>
<li>开发完成后花几分钟使用 <code>rebase</code> 命令将提交合并和写清晰的 commit message。
</li>
<li>将提交合并到协作分支。
</li>
<li>push 协作分支到远端让其他人同步。
</li>
</ol>

<p>
这样就利用了 Git 分支的优势解决了提交历史的问题，最重要的一点是定义好协作分支，并且协作分支只负责同步和合并自己其他分支的提交。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">一个分支中央式开发模式</h2>
<div class="outline-text-2" id="text-5">
<p>
明白了协作场景的正确用法后，一个分支中央式开发模式可以对应进去，中央分支是协作分支，只负责同步和合并代码，开发功能切分支去开发，完成后合并。
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">结论</h2>
<div class="outline-text-2" id="text-6">
<ol class="org-ol">
<li>要学会使用 Git 的协作流程，这是最基本的 Git 技能。
</li>
<li>中央是开发适合项目初期，协作比较多的场景。
</li>
<li>Fork + Pull Request 模式适合项目稳定的时期，方便 Code Review。
</li>
</ol>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;一次 Git Flow 的讨论&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
新项目启动，我建议使用 Fork + Pull Request 模式开发，保持提交的干净整洁，其他的同学则建议用一个 dev 分支中央式开发，方便多人协作和同步代码，
最终使用了一个 dev 分支的模式，后端觉得项目初始阶段相互依赖会比较多，方便协作，前端觉得这样方便同时与多人对接后端的接口。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;对于 Git Flow 的思考&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
讨论结束后，我开始重新思考 Git Flow 的模式和使用，得到的答案是使用最基本的 Git 协作流程就可以适应各种 Git Flow。
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Git 是为了管理 Linux 内核源代码而开发的版本控制系统，它与生俱来的特点就是 &lt;b&gt;&lt;b&gt;分布式&lt;/b&gt;&lt;/b&gt; 和 &lt;b&gt;&lt;b&gt;简单的分支管理&lt;/b&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;我的需求&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;协作方便。
&lt;/li&gt;
&lt;li&gt;提交历史要干净整洁。
&lt;/li&gt;
&lt;li&gt;方便 code review。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="git" scheme="http://runforever.github.io/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>djkit 开发记录</title>
    <link href="http://runforever.github.io/2016-11-04/2016-11-04-djkit-%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://runforever.github.io/2016-11-04/2016-11-04-djkit-开发记录/</id>
    <published>2016-11-03T16:00:00.000Z</published>
    <updated>2016-11-04T06:25:05.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">原因</h2>
<div class="outline-text-2" id="text-1">
<p>
在公司的研发团队中，我除了要写代码，还要做一些项目架构和基础设施搭建的工作，每次搭建一个新项目都会有不少重复的工作，一两次还好，多了我真的有点受不了，于是思索着写这么一个东西来减少工作的痛苦。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">技术架构</h2>
<div class="outline-text-2" id="text-2">
<p>
工作中主要使用 Python，API 主要使用 Django、Django RESTframework 来做，一些 Python 依赖和目录结构都是统一的，我就先减少这部分的重复工作吧。
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">requirements</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">

<pre class="src src-bash">Django==1.9.10
django-cors-headers==1.1.0
django-nose==1.4.4
django-rest-swagger==0.3.7
djangorestframework==3.4.6
djangorestframework-jwt==1.8.0
mysqlclient==1.3.7
raven==5.26.0
</pre>
</div>

<p>
Django 使用 1.9.10 的原因是这个版本和 <a href="http://django-rest-swagger.readthedocs.io/en/stable-0.3.x/" target="_blank" rel="external">django-rest-swagger</a> 的 0.3.7 版本配合比较好，比较适合我们团队，
可以很方便的在浏览器下调试，效果如下：
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/21986351-ADE1-4AAA-9E2F-CC05B27E5EE1.png" alt="21986351-ADE1-4AAA-9E2F-CC05B27E5EE1.png">
</p>
</div>

<p>
<a id="more"></a>
</p>

<ul class="org-ul">
<li><a href="https://github.com/ottoyiu/django-cors-headers" target="_blank" rel="external">django-cors-headers</a> 用来解决前端请求接口的跨域问题。
</li>
<li><a href="https://github.com/GetBlimp/django-rest-framework-jwt" target="_blank" rel="external">djangorestframework-jwt</a> 用来解决接口的 Token Auth 问题。
</li>
<li><a href="https://github.com/PyMySQL/mysqlclient-python" target="_blank" rel="external">mysqlclient</a> Python 的 MySQL 驱动，支持 Python 3。
</li>
<li><a href="https://docs.sentry.io/clients/python/" target="_blank" rel="external">raven</a> Sentry 的客户端，用于记录生产环境用户遇到 500 异常。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">目录结构</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">

<pre class="src src-bash">├── .gitignore                         # python 的 gitignore 文件
├── .venv                              # virtualenv
├── manage.py
├── requirements                       # python 依赖
│   ├── base.txt
│   ├── dev.txt
│   └── prod.txt
└── webapi                             # 项目代码
    ├── __init__.py
    ├── admin.py                       # model 统一添加到 django admin 中
    ├── migrations
    │   └── __init__.py
    ├── models                         # models
    │   └── __init__.py
    ├── settings                       # settings
    │   ├── __init__.py
    │   ├── local_settings.py.tpl
    │   └── settings.py
    ├── urls.py
    └── wsgi.py
</pre>
</div>

<p>
requirements 做成一个文件夹是考虑到 <b>开发环境</b> 的依赖和 <b>生产环境</b> 可能会有区别。<br>
models 做成一个文件夹是因为我们想在一个地方统一管理所有 models 而不是分散在各个 app 中。<br>
<code>models/__init__.py</code> 的代码
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#27599;&#26032;&#22686;&#19968;&#20010; models &#25991;&#20214;&#65292;&#23601;&#28155;&#21152;&#19968;&#34892; import &#20195;&#30721;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">from .your_models import *</span>
</pre>
</div>

<p>
settings 做成一个文件夹是为了区分 <b>开发环境</b> 和 <b>生产环境</b> 的配置。<br>
秘密都藏在 <code>settings/__init__.py</code> 文件中。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #00ffff; font-weight: bold;">from</span> .settings <span style="color: #00ffff; font-weight: bold;">import</span> *

<span style="color: #00ffff; font-weight: bold;">try</span>:
    <span style="color: #00ffff; font-weight: bold;">from</span> .local_settings <span style="color: #00ffff; font-weight: bold;">import</span> *
<span style="color: #00ffff; font-weight: bold;">except</span>:
    <span style="color: #00ffff; font-weight: bold;">pass</span>
</pre>
</div>

<p>
admin.py 功能是把所有 models 添加到 django admin 中，方便开发过程中的调试。<br>
<code>admin.py</code> 代码
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #00ffff; font-weight: bold;">import</span> inspect

<span style="color: #00ffff; font-weight: bold;">from</span> django.contrib <span style="color: #00ffff; font-weight: bold;">import</span> admin

<span style="color: #00ffff; font-weight: bold;">import</span> models <span style="color: #00ffff; font-weight: bold;">as</span> app_models

<span style="color: #00ffff; font-weight: bold;">for</span> attr <span style="color: #00ffff; font-weight: bold;">in</span> <span style="color: #0000ff; font-weight: bold;">dir</span>(app_models):
    <span style="color: #ffff00;">model</span> = <span style="color: #0000ff; font-weight: bold;">getattr</span>(app_models, attr)
    <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #00ffff; font-weight: bold;">not</span> inspect.isclass(model):
        <span style="color: #00ffff; font-weight: bold;">continue</span>

    <span style="color: #00ffff; font-weight: bold;">try</span>:
        admin.site.register(model)
    <span style="color: #00ffff; font-weight: bold;">except</span>:
        <span style="color: #00ffff; font-weight: bold;">pass</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">settings 的额外配置</h3>
<div class="outline-text-3" id="text-2-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">import</span> datetime

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">django restframework app</span>
<span style="color: #ffff00;">INSTALLED_APPS</span> += [
    <span style="color: #00ff00;">'rest_framework'</span>,
    <span style="color: #00ff00;">'rest_framework_jwt'</span>,
    <span style="color: #00ff00;">'rest_framework_swagger'</span>,
    <span style="color: #00ff00;">'corsheaders'</span>,
]

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">Django REST Framework settings</span>
<span style="color: #ffff00;">REST_FRAMEWORK</span> = {
    <span style="color: #00ff00;">'DEFAULT_PERMISSION_CLASSES'</span>: (
        <span style="color: #00ff00;">'rest_framework.permissions.IsAuthenticated'</span>,
    ),
    <span style="color: #00ff00;">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (
        <span style="color: #00ff00;">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,
    ),
    <span style="color: #00ff00;">'DEFAULT_PAGINATION_CLASS'</span>: <span style="color: #00ff00;">'rest_framework.pagination.PageNumberPagination'</span>,
    <span style="color: #00ff00;">'PAGE_SIZE'</span>: 20,
    <span style="color: #00ff00;">'DEFAULT_PARSER_CLASSES'</span>: (
        <span style="color: #00ff00;">'rest_framework.parsers.JSONParser'</span>,
        <span style="color: #00ff00;">'rest_framework.parsers.FormParser'</span>,
        <span style="color: #00ff00;">'rest_framework.parsers.MultiPartParser'</span>,
    ),
    <span style="color: #00ff00;">'DEFAULT_RENDERER_CLASSES'</span>: (
        <span style="color: #00ff00;">'rest_framework.renderers.JSONRenderer'</span>,
    ),
}

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">jwt auth settings</span>
<span style="color: #ffff00;">JWT_AUTH</span> = {
    <span style="color: #00ff00;">'JWT_ENCODE_HANDLER'</span>:
        <span style="color: #00ff00;">'rest_framework_jwt.utils.jwt_encode_handler'</span>,

    <span style="color: #00ff00;">'JWT_DECODE_HANDLER'</span>:
        <span style="color: #00ff00;">'rest_framework_jwt.utils.jwt_decode_handler'</span>,

    <span style="color: #00ff00;">'JWT_PAYLOAD_HANDLER'</span>:
        <span style="color: #00ff00;">'rest_framework_jwt.utils.jwt_payload_handler'</span>,

    <span style="color: #00ff00;">'JWT_PAYLOAD_GET_USER_ID_HANDLER'</span>:
        <span style="color: #00ff00;">'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler'</span>,

    <span style="color: #00ff00;">'JWT_RESPONSE_PAYLOAD_HANDLER'</span>:
        <span style="color: #00ff00;">'rest_framework_jwt.utils.jwt_response_payload_handler'</span>,

    <span style="color: #00ff00;">'JWT_SECRET_KEY'</span>: SECRET_KEY,
    <span style="color: #00ff00;">'JWT_ALGORITHM'</span>: <span style="color: #00ff00;">'HS512'</span>,
    <span style="color: #00ff00;">'JWT_VERIFY'</span>: <span style="color: #ff00ff;">True</span>,
    <span style="color: #00ff00;">'JWT_VERIFY_EXPIRATION'</span>: <span style="color: #ff00ff;">True</span>,
    <span style="color: #00ff00;">'JWT_LEEWAY'</span>: 0,
    <span style="color: #00ff00;">'JWT_EXPIRATION_DELTA'</span>: datetime.timedelta(seconds=60 * 60 * 24),

    <span style="color: #00ff00;">'JWT_ALLOW_REFRESH'</span>: <span style="color: #ff00ff;">False</span>,
    <span style="color: #00ff00;">'JWT_REFRESH_EXPIRATION_DELTA'</span>: datetime.timedelta(days=7),

    <span style="color: #00ff00;">'JWT_AUTH_HEADER_PREFIX'</span>: <span style="color: #00ff00;">'JWT'</span>,
}

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">cors header</span>
<span style="color: #ffff00;">CORS_ORIGIN_ALLOW_ALL</span> = <span style="color: #ff00ff;">True</span>
</pre>
</div>

<p>
以上的模板可以在 <a href="https://github.com/BurnishTechCN/django-starter-template" target="_blank" rel="external">django-starter-template</a> 里找到。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">技术思路</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">我的需求</h3>
<div class="outline-text-3" id="text-3-1">
<ol class="org-ol">
<li>最终效果是使用 <code>djkit init your_project</code> 一条命令搞定项目初始化。
</li>
<li>写成一个库，使用 pip 可以安装，方便以后升级。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">技术调研</h3>
<div class="outline-text-3" id="text-3-2">
<p>
命令行工具的选用，经过了各种筛选，最终使用了 <a href="http://click.pocoo.org/5/" target="_blank" rel="external">click</a> 这个库来做命令行工具的解析，原因很简单，
个人直觉。<br>
文件的操作我就直接使用了笨办法，subprocess 调用 shell 命令解决。
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">初始化流程</h3>
<div class="outline-text-3" id="text-3-3">
<ol class="org-ol">
<li>clone <a href="https://github.com/BurnishTechCN/django-starter-template" target="_blank" rel="external">django-starter-template</a> 到 /tmp 目录。
</li>
<li>/tmp 目录初始化一个 virtualenv 里面安装 django 1.9.10。
</li>
<li>使用 <code>django-admin.py startproject your_project</code> 初始化项目。
</li>
<li>生成的项目中初始化 virtualenv 安装 requirements 的依赖。
</li>
<li>复制 django-starter-template 模板的代码到生成的项目中。
</li>
<li>删除 /tmp 下生成的临时文件。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">实现</h3>
<div class="outline-text-3" id="text-3-4">
<p>
目录结构
</p>
<div class="org-src-container">

<pre class="src src-python">&#9500;&#9472;&#9472; LICENSE
&#9500;&#9472;&#9472; README.md
&#9500;&#9472;&#9472; <span style="color: #0000ff; font-weight: bold;">bin</span>
&#9474;&#160;&#160; &#9492;&#9472;&#9472; djkit
&#9500;&#9472;&#9472; djkit
&#9474;&#160;&#160; &#9500;&#9472;&#9472; __init__.py
&#9474;&#160;&#160; &#9492;&#9472;&#9472; djkit.py
&#9492;&#9472;&#9472; setup.py
</pre>
</div>

<p>
核心代码在 <code>djkit/djkit.py</code> 里。<br>
所有代码实现在 <a href="https://github.com/BurnishTechCN/djkit" target="_blank" rel="external">djkit</a> 项目，对细节感兴趣的可以去看源代码。
</p>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5">写成 Python 库</h3>
<div class="outline-text-3" id="text-3-5">
<p>
只需要一个 <code>setup.py</code> 搞定。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #00ffff; font-weight: bold;">from</span> setuptools <span style="color: #00ffff; font-weight: bold;">import</span> setup

setup(
    name=<span style="color: #00ff00;">'djkit'</span>,
    version=<span style="color: #00ff00;">'0.3'</span>,
    description=<span style="color: #00ff00;">'django starter kit'</span>,
    url=<span style="color: #00ff00;">'https://github.com/BurnishTechCN/djkit'</span>,
    author=<span style="color: #00ff00;">'runforever'</span>,
    author_email=<span style="color: #00ff00;">'c.chenchao.c@gmail.com'</span>,
    <span style="color: #ff00ff;">license</span>=<span style="color: #00ff00;">'WTFPL'</span>,
    packages=[<span style="color: #00ff00;">'djkit'</span>],
    install_requires=[
        <span style="color: #00ff00;">'virtualenv'</span>,
        <span style="color: #00ff00;">'click'</span>,
    ],
    scripts = [<span style="color: #00ff00;">'bin/djkit'</span>],
    zip_safe=<span style="color: #ff00ff;">False</span>,
)
</pre>
</div>

<p>
程序入口 <code>bin/djkit</code> 文件，依然是 Python
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;">#</span><span style="color: #ff0000;">!/usr/bin/env python</span>

<span style="color: #00ffff; font-weight: bold;">from</span> djkit <span style="color: #00ffff; font-weight: bold;">import</span> djkit
djkit.cli()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6">安装和使用</h3>
<div class="outline-text-3" id="text-3-6">
<div class="org-src-container">

<pre class="src src-bash">pip install .
# 或者
pip install git+https://github.com/BurnishTechCN/djkit.git

# 使用
djkit init webapi
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7">开源和 License</h3>
<div class="outline-text-3" id="text-3-7">
<p>
没有开源社区，我写不出来这个工具，所以依旧开源回馈社区，如果能解决到别人的问题，那就达到效果了，
不知道从哪听来的 WTFPL，感觉碉堡了，于是就他了。
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/wtfpl.png" alt="wtfpl.png">
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">附上代码</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li><a href="https://github.com/BurnishTechCN/djkit" target="_blank" rel="external">djkit</a>
</li>
<li><a href="https://github.com/BurnishTechCN/django-starter-template" target="_blank" rel="external">django-starter-template</a>
</li>
</ol>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;原因&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
在公司的研发团队中，我除了要写代码，还要做一些项目架构和基础设施搭建的工作，每次搭建一个新项目都会有不少重复的工作，一两次还好，多了我真的有点受不了，于是思索着写这么一个东西来减少工作的痛苦。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;技术架构&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
工作中主要使用 Python，API 主要使用 Django、Django RESTframework 来做，一些 Python 依赖和目录结构都是统一的，我就先减少这部分的重复工作吧。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;requirements&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;Django==1.9.10
django-cors-headers==1.1.0
django-nose==1.4.4
django-rest-swagger==0.3.7
djangorestframework==3.4.6
djangorestframework-jwt==1.8.0
mysqlclient==1.3.7
raven==5.26.0
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Django 使用 1.9.10 的原因是这个版本和 &lt;a href=&quot;http://django-rest-swagger.readthedocs.io/en/stable-0.3.x/&quot;&gt;django-rest-swagger&lt;/a&gt; 的 0.3.7 版本配合比较好，比较适合我们团队，
可以很方便的在浏览器下调试，效果如下：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.defcoding.com/21986351-ADE1-4AAA-9E2F-CC05B27E5EE1.png&quot; alt=&quot;21986351-ADE1-4AAA-9E2F-CC05B27E5EE1.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="django" scheme="http://runforever.github.io/categories/django/"/>
    
    
  </entry>
  
  <entry>
    <title>迁移 Octopress 到 Hexo</title>
    <link href="http://runforever.github.io/2016-11-02/2016-11-02-%E8%BF%81%E7%A7%BB-octopress-%E5%88%B0-hexo/"/>
    <id>http://runforever.github.io/2016-11-02/2016-11-02-迁移-octopress-到-hexo/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2017-02-10T08:06:48.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">不折腾会死</h2>
<div class="outline-text-2" id="text-1">
<p>
前几天更新了 <a href="http://runforever.github.io/2014-07-19/2014-07-19-python-mixin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">Python Mixin 学习笔记</a> 这篇文章，文章中有一张图要显示，于是想添加 fancybox 插件来预览图片，
原本以为是非常简单的一件事，结果上 google 果然没有找到，同时发现博客的分页有 bug，再看看 Octopress 的
最后更新时间，想到 Octopress 这些茫茫多的问题于是便有了迁移 Octopress 到 Hexo 的念头。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">迁移前的调研</h2>
<div class="outline-text-2" id="text-2">
<p>
google 找了一些迁移的文章，发现迁移没有想象中难，于是开始准备。
</p>

<p>
我的需求：
</p>
<ol class="org-ol">
<li>可以继续使用 Emacs 上的 <a href="https://github.com/yoshinari-nomura/org-octopress" target="_blank" rel="external">org-octopress</a> 插件写博客。
</li>
<li>可以兼容我之前写的文章，代码高亮必须漂亮。
</li>
<li>一定要有 fancybox。
</li>
<li>没有分页等乱七八糟的明显 bug。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">迁移后的优点</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>generate 速度大幅提高。
</li>
<li>Hexo 更新快，插件多，没有很明显的 bug。
</li>
<li>完美兼容我的写作习惯。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">迁移过程</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>安装配置 Hexo。
</li>
<li>迁移 <code>source/_posts</code> 里的博客源文件。
</li>
<li>重新配置 org-octopress。
</li>
<li>选择一个兼容 Octopress 文章的主题。
</li>
<li>调整 Hexo 和主题的配置。
</li>
<li>博客代码管理。
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">安装配置 Hexo</h3>
<div class="outline-text-3" id="text-4-1">
<p>
安装过程可以参考 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">官方文档</a>，值得注意的地方是：
</p>
<ol class="org-ol">
<li>推荐使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a> 安装 node。
</li>
<li><code>Error with DTrace</code> 使用 <code>npm install hexo --no-optional</code> 解决，参考 <a href="https:hexo.io/docs/troubleshooting.html#Error-with-DTrace-Mac-OS-X" target="_blank" rel="external">hexo troubleshooting</a>。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">迁移 <code>source/_posts</code> 里的博客源文件</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Hexo 有 <a href="https://hexo.io/zh-cn/docs/migration.html#Octopress" target="_blank" rel="external">迁移文档</a>，我的迁移过程：
</p>
<div class="org-src-container">

<pre class="src src-bash"># 创建文件夹
mkdir blog
cd blog

# 初始化
hexo init

# 安装依赖
npm install

# 解决 Error with DTrace 问题
npm install hexo --no-optional

# 查看目录
tree -L 1

.
├── _config.yml
├── db.json
├── node_modules
├── org
├── package.json
├── public
├── scaffolds
├── source
└── themes

# 复制 Octopress source/_posts 的文件到当前的 source/_posts
cp /your_octopress_path/source_posts/* source/_posts
</pre>
</div>

<p>
首次配置 <code>blog/_config.yml</code>
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ffff00;">title</span>: Runforever
<span style="color: #ffff00;">subtitle</span>: K.I.S.S
<span style="color: #ffff00;">description</span>: &#25105;&#21482;&#26159;&#22312;&#20889;&#19968;&#20010;&#25925;&#20107;
<span style="color: #ffff00;">author</span>: runforever

<span style="color: #ff0000;">...</span>

<span style="color: #ffff00;">permalink</span>: :year-:month-:day/:title/  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35201;&#21644; Octopress &#30340; permalink &#20445;&#25345;&#19968;&#33268;</span>
</pre>
</div>

<p>
生成博客
</p>
<div class="org-src-container">

<pre class="src src-bash">hexo generate
hexo server --watch

# 可以简写
hexo g
hexo s --watch
</pre>
</div>
<p>
这些步骤没有什么难度，很快就搞定了。
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">重新配置 org-octopress</h3>
<div class="outline-text-3" id="text-4-3">
<p>
我的配置如下：
</p>
<div class="org-src-container">

<pre class="src src-lisp">(<span style="color: #00ffff; font-weight: bold;">require</span> '<span style="color: #ff00ff;">org-octopress</span>)
(setq org-octopress-directory-top       <span style="color: #00ff00;">"/your-blog-path/source"</span>)
(setq org-octopress-directory-posts     <span style="color: #00ff00;">"/your-blog-path/source/_posts"</span>)
(setq org-octopress-directory-org-top   <span style="color: #00ff00;">"/your-blog-path/source"</span>)
(setq org-octopress-directory-org-posts <span style="color: #00ff00;">"/your-blog-path/org/source"</span>)
(setq org-octopress-setup-file          <span style="color: #00ff00;">"/your-blog-path/org/setupfile.org"</span>)
</pre>
</div>

<p>
在 blog 文件夹下新建了 org 目录，里面有 org 的配置文件 <code>setupfile.org</code> 和放博客源文件的 source 目录，
需要将原来 octopress 的 org 博客源文件 copy 到 org/source 。
</p>

<p>
配置好后，重启 Emacs，修改了 <a href="http://runforever.github.io/2016-02-03/2016-02-03-ansible%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/">Ansible 使用入门</a> 文章来测试效果，没有问题。
</p>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4">选择一个兼容 Octopress 文章的主题</h3>
<div class="outline-text-3" id="text-4-4">
<p>
这个过程是整个迁移过程中最耗时的，<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo Theme</a> 这里满屏幕的主题，经过测试 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a> 是对
迁移的兼容性最好的，别的主题要么样式错乱，要么代码高亮有问题，整个测试过程让我崩溃的想要放弃。
</p>

<p>
next 主题 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">安装文档</a>，过程：
</p>
<div class="org-src-container">

<pre class="src src-bash">git clone https://github.com/iissnan/hexo-theme-next.git theme/next
</pre>
</div>

<p>
修改 <code>blog/_config.yml</code> 中 theme 配置
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">Extensions</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">Plugins: http://hexo.io/plugins/</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">Themes: http://hexo.io/themes/</span>
<span style="color: #ffff00;">theme</span>: next
</pre>
</div>

<p>
测试
</p>
<div class="org-src-container">

<pre class="src src-bash">hexo g
hexo s
</pre>
</div>

<p>
当我看到显示效果后，我决定就是它了，接下来就是配置的微调了。
</p>
</div>
</div>

<div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5">调整 Hexo 和主题的配置</h3>
<div class="outline-text-3" id="text-4-5">
<p>
<code>blog/_config.yml</code> 的调整
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ffff00;">title</span>: Runforever
<span style="color: #ffff00;">subtitle</span>: K.I.S.S
<span style="color: #ffff00;">description</span>: &#25105;&#21482;&#26159;&#22312;&#20889;&#19968;&#20010;&#25925;&#20107;
<span style="color: #ffff00;">author</span>: runforever
<span style="color: #ffff00;">language</span>: zh-Hans   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35821;&#35328;</span>
<span style="color: #ffff00;">timezone</span>: Asia/Shanghai  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22320;&#21306;</span>
<span style="color: #ffff00;">avatar</span>: http://cdn.defcoding.com/0227c20b4bab4ef28f08f9ae3c6aa875.jpg   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22836;&#20687;&#37197;&#32622;</span>

<span style="color: #ffff00;">permalink</span>: :year-:month-:day/:title/  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21338;&#23458;&#38142;&#25509;</span>
</pre>
</div>

<p>
<code>theme/next/_config.yml</code> 的调整
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ffff00;">keywords</span>: <span style="color: #00ff00;">"&#25105;&#21482;&#26159;&#22312;&#20889;&#25925;&#20107;"</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35774;&#32622;&#20195;&#30721;&#32972;&#26223;</span>
<span style="color: #ff0000;">#    </span><span style="color: #ff0000;">normal | night | night eighties | night blue | night bright</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">https://github.com/chriskempson/tomorrow-theme</span>
<span style="color: #ffff00;">highlight_theme</span>: night

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20391;&#36793;&#26639;&#33756;&#21333;&#23637;&#31034;</span>
<span style="color: #ffff00;">menu</span>:
  <span style="color: #ffff00;">home</span>: /
  <span style="color: #ffff00;">categories</span>: /categories
  <span style="color: #ffff00;">archives</span>: /archives

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25105;&#36873;&#29992;&#30340;&#20027;&#39064;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">Schemes</span>
<span style="color: #ff0000;">#</span><span style="color: #ff0000;">scheme: Muse</span>
<span style="color: #ffff00;">scheme</span>: Mist
<span style="color: #ff0000;">#</span><span style="color: #ff0000;">scheme: Pisces</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23637;&#31034;&#30340;&#38142;&#25509;</span>
<span style="color: #ffff00;">social</span>:
  <span style="color: #ffff00;">GitHub</span>: https://github.com/runforever
  <span style="color: #ffff00;">Bitbucket</span>: https://bitbucket.com/runforever
  <span style="color: #ffff00;">&#25552; Issue</span>: https://github.com/runforever/runforever.github.com/issues/new

<span style="color: #ffff00;">sidebar</span>:
  <span style="color: #ffff00;">position</span>: left
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Sidebar Display, </span><span style="color: #ffff00;">available value</span><span style="color: #ff0000;">:</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- post    expand on posts automatically. Default.</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- always  expand for all pages automatically</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- hide    expand only when click on the sidebar toggle icon.</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- remove  Totally remove sidebar including sidebar toggler.</span>
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35774;&#32622;&#20391;&#36793;&#26639;&#24635;&#26159;&#26174;&#31034;</span>
  <span style="color: #ffff00;">display</span>: always
</pre>
</div>
<p>
经过测试，代码高亮主题为 <code>night</code> 的时候兼容效果最好，预览后，终于看到曙光了，
不过侧边栏分类页面无法显示，查看<a href="http:theme-next.iissnan.com/theme-settings.html#categories-page" target="_blank" rel="external"> 主题配置</a> 文档找到了解决方案。
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/F089DF58-F049-431A-88DD-C3744954318C.png" alt="F089DF58-F049-431A-88DD-C3744954318C.png">
</p>
</div>


<div class="figure">
<p><img src="http://cdn.defcoding.com/93E66597-DCA7-4F7D-AA13-FA70CE6ACB2C.png" alt="93E66597-DCA7-4F7D-AA13-FA70CE6ACB2C.png">
</p>
</div>

<p>
现在只剩下如何去管理博客代码这个问题了。
</p>
</div>
</div>

<div id="outline-container-sec-4-6" class="outline-3">
<h3 id="sec-4-6">博客代码管理</h3>
<div class="outline-text-3" id="text-4-6">
<p>
我依然使用 GitHub Pages 来发布博客，根据<a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="external"> 官方部署文档</a> 来做就行。
</p>
<div class="org-src-container">

<pre class="src src-bash"># hexo-deployer-git
npm install hexo-deployer-git --save
</pre>
</div>

<p>
修改 <code>blog/_config.yml</code>
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">Deployment</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">Docs: http://hexo.io/docs/deployment.html</span>
<span style="color: #ffff00;">deploy</span>:
  <span style="color: #ffff00;">type</span>: git
  <span style="color: #ffff00;">repo</span>: https://github.com/runforever/runforever.github.com.git
</pre>
</div>

<p>
测试发布
</p>
<div class="org-src-container">

<pre class="src src-bash">hexo g
hexo deploy
</pre>
</div>

<p>
发布没有问题，博客代码的版本控制我延续 Octopress 的策略使用 master 和 source 两个分支，
master 用于博客发布，source 用于源代码管理。
</p>
</div>

<div id="outline-container-sec-4-6-1" class="outline-4">
<h4 id="sec-4-6-1">提交博客源代码</h4>
<div class="outline-text-4" id="text-4-6-1">
<p>
将 theme/ 文件夹添加的 blog/.gitignore
</p>
<div class="org-src-container">

<pre class="src src-bash">.DS_Store
Thumbs.db
db.json
*.log
node_modules/
public/
.deploy*/
themes/
</pre>
</div>

<p>
提交代码
</p>
<div class="org-src-container">

<pre class="src src-bash">git add .
git commit -a -m "init hexo blog"

# 修改 master 分支重命名为 source
git branch -m source

# 强制 push
git push -f
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-6-2" class="outline-4">
<h4 id="sec-4-6-2">提交博客主题</h4>
<div class="outline-text-4" id="text-4-6-2">
<p>
首先，GitHub 上 fork 一份 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a> 到自己的仓库。
然后，开始提交代码。
</p>
<div class="org-src-container">

<pre class="src src-bash">cd theme/next
git remote set-url origin https://your-fork-repo.git
git commit -a -m 'change config'
git push
</pre>
</div>
<p>
打完收工，整个迁移过程已经完成，博客效果正如你现在看到的。
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">感谢</h2>
<div class="outline-text-2" id="text-5">
<ol class="org-ol">
<li>Hexo 提供静态博客框架。
</li>
<li>next 提供的博客主题。
</li>
</ol>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;不折腾会死&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
前几天更新了 &lt;a href=&quot;http://runforever.github.io/2014-07-19/2014-07-19-python-mixin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/&quot;&gt;Python Mixin 学习笔记&lt;/a&gt; 这篇文章，文章中有一张图要显示，于是想添加 fancybox 插件来预览图片，
原本以为是非常简单的一件事，结果上 google 果然没有找到，同时发现博客的分页有 bug，再看看 Octopress 的
最后更新时间，想到 Octopress 这些茫茫多的问题于是便有了迁移 Octopress 到 Hexo 的念头。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;迁移前的调研&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
google 找了一些迁移的文章，发现迁移没有想象中难，于是开始准备。
&lt;/p&gt;

&lt;p&gt;
我的需求：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;可以继续使用 Emacs 上的 &lt;a href=&quot;https://github.com/yoshinari-nomura/org-octopress&quot;&gt;org-octopress&lt;/a&gt; 插件写博客。
&lt;/li&gt;
&lt;li&gt;可以兼容我之前写的文章，代码高亮必须漂亮。
&lt;/li&gt;
&lt;li&gt;一定要有 fancybox。
&lt;/li&gt;
&lt;li&gt;没有分页等乱七八糟的明显 bug。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;迁移后的优点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;generate 速度大幅提高。
&lt;/li&gt;
&lt;li&gt;Hexo 更新快，插件多，没有很明显的 bug。
&lt;/li&gt;
&lt;li&gt;完美兼容我的写作习惯。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;迁移过程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;安装配置 Hexo。
&lt;/li&gt;
&lt;li&gt;迁移 &lt;code&gt;source/_posts&lt;/code&gt; 里的博客源文件。
&lt;/li&gt;
&lt;li&gt;重新配置 org-octopress。
&lt;/li&gt;
&lt;li&gt;选择一个兼容 Octopress 文章的主题。
&lt;/li&gt;
&lt;li&gt;调整 Hexo 和主题的配置。
&lt;/li&gt;
&lt;li&gt;博客代码管理。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://runforever.github.io/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建私有 Docker Registry</title>
    <link href="http://runforever.github.io/2016-07-06/2016-07-06-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89docker-registry/"/>
    <id>http://runforever.github.io/2016-07-06/2016-07-06-如何搭建私有docker-registry/</id>
    <published>2016-07-05T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>
为了团队的其他同学可以方便的更新开发环境到本地，我们决定搭建私有的 Docker Registry。<br>
不使用公共服务的原因：
</p>
<ol class="org-ol">
<li>Docker Hub 在国外，同步超级慢。
</li>
<li>DaoCloud 的私有 image 需要收费，对于我们小团队来说不太友好。
</li>
</ol>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">搭建步骤</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>环境准备。
</li>
<li>配置 LetsEncrypt 证书。
</li>
<li>安装 Docker Registry。
</li>
<li>配置 Nginx。
</li>
<li>后续工作。
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">环境准备</h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>Linux 服务器一台。
</li>
<li>域名。
</li>
<li>已经安装上 Docker 和 Nginx。
</li>
</ol>

<p>
注意：开发环境和服务器的 Docker 都先升级到最新的版本，否则有可能出现未知的失败。 <br>
</p>

<p>
目录结构 <br>
<img src="http://i4.piimg.com/567571/dfa3f652e14eda27.png" alt="dfa3f652e14eda27.png">
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">配置 LetsEncrypt 证书</h3>
<div class="outline-text-3" id="text-1-2">
<p>
由于私有 Docker Registry 的安全机制，需要使用 Https，<a href="https://docs.docker.com/registry/deploying/#/running-a-domain-registry" target="_blank" rel="external">原因</a>
</p>

<p>
配置 LetsEncrypt 证书
使用 <a href="https://certbot.eff.org/#ubuntutrusty-nginx" target="_blank" rel="external">certbot</a>
</p>
<div class="org-src-container">

<pre class="src src-bash">wget https://dl.eff.org/certbot-auto
chmod a+x certbot-auto
$ ./certbot-auto

./path/to/certbot-auto certonly --standalone -d registry.yourdomain.com
</pre>
</div>

<p>
<b>安装的时候必须先关闭 Nginx 服务否则无法生成证书</b> <br>
<b>LetsEncrypt 只支持二级域名，而且有域名个数限制，提前想好私有 Docker Registry 的二级域名</b>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">安装 Docker Registry</h3>
<div class="outline-text-3" id="text-1-3">
<p>
使用 daocloud 上的 docker registry 公共镜像
</p>
<div class="org-src-container">

<pre class="src src-bash">docker pull daocloud.io/library/registry:2
</pre>
</div>

<p>
将 LetsEncrypt 证书复制到 /certs
</p>
<div class="org-src-container">

<pre class="src src-bash">cp /etc/letsencrypt/live/yourdomain/fullchain.pem certs/
cp /etc/letsencrypt/live/youdomain/privkey.pem certs/
</pre>
</div>

<p>
生成认证文件
</p>
<div class="org-src-container">

<pre class="src src-bash">docker run --entrypoint htpasswd daocloud.io/library/registry:2.4.1 -Bbn username password &gt; auth/htpasswd
</pre>
</div>

<p>
配置 docker-compose.yml
</p>
<div class="org-src-container">

<pre class="src src-bash"># docker-compose.yml
registry:
  restart: always
  image: daocloud.io/library/registry:2
  ports:
    - 5000:5000
  environment:
    # Example use Lensencrypt cert
    REGISTRY_HTTP_TLS_CERTIFICATE: /certs/fullchain.pem
    REGISTRY_HTTP_TLS_KEY: /certs/privkey.pem
    REGISTRY_AUTH: htpasswd
    REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
    REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
  volumes:
    # Replace those three path
    - /path/registry:/var/lib/registry
    - /path/certs:/certs
    - /path/auth:/auth
</pre>
</div>

<p>
运行
</p>
<div class="org-src-container">

<pre class="src src-bash">docker-compose up
</pre>
</div>

<p>
测试浏览器访问
</p>
<div class="org-src-container">

<pre class="src src-bash">https://yourdomain.xxx:5000/v2
</pre>
</div>

<p>
测试push
</p>
<div class="org-src-container">

<pre class="src src-bash">docker login yourdomain.xxx:5000
# 输入之前配置好的用户名密码

docker pull redis
docker tag redis yourdomain.xxx:5000/redis
docker push yourdomain.xxx:5000/redis
</pre>
</div>

<p>
成功的效果 <br>
<img src="http://i1.piimg.com/567571/5860b16d5aa8d17a.jpg" alt="5860b16d5aa8d17a.jpg">
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">配置 Nginx 做反向代理</h3>
<div class="outline-text-3" id="text-1-4">
<p>
配置文件 docker_nginx.conf
</p>
<div class="org-src-container">

<pre class="src src-bash"># this is necessary for us to be able to disable request buffering in all cases
proxy_http_version 1.1;

server {
    listen 443 ssl;
    server_name registry.youdomain.com;

    # SSL
    # Replace with your cert
    ssl_certificate /path/certs/fullchain.pem;
    ssl_certificate_key /path/certs/privkey.pem;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
    chunked_transfer_encoding on;

    location /v1/ {
      return 404;
    }

    location /v2/ {
      proxy_pass https://127.0.0.1:5000;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_buffering off;

    }
}

server {
    listen 80;
    # Replace with your domain
    server_name yourdomain;
    rewrite ^/(.*) https://$server_name/$1 permanent;
}
</pre>
</div>

<p>
重新加载 Nginx 配置
</p>
<div class="org-src-container">

<pre class="src src-bash"># 软链接
ln -s /path/docker_nginx.conf /etc/nginx/site-enabled

# 测试
nginx -t

# 重新加载
nginx -s reload
</pre>
</div>

<p>
浏览器测试
</p>
<div class="org-src-container">

<pre class="src src-bash">https://yourdomain.xxx/v2

# 需要输入之前配置好的用户名和密码
</pre>
</div>

<p>
push 测试
</p>
<div class="org-src-container">

<pre class="src src-bash">docker login yourdomain.xxx
# 输入之前配置好的用户名密码
docker pull redis
docker tag redis yourdomain.xxx/redis
docker push yourdomain.xxx/redis
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">后续工作</h3>
<div class="outline-text-3" id="text-1-5">
<p>
由于 LetsEncrypt 证书 3 个月会自动过期，需要使用脚本做自动更新，配合 crontab 两个月更新一次
</p>

<p>
renew_cert.sh
</p>
<div class="org-src-container">

<pre class="src src-bash">#!/bin/bash

# renew cert
/letsencrypt/certbot-auto renew --pre-hook "service nginx stop" --post-hook "service nginx start"

# backup cert
cp /yourpath/docker-registry/certs/fullchain.pem /yourpath/docker-registry/certs/fullchain.pem.bak
cp /yourpath/docker-registry/certs/privkey.pem /yourpath/docker-registry/certs/privkey.pem.bak

# change cert
cp /etc/letsencrypt/live/yourdomain/fullchain.pem /yourpath/docker-registry/certs/fullchain.pem
cp /etc/letsencrypt/live/yourdomain/privkey.pem /yourpath/docker-registry/certs/privkey.pem
</pre>
</div>

<p>
运行
</p>
<div class="org-src-container">

<pre class="src src-bash">sh renew_cert.sh
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">参考</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://www.jianshu.com/p/141855241f2d" target="_blank" rel="external">http://www.jianshu.com/p/141855241f2d</a>
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">感谢</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://www.daocloud.io" target="_blank" rel="external">https://www.daocloud.io</a> 提供国内的公共镜像服务
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
为了团队的其他同学可以方便的更新开发环境到本地，我们决定搭建私有的 Docker Registry。&lt;br  /&gt;
不使用公共服务的原因：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Docker Hub 在国外，同步超级慢。
&lt;/li&gt;
&lt;li&gt;DaoCloud 的私有 image 需要收费，对于我们小团队来说不太友好。
&lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;搭建步骤&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;环境准备。
&lt;/li&gt;
&lt;li&gt;配置 LetsEncrypt 证书。
&lt;/li&gt;
&lt;li&gt;安装 Docker Registry。
&lt;/li&gt;
&lt;li&gt;配置 Nginx。
&lt;/li&gt;
&lt;li&gt;后续工作。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://runforever.github.io/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Django项目如何使用Docker搭建环境</title>
    <link href="http://runforever.github.io/2016-06-28/2016-06-28-django%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8docker%E5%81%9A%E7%8E%AF%E5%A2%83%E7%BB%9F%E4%B8%80/"/>
    <id>http://runforever.github.io/2016-06-28/2016-06-28-django项目使用docker做环境统一/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:28.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">背景</h2>
<div class="outline-text-2" id="text-1">
<p>
公司的项目前后端是分离的，前端使用React作为技术栈，后端使用Django做完web开发框架，
前端的同学调试代码的时候需要启动后端的项目，后端的项目往往需要一堆环境依赖，例如数据库，
Redis缓存，Python的库，每次搭建环境更新环境对于前端的同学来说都是一场噩梦，比如安装数据库，
编译Python的库等等都会遇到很多问题，为了提高效率，更好的统一开发环境，所以使用了Docker来做
这件事。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">达到的效果</h2>
<div class="outline-text-2" id="text-2">

<div class="figure">
<p><img src="http://i1.piimg.com/567571/b91020a400c2106d.png" alt="b91020a400c2106d.png">
</p>
</div>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">流程</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>安装Docker环境
</li>
<li>编写开发环境需要的Dockerfile
</li>
<li>编写docker-compose.yml定义好启动环境需要的依赖
</li>
<li>启动环境
</li>
<li>搭建私有的Docker Registry
</li>
<li>将自定义的docker image push到私有的registry
</li>
<li>常用操作
</li>
</ol>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">安装Docker环境</h3>
<div class="outline-text-3" id="text-3-1">
<p>
这个不多说，大家参照官网安装就行
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">自定义开发环境所需要的Dockerfile</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-bash"># 使用国内的源加快速度
FROM daocloud.io/library/python:2.7.11
ENV PYTHONUNBUFFERED 1
RUN sed -i 's/http:\/\/httpredir\.debian\.org\/debian\//http:\/\/mirrors\.163\.com\/debian\//g' /etc/apt/sources.list
RUN apt-get update &amp;&amp; apt-get install -y gcc g++ python-software-properties libpq-dev git libmysqlclient-dev build-essential
RUN mkdir /code
WORKDIR /code
ADD . /code/
# 使用豆瓣源加快速度
RUN pip install -r requirements/dev.txt -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">编写docker-compose.yml</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">

<pre class="src src-bash"># mysql
# username admin password root
mysql:
  image: daocloud.io/library/mysql:5.5.44
  environment:
    - MYSQL_ROOT_PASSWORD=root
    - MYSQL_DATABASE=owl
    - MYSQL_ALLOW_EMPTY_PASSWORD=yes
  volumes:
    - ./conf:/etc/mysql/conf.d

# redis
# password root
redis:
  image: redis:latest
  command: redis-server --requirepass root

# mongo
mongo:
  image: daocloud.io/library/mongo:3.2.7

# web
web:
  image: burnish/owl:latest
  command: python manage.py runserver 0.0.0.0:8888
  volumes:
    - .:/code
  ports:
    - "8888:8888"
  environment:
    - PYTHONPATH=/code
  links:
    - mysql:mysql
    - redis:redis
    - mongo:mongo
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">启动环境</h3>
<div class="outline-text-3" id="text-3-4">
<div class="org-src-container">

<pre class="src src-bash">docker-compose up
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5">搭建私有的Docker Registry</h3>
<div class="outline-text-3" id="text-3-5">
<p>
这个过程内容较长，不在这篇文章描述，后续会专门写一篇关于如何搭建环境的教程,
搭建好的私有docker registry域名是burnsh
</p>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6">将build完成的docker image push到私有registry</h3>
<div class="outline-text-3" id="text-3-6">
<div class="org-src-container">

<pre class="src src-bash"># 登陆
docker login burnish

# 打tag
docker tag image burnish/owl:latest

# push
docker push burnish/owl:latest
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7">常用操作和场景</h3>
<div class="outline-text-3" id="text-3-7">
</div><div id="outline-container-sec-3-7-1" class="outline-4">
<h4 id="sec-3-7-1">1. 初始化项目和app</h4>
<div class="outline-text-4" id="text-3-7-1">
<div class="org-src-container">

<pre class="src src-bash"># 进入docker
docker-compose web run --rm /bin/bash
django-admin.py startapp app_xxx

# 命令解释
# 进入contanier中，新建app
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7-2" class="outline-4">
<h4 id="sec-3-7-2">2. 数据库生成migration和migrate</h4>
<div class="outline-text-4" id="text-3-7-2">
<div class="org-src-container">

<pre class="src src-bash">docker-compose web run --rm python manage.py makemigrations
docker-compose web run --rm python manage.py migrate
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7-3" class="outline-4">
<h4 id="sec-3-7-3">3. 安装新的python 包</h4>
<div class="outline-text-4" id="text-3-7-3">
<p>
安装
</p>
<div class="org-src-container">

<pre class="src src-bash">docker-compose web run pip install xxxx
docker commit container_id -a "runforever" -c "add new xxxx python lib" burnish/owl:latest
docker push burnish/owl:latest
</pre>
</div>

<p>
更新
</p>
<div class="org-src-container">

<pre class="src src-bash">docker pull burnish/owl:latest
docker-compose up
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7-4" class="outline-4">
<h4 id="sec-3-7-4">4. pdb调试</h4>
<div class="outline-text-4" id="text-3-7-4">
<div class="org-src-container">

<pre class="src src-bash">docker-compose run --service-ports --rm web
</pre>
</div>
</div>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;背景&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
公司的项目前后端是分离的，前端使用React作为技术栈，后端使用Django做完web开发框架，
前端的同学调试代码的时候需要启动后端的项目，后端的项目往往需要一堆环境依赖，例如数据库，
Redis缓存，Python的库，每次搭建环境更新环境对于前端的同学来说都是一场噩梦，比如安装数据库，
编译Python的库等等都会遇到很多问题，为了提高效率，更好的统一开发环境，所以使用了Docker来做
这件事。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;达到的效果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/b91020a400c2106d.png&quot; alt=&quot;b91020a400c2106d.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://runforever.github.io/categories/Docker/"/>
    
      <category term="Django" scheme="http://runforever.github.io/categories/Docker/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Ansible 使用入门</title>
    <link href="http://runforever.github.io/2016-02-03/2016-02-03-ansible%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://runforever.github.io/2016-02-03/2016-02-03-ansible使用入门/</id>
    <published>2016-02-02T16:00:00.000Z</published>
    <updated>2016-11-01T07:45:39.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">背景</h2>
<div class="outline-text-2" id="text-1">
<p>
由于经常有部署新服务器的需求，服务器部署过程中的配置和基础环境的安装很多都是重复性的
工作，所以使用配置管理工具将这些重复性的工作控制起来最合适不过了，之前有写过一篇用<a href="https://docs.saltstack.com/en/latest/" target="_blank" rel="external"> SaltStack</a>
做自动化运维的文章<a href="http://runforever.github.io/2014-06-21/2014-06-21-salt%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"> saltstack 使用笔记</a>，这次换用 <a href="http://docs.ansible.com" target="_blank" rel="external">Ansible</a> ，顺便比较一下两种工具。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">选用 Ansible 的原因</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>轻量级
</li>
<li>通过 SSH 下发命令
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">如何开始</h2>
<div class="outline-text-2" id="text-3">
<p>
目录结构
</p>
<div class="org-src-container">

<pre class="src src-bash">.
--hosts    # 服务器地址和组，以下的是配置
├── config
│   ├── kernel
│   ├── tmux
│   └── vim
├── deploy
│   └── project1
│   └── project2
├── docker
│   └── fig_config
│       ├── common
│       ├── mongo
│       ├── mysql
│       ├── nginx
│       ├── rabbitmq
│       └── redis
├── env
├── iptables
├── nginx
└── ssh
</pre>
</div>

<p>
首先配置好 hosts 文件, 格式:
</p>
<div class="org-src-container">

<pre class="src src-ini">; ansible hosts file user .ini format
; group
; [test]
; ip address

; service ip address
; 127.0.0.1
</pre>
</div>

<p>
将上面的注释去掉，IP 地址改成服务器地址，并且在服务器上加上本地的 ssh 公钥，执行下面命令:
</p>
<div class="org-src-container">

<pre class="src src-bash"># 导入环境变量
export ANSIBLE_HOSTS=/hosts_file_direcory/hosts

# 测试服务器连通
ansible all -m ping
# 如果没有问题服务器应该会返回 pong
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">配置文件格式</h2>
<div class="outline-text-2" id="text-4">
<p>
连接服务器没有问题的话，就可以使用写 playbook（配置管理文件）来管理服务器了。
</p>

<p>
Ansible 的配置文件使用的 YAML 格式，例子如下：
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">-------- </span><span style="color: #ffff00;">basic env</span><span style="color: #ff0000;">: init-env.yml -------------</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">install basic env tool task</span>
- <span style="color: #ffff00;">name</span>: install pkg
  <span style="color: #ffff00;">apt</span>: pkg= state=present update_cache=yes
  <span style="color: #ffff00;">with_items</span>:
    - gcc
    - g++
    - curl
    - tmux
    - python-dev
    - python-setuptools
    - python-pip
    - htop
    - zsh
    - software-properties-common
    - python-software-properties
    - libpq-dev
    - build-essential
    - libmysqlclient-dev
    - libevent-dev
    - git
    - wget
    - mc

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">install python lib task</span>
- <span style="color: #ffff00;">name</span>: install python pkg
  <span style="color: #ffff00;">pip</span>: name=
  <span style="color: #ffff00;">with_items</span>:
    - fabric
    - virtualenvwrapper
    - ipython
    - ipdb
    - supervisor
    - fig

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">add user task</span>
- <span style="color: #ffff00;">name</span>: add deploy user
  <span style="color: #ffff00;">user</span>: name=deploy shell=/bin/zsh append=yes

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">----- </span><span style="color: #ffff00;">web basic env</span><span style="color: #ff0000;">: web_env.yml -------</span>
<span style="color: #ff0000;">---</span>
- <span style="color: #ffff00;">hosts</span>: your_web_hosts
  <span style="color: #ffff00;">remote_user</span>: root

  <span style="color: #ffff00;">tasks</span>:
    - <span style="color: #ffff00;">include</span>: init-env.yml
    - <span style="color: #ffff00;">name</span>: init web dir
      <span style="color: #ffff00;">file</span>: path=/data owner=root group=root state=directory mode=0755
</pre>
</div>

<p>
运行
</p>
<div class="org-src-container">

<pre class="src src-bash"># 对服务器执行初始化命令
ansible-playbook init_env.yml
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">常用命令</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-bash"># 对所用服务器 web_hosts 执行初始化命令
ansible-playbook web_env.yml

# 指定服务器
ansible-playbook web_env.yml --limit web_hosts

# 调试（Dry Run）
ansible-playbook web_env.yml --check
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">整理出来的开源库参考</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://github.com/runforever/Auto" target="_blank" rel="external">Auto</a>
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">总结</h2>
<div class="outline-text-2" id="text-7">
<p>
Ansible 对于我来说最大的有点就是使用 ssh 来执行命令，而 SaltStack 则需要在机器上安装客户端
其次 Ansible 由于设计的时候就考虑了监控和图形化，可视化做的不错，如果大家在考虑选择 Ansible
还是 SaltStack，个人推荐使用 Ansible
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;背景&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
由于经常有部署新服务器的需求，服务器部署过程中的配置和基础环境的安装很多都是重复性的
工作，所以使用配置管理工具将这些重复性的工作控制起来最合适不过了，之前有写过一篇用&lt;a href=&quot;https://docs.saltstack.com/en/latest/&quot;&gt; SaltStack&lt;/a&gt;
做自动化运维的文章&lt;a href=&quot;http://runforever.github.io/2014-06-21/2014-06-21-salt%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/&quot;&gt; saltstack 使用笔记&lt;/a&gt;，这次换用 &lt;a href=&quot;http://docs.ansible.com&quot;&gt;Ansible&lt;/a&gt; ，顺便比较一下两种工具。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;选用 Ansible 的原因&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;轻量级
&lt;/li&gt;
&lt;li&gt;通过 SSH 下发命令
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="http://runforever.github.io/categories/Ansible/"/>
    
    
  </entry>
  
  <entry>
    <title>uwsgi部署Django服务的坑</title>
    <link href="http://runforever.github.io/2016-01-31/2016-01-31-django-uwsgi%E9%83%A8%E7%BD%B2/"/>
    <id>http://runforever.github.io/2016-01-31/2016-01-31-django-uwsgi部署/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">uwsgi部署Django服务</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">部署Django的方式</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>gunicorn + Nginx
</li>
<li>uwsgi + Nginx
</li>
</ul>
</div>

<div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1">gunicorn + Nginx</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
<a href="http://gunicorn.org" target="_blank" rel="external">http://gunicorn.org</a> 最大的好处就是部署简单，如果没有特殊要求，推荐使用这种方式部署Python Web程序
</p>
</div>
</div>

<div id="outline-container-sec-1-1-2" class="outline-4">
<h4 id="sec-1-1-2">uwsgi + Nginx</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
uwsgi 相对 gunicorn来说配置选项相对复杂，但是uwsgi是支持websocket的，出于这个原因选择uwsgi来部署django程序
</p>
</div>

<ul class="org-ul"><li>问题1：uwsgi的默认监听进程的数量100<br><div class="outline-text-5" id="text-1-1-2-1">
<p>
解决： 之前由于只知道启动uwsgi worker的数量，不管怎么调worker的数量，并发都很低，<br>
配置listen参数解决，根据服务器配置和访问来决定，目前我开的是20000
</p>
</div>
</li>

<li>问题2：supervisor没有办法优雅的重启uwsgi worker，导致服务器资源被重启的uwsgi进程占满<br><div class="outline-text-5" id="text-1-1-2-2">
<p>
解决：配置no-orphans参数
</p>
</div>
</li>

<li>配置范例<br><div class="outline-text-5" id="text-1-1-2-3">
<div class="org-src-container">

<pre class="src src-ini">master = true
processes = 8
thread = 100
thread-stacksize = 512
stats = 127.0.0.1:9194
buffer-size = 65535
enable-threads = true
http-timeout = 60
socket-timeout = 60
chmod-socket = 666
harakiri = 60
max-requests = 20000
listen = 20000
no-orphans
</pre>
</div>

<p>
<a id="more"></a>
</p>
</div>
</li></ul>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;uwsgi部署Django服务&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;部署Django的方式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;gunicorn + Nginx
&lt;/li&gt;
&lt;li&gt;uwsgi + Nginx
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;gunicorn + Nginx&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://gunicorn.org&quot;&gt;http://gunicorn.org&lt;/a&gt; 最大的好处就是部署简单，如果没有特殊要求，推荐使用这种方式部署Python Web程序
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;uwsgi + Nginx&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
uwsgi 相对 gunicorn来说配置选项相对复杂，但是uwsgi是支持websocket的，出于这个原因选择uwsgi来部署django程序
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;问题1：uwsgi的默认监听进程的数量100&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-2-1&quot;&gt;
&lt;p&gt;
解决： 之前由于只知道启动uwsgi worker的数量，不管怎么调worker的数量，并发都很低，&lt;br  /&gt;
配置listen参数解决，根据服务器配置和访问来决定，目前我开的是20000
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;问题2：supervisor没有办法优雅的重启uwsgi worker，导致服务器资源被重启的uwsgi进程占满&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-2-2&quot;&gt;
&lt;p&gt;
解决：配置no-orphans参数
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;配置范例&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-2-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-ini&quot;&gt;master = true
processes = 8
thread = 100
thread-stacksize = 512
stats = 127.0.0.1:9194
buffer-size = 65535
enable-threads = true
http-timeout = 60
socket-timeout = 60
chmod-socket = 666
harakiri = 60
max-requests = 20000
listen = 20000
no-orphans
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="uwsgi" scheme="http://runforever.github.io/categories/uwsgi/"/>
    
      <category term="django" scheme="http://runforever.github.io/categories/uwsgi/django/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular.js入门参考</title>
    <link href="http://runforever.github.io/2014-12-20/2014-12-20-angular.js%E5%85%A5%E9%97%A8%E5%8F%82%E8%80%83/"/>
    <id>http://runforever.github.io/2014-12-20/2014-12-20-angular.js入门参考/</id>
    <published>2014-12-19T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:30.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Angular.js 入门参考</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来源</h3>
<div class="outline-text-3" id="text-1-1">
<p>
很早听说这个前端MV*框架，最近公司的一个新项目未来可能需要支持手机App，所以决定<br>
使用API驱动的设计，也就是网站后端只提供API，逻辑处理由前端实现，也就是Angular这些<br>
前端框架要做的事情了，以后如果上手机App的话也可以使用同一套API，不用单独为手机App<br>
开发新的API。
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">前端MV*是什么？</h3>
<div class="outline-text-3" id="text-1-2">
<p>
MV* 可以是MVC(Model, View, Controller)模式，也可以是MVVM(Model, View, ViewModel)<br>
你可以把Angular用成你想要的模式，而MVVM正是我项目里面想要的东西，Model和UI的双向绑定<br>
也就是Model变化UI相应的改变，UI改变Model也跟着改变。
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">Angular的使用场景和优缺点</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">使用场景</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
Single Page Application(单页面应用)，即MVVM模式发挥优势的地方。
</p>
</div>
</div>

<div id="outline-container-sec-1-3-2" class="outline-4">
<h4 id="sec-1-3-2">优点</h4>
<div class="outline-text-4" id="text-1-3-2">
<ul class="org-ul">
<li>使Javascript开发变得模块化。
</li>
<li>保证开发人员的代码风格统一。
</li>
<li>资源相对较多，上手相对简单。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-3-3" class="outline-4">
<h4 id="sec-1-3-3">缺点</h4>
<div class="outline-text-4" id="text-1-3-3">
<ul class="org-ul">
<li>调试很困难
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">Angular 基本概念</h3>
<div class="outline-text-3" id="text-1-4">
<ol class="org-ol">
<li>Directive(指令)
</li>
<li>Scope(变量空间)
</li>
<li>Service(服务)
</li>
<li>Controller(控制器)
</li>
<li>Module(模块)
</li>
</ol>
</div>

<div id="outline-container-sec-1-4-1" class="outline-4">
<h4 id="sec-1-4-1">Directive</h4>
<div class="outline-text-4" id="text-1-4-1">
<p>
Angular指令，如ng-app, ng-controller, ng-model, ng-repeat等等。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-2" class="outline-4">
<h4 id="sec-1-4-2">Scope</h4>
<div class="outline-text-4" id="text-1-4-2">
<p>
Controller可以访问的变量空间。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-3" class="outline-4">
<h4 id="sec-1-4-3">Service</h4>
<div class="outline-text-4" id="text-1-4-3">
<p>
服务，如Http，window，element等服务，可以自定义公用的服务，达到模块化管理的目的。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-4" class="outline-4">
<h4 id="sec-1-4-4">Controller</h4>
<div class="outline-text-4" id="text-1-4-4">
<p>
View的控制模块。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-5" class="outline-4">
<h4 id="sec-1-4-5">Module</h4>
<div class="outline-text-4" id="text-1-4-5">
<p>
模块，要使用Angular必须先初始化模块
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">实例</h3>
<div class="outline-text-3" id="text-1-5">
<p>
index.html
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #00ffff; font-weight: bold;">!doctype</span> html&gt;
&lt;<span style="color: #0000ff; font-weight: bold;">html</span> <span style="color: #ffff00;">lang</span>=<span style="color: #00ff00;">"en"</span>&gt;
    &lt;<span style="color: #0000ff; font-weight: bold;">head</span>&gt;
        &lt;<span style="color: #0000ff; font-weight: bold;">meta</span> <span style="color: #ffff00;">charset</span>=<span style="color: #00ff00;">"UTF-8"</span>/&gt;
        &lt;<span style="color: #0000ff; font-weight: bold;">title</span>&gt;<span style="font-weight: bold; text-decoration: underline;">Document</span>&lt;/<span style="color: #0000ff; font-weight: bold;">title</span>&gt;
    &lt;/<span style="color: #0000ff; font-weight: bold;">head</span>&gt;
    <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">&#20351;&#29992;directive&#21021;&#22987;&#21270;app </span><span style="color: #ff0000;">--&gt;</span>
    &lt;<span style="color: #0000ff; font-weight: bold;">body</span> <span style="color: #ffff00;">ng-app</span>=<span style="color: #00ff00;">"app"</span>&gt;
        <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">&#28155;&#21152;controller </span><span style="color: #ff0000;">--&gt;</span>
        &lt;<span style="color: #0000ff; font-weight: bold;">div</span> <span style="color: #ffff00;">ng-controller</span>=<span style="color: #00ff00;">"loginCtrl"</span>&gt;
             <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">&#20351;&#29992;ng-model&#32465;&#23450;username&#21644;input, &#20004;&#32773;&#21482;&#35201;&#26377;&#19968;&#20010;&#25913;&#21464;&#37117;&#20250;&#36827;&#34892;&#30456;&#24212;&#30340;&#25913;&#21464; </span><span style="color: #ff0000;">--&gt;</span>
             &lt;<span style="color: #0000ff; font-weight: bold;">input</span> <span style="color: #ffff00;">ng-model</span>=<span style="color: #00ff00;">"username"</span> <span style="color: #ffff00;">name</span>=<span style="color: #00ff00;">"username"</span> <span style="color: #ffff00;">type</span>=<span style="color: #00ff00;">"text"</span>/&gt;
             &lt;<span style="color: #0000ff; font-weight: bold;">input</span> <span style="color: #ffff00;">ng-model</span>=<span style="color: #00ff00;">"password"</span> <span style="color: #ffff00;">name</span>=<span style="color: #00ff00;">"username"</span> <span style="color: #ffff00;">type</span>=<span style="color: #00ff00;">"password"</span>/&gt;
             <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">controller&#37324;&#38754;&#28155;&#21152;&#30456;&#24212;&#30340;&#20989;&#25968; </span><span style="color: #ff0000;">--&gt;</span>
             &lt;<span style="color: #0000ff; font-weight: bold;">a</span> href <span style="color: #ffff00;">ng-click</span>=<span style="color: #00ff00;">"login()"</span>&gt;&#30331;&#24405;&lt;/<span style="color: #0000ff; font-weight: bold;">a</span>&gt;
        &lt;/<span style="color: #0000ff; font-weight: bold;">div</span>&gt;
    &lt;/<span style="color: #0000ff; font-weight: bold;">body</span>&gt;
    &lt;<span style="color: #0000ff; font-weight: bold;">script</span> <span style="color: #ffff00;">src</span>=<span style="color: #00ff00;">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.7/angular.min.js"</span>&gt;&lt;/<span style="color: #0000ff; font-weight: bold;">script</span>&gt;
&lt;/<span style="color: #0000ff; font-weight: bold;">html</span>&gt;
</pre>
</div>

<p>
app.js
</p>
<div class="org-src-container">

<pre class="src src-javascript">(<span style="color: #00ffff; font-weight: bold;">function</span>() {
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#21021;&#22987;&#21270;App</span>
    <span style="color: #00ffff; font-weight: bold;">var</span> <span style="color: #ffff00;">app</span> = angular.module(<span style="color: #00ff00;">'app'</span>, []);

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#28155;&#21152;Controller</span>
    app.controller(
        <span style="color: #00ff00;">'loginCtrl'</span>,
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20381;&#36182;&#27880;&#20837;&#20351;&#29992;&#26381;&#21153; $scope &#21644; $http</span>
        [<span style="color: #00ff00;">'$scope'</span>, <span style="color: #00ff00;">'$http'</span>, <span style="color: #00ffff; font-weight: bold;">function</span>(<span style="color: #ffff00;">$scope</span>, <span style="color: #ffff00;">$http</span>) {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#28155;&#21152;&#30331;&#24405;&#22788;&#29702;&#20989;&#25968;</span>
            $scope.login = <span style="color: #00ffff; font-weight: bold;">function</span>() {
                $http.post(<span style="color: #00ff00;">'/login/'</span>, {username: $scope.username, password: $scope.password}).success(<span style="color: #00ffff; font-weight: bold;">function</span>(<span style="color: #ffff00;">data</span>) {
                    alert(data.msg);
                });
            }
        }]
    );
})();
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">总结</h3>
<div class="outline-text-3" id="text-1-6">
<p>
本篇提供angular的入门，后续会有一些使用心得，总体来说angular上手还是很简单的。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Angular.js 入门参考&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来源&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
很早听说这个前端MV*框架，最近公司的一个新项目未来可能需要支持手机App，所以决定&lt;br  /&gt;
使用API驱动的设计，也就是网站后端只提供API，逻辑处理由前端实现，也就是Angular这些&lt;br  /&gt;
前端框架要做的事情了，以后如果上手机App的话也可以使用同一套API，不用单独为手机App&lt;br  /&gt;
开发新的API。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;前端MV*是什么？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
MV* 可以是MVC(Model, View, Controller)模式，也可以是MVVM(Model, View, ViewModel)&lt;br  /&gt;
你可以把Angular用成你想要的模式，而MVVM正是我项目里面想要的东西，Model和UI的双向绑定&lt;br  /&gt;
也就是Model变化UI相应的改变，UI改变Model也跟着改变。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Angular的使用场景和优缺点&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;使用场景&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
Single Page Application(单页面应用)，即MVVM模式发挥优势的地方。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;优点&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;使Javascript开发变得模块化。
&lt;/li&gt;
&lt;li&gt;保证开发人员的代码风格统一。
&lt;/li&gt;
&lt;li&gt;资源相对较多，上手相对简单。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;缺点&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;调试很困难
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;Angular 基本概念&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Directive(指令)
&lt;/li&gt;
&lt;li&gt;Scope(变量空间)
&lt;/li&gt;
&lt;li&gt;Service(服务)
&lt;/li&gt;
&lt;li&gt;Controller(控制器)
&lt;/li&gt;
&lt;li&gt;Module(模块)
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;Directive&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;p&gt;
Angular指令，如ng-app, ng-controller, ng-model, ng-repeat等等。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;Scope&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;p&gt;
Controller可以访问的变量空间。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-3&quot;&gt;Service&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-3&quot;&gt;
&lt;p&gt;
服务，如Http，window，element等服务，可以自定义公用的服务，达到模块化管理的目的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-4&quot;&gt;Controller&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-4&quot;&gt;
&lt;p&gt;
View的控制模块。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-5&quot;&gt;Module&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-5&quot;&gt;
&lt;p&gt;
模块，要使用Angular必须先初始化模块
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;实例&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
index.html
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;!doctype&lt;/span&gt; html&amp;gt;
&amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;html&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;lang&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;head&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;meta&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;charset&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;/&amp;gt;
        &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;Document&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;title&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;head&lt;/span&gt;&amp;gt;
    &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20351;&amp;#29992;directive&amp;#21021;&amp;#22987;&amp;#21270;app &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;body&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-app&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;
        &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#28155;&amp;#21152;controller &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
        &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-controller&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;loginCtrl&quot;&lt;/span&gt;&amp;gt;
             &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20351;&amp;#29992;ng-model&amp;#32465;&amp;#23450;username&amp;#21644;input, &amp;#20004;&amp;#32773;&amp;#21482;&amp;#35201;&amp;#26377;&amp;#19968;&amp;#20010;&amp;#25913;&amp;#21464;&amp;#37117;&amp;#20250;&amp;#36827;&amp;#34892;&amp;#30456;&amp;#24212;&amp;#30340;&amp;#25913;&amp;#21464; &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
             &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;input&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-model&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;text&quot;&lt;/span&gt;/&amp;gt;
             &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;input&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-model&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;password&quot;&lt;/span&gt;/&amp;gt;
             &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;controller&amp;#37324;&amp;#38754;&amp;#28155;&amp;#21152;&amp;#30456;&amp;#24212;&amp;#30340;&amp;#20989;&amp;#25968; &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
             &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;a&lt;/span&gt; href &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-click&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;login()&quot;&lt;/span&gt;&amp;gt;&amp;#30331;&amp;#24405;&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;a&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;src&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.7/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;html&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
app.js
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;(&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;() {
    &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#21021;&amp;#22987;&amp;#21270;App&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;app&lt;/span&gt; = angular.module(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;app&#39;&lt;/span&gt;, []);

    &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#28155;&amp;#21152;Controller&lt;/span&gt;
    app.controller(
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;loginCtrl&#39;&lt;/span&gt;,
        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20381;&amp;#36182;&amp;#27880;&amp;#20837;&amp;#20351;&amp;#29992;&amp;#26381;&amp;#21153; $scope &amp;#21644; $http&lt;/span&gt;
        [&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;$scope&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;$http&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #ffff00;&quot;&gt;$scope&lt;/span&gt;, &lt;span style=&quot;color: #ffff00;&quot;&gt;$http&lt;/span&gt;) {
            &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#28155;&amp;#21152;&amp;#30331;&amp;#24405;&amp;#22788;&amp;#29702;&amp;#20989;&amp;#25968;&lt;/span&gt;
            $scope.login = &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;() {
                $http.post(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;/login/&#39;&lt;/span&gt;, {username: $scope.username, password: $scope.password}).success(&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #ffff00;&quot;&gt;data&lt;/span&gt;) {
                    alert(data.msg);
                });
            }
        }]
    );
})();
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;p&gt;
本篇提供angular的入门，后续会有一些使用心得，总体来说angular上手还是很简单的。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://runforever.github.io/categories/Angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Python使用支付宝接口</title>
    <link href="http://runforever.github.io/2014-10-02/2014-10-02-%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://runforever.github.io/2014-10-02/2014-10-02-支付宝接口使用/</id>
    <published>2014-10-01T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:31.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Python使用支付宝接口</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来源</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<i>www.pinbot.me</i>需要支持线上支付，先从支持支付宝开始。
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">使用支付宝什么接口</h3>
<div class="outline-text-3" id="text-1-2">
<p>
支付宝接口有很多，而线上支付使用的是即时到账接口，这里有<a href="https:b.alipay.com/order/productDetail.htm?productId=2012111200373124&tabId=1#ps-tabinfo-hash" target="_blank" rel="external">官方介绍</a>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">如何使用该接口</h3>
<div class="outline-text-3" id="text-1-3">
<p>
实现代码参考了<a href="https:github.com/yefei/python-alipay" target="_blank" rel="external">python-alipay</a>
</p>
</div>

<div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">获取PID和32位KEY</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
只能是企业才能申请该接口的使用，实名认证通过后，你只要拿到PID和KEY <br>
就行了。
</p>
</div>
</div>

<div id="outline-container-sec-1-3-2" class="outline-4">
<h4 id="sec-1-3-2">使用该接口</h4>
<div class="outline-text-4" id="text-1-3-2">
</div><ul class="org-ul"><li>使用该接口需要实现两个工具函数:<br><div class="outline-text-5" id="text-1-3-2-1">
<ol class="org-ol">
<li>构造支付宝的支付链接，如果链接请求成功会生存支付宝的支付页面。
</li>
<li>支付成功后需要验证支付宝返回的结果是否正确，如果正确就做相应的订单更新。
</li>
</ol>
</div>
</li>

<li>实现构造支付链接<br><div class="outline-text-5" id="text-1-3-2-2">
<p>
注意事项：
</p>
<ol class="org-ol">
<li>传给支付宝的url参数需要字母顺序排序，且不能含有空格，空值。
</li>
<li>验证，使用MD5验证，构造除了sign和sign_type的url参数和key做md5。
</li>
</ol>
</div>
</li>

<li>实现验证支付宝返回数据的验证<br><div class="outline-text-5" id="text-1-3-2-3">
<p>
验证支付宝请求return_url和notify_url的数据 <br>
注意事项
</p>
<ol class="org-ol">
<li>支付宝的notify_id在一分钟后会实效。
</li>
<li>支付宝异步请求如果没有收到success的话会间隔发请求，直到获取到success，或者超过24小时。
</li>
</ol>

<p>
代码：
一个配置类AlipayConfig <br>
一个工具类AlipayUtils <br>
</p>

<p>
AlipayConfig代码：
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>


<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">AlipayConfig</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #ffff00;">ALIPAY_PID</span> = <span style="color: #00ff00;">'your apply pid'</span>
    <span style="color: #ffff00;">ALIPAY_KEY</span> = <span style="color: #00ff00;">'your apply key'</span>

    <span style="color: #ffff00;">ALIPAY_SELLER_EMAIL</span> = <span style="color: #00ff00;">'your apply email'</span>

    <span style="color: #ffff00;">ALIPAY_INPUT_CHARSET</span> = <span style="color: #00ff00;">'utf-8'</span>
    <span style="color: #ffff00;">ALIPAY_SIGN_TYPE</span> = <span style="color: #00ff00;">'MD5'</span>

    <span style="color: #ffff00;">ALIPAY_GATEWAY</span> = <span style="color: #00ff00;">'https://mapi.alipay.com/gateway.do?'</span>
    <span style="color: #ffff00;">ALIPAY_NOTIFY_GATEWAY</span> = <span style="color: #00ff00;">'https://mapi.alipay.com/gateway.do?service=notify_verify&amp;'</span>

    <span style="color: #ffff00;">ALIPAY_RETURN_URL</span> = <span style="color: #00ff00;">'your return url'</span>
</pre>
</div>

<p>
AlipayUtils代码：
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #00ffff; font-weight: bold;">import</span> urllib
<span style="color: #00ffff; font-weight: bold;">import</span> requests
<span style="color: #00ffff; font-weight: bold;">from</span> hashlib <span style="color: #00ffff; font-weight: bold;">import</span> md5
<span style="color: #00ffff; font-weight: bold;">from</span> collections <span style="color: #00ffff; font-weight: bold;">import</span> OrderedDict

<span style="color: #00ffff; font-weight: bold;">from</span> alipay_config <span style="color: #00ffff; font-weight: bold;">import</span> AlipayConfig

<span style="color: #00ffff; font-weight: bold;">from</span> Pinbot.settings <span style="color: #00ffff; font-weight: bold;">import</span> DEBUG


<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">AlipayUtils</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">_convert_str_encode</span>(cls, pay_option, encoding=<span style="color: #00ff00;">'utf-8'</span>):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">       &#23558;unicode&#32534;&#30721;&#36716;&#25442;&#25104;utf-8&#32534;&#30721;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #00ffff; font-weight: bold;">for</span> key, value <span style="color: #00ffff; font-weight: bold;">in</span> pay_option.iteritems():
            <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #00ffff; font-weight: bold;">not</span> value:
                <span style="color: #00ffff; font-weight: bold;">continue</span>
            <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #0000ff; font-weight: bold;">isinstance</span>(value, <span style="color: #0000ff; font-weight: bold;">unicode</span>):
                <span style="color: #ffff00;">pay_option</span>[key] = value.encode(encoding)
        <span style="color: #00ffff; font-weight: bold;">return</span> pay_option

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">_get_url_params</span>(cls, pay_option):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#20351;&#29992;OrderedDict&#23558;url&#21442;&#25968;&#25353;&#23383;&#27597;&#39034;&#24207;&#25490;&#24207;</span>
<span style="color: #00ff00;">        &#21435;&#38500;&#31354;&#30340;&#23383;&#27573;&#21644;sign, sign_type&#23383;&#27573;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ffff00;">url_params</span> = OrderedDict(
            <span style="color: #0000ff; font-weight: bold;">sorted</span>(
                [
                    item <span style="color: #00ffff; font-weight: bold;">for</span> item <span style="color: #00ffff; font-weight: bold;">in</span> pay_option.iteritems()
                    <span style="color: #00ffff; font-weight: bold;">if</span> item[1] <span style="color: #00ffff; font-weight: bold;">and</span> item[0] <span style="color: #00ffff; font-weight: bold;">not</span> <span style="color: #00ffff; font-weight: bold;">in</span> (<span style="color: #00ff00;">'sign'</span>, <span style="color: #00ff00;">'sign_type'</span>)
                ],
                key=<span style="color: #00ffff; font-weight: bold;">lambda</span> x: x[0]
            )
        )
        <span style="color: #00ffff; font-weight: bold;">return</span> url_params

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">_get_sign</span>(cls, url_params):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        md5&#21152;&#23494;url&#21442;&#25968;&#21644;key</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ffff00;">key</span> = AlipayConfig.ALIPAY_KEY
        <span style="color: #ffff00;">prestr</span> = <span style="color: #00ff00;">'&amp;'</span>.join(<span style="color: #00ff00;">'%s=%s'</span> % item <span style="color: #00ffff; font-weight: bold;">for</span> item <span style="color: #00ffff; font-weight: bold;">in</span> url_params.iteritems())
        <span style="color: #ffff00;">sign</span> = md5(prestr + key).hexdigest()
        <span style="color: #00ffff; font-weight: bold;">return</span> sign

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">submit_order_url</span>(cls, order):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#26500;&#36896;&#25903;&#20184;&#23453;&#21363;&#26102;&#21040;&#36134;&#38142;&#25509;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ffff00;">pay_option</span> = <span style="color: #0000ff; font-weight: bold;">dict</span>([
            (<span style="color: #00ff00;">'service'</span>, <span style="color: #00ff00;">'create_direct_pay_by_user'</span>),
            (<span style="color: #00ff00;">'payment_type'</span>, <span style="color: #00ff00;">'1'</span>),

            (<span style="color: #00ff00;">'_input_charset'</span>, AlipayConfig.ALIPAY_INPUT_CHARSET),
            (<span style="color: #00ff00;">'partner'</span>, AlipayConfig.ALIPAY_PID),
            (<span style="color: #00ff00;">'seller_email'</span>, AlipayConfig.ALIPAY_SELLER_EMAIL),
            (<span style="color: #00ff00;">'return_url'</span>, AlipayConfig.ALIPAY_RETURN_URL),
            (<span style="color: #00ff00;">'notify_url'</span>, <span style="color: #00ff00;">''</span>),
            (<span style="color: #00ff00;">'show_url'</span>, <span style="color: #00ff00;">''</span>),

            (<span style="color: #00ff00;">'out_trade_no'</span>, order.order_id),
            (<span style="color: #00ff00;">'subject'</span>, order.subject_name()),
            (<span style="color: #00ff00;">'body'</span>, order.order_detail()),
            (<span style="color: #00ff00;">'total_fee'</span>, order.total_price <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #00ffff; font-weight: bold;">not</span> DEBUG <span style="color: #00ffff; font-weight: bold;">else</span> 0.1),
        ])

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23558;&#25903;&#20184;&#21442;&#25968;&#30340;&#32534;&#30721;&#32479;&#19968;&#25104;utf-8</span>
        <span style="color: #ffff00;">pay_option</span> = cls._convert_str_encode(
            pay_option,
            encoding=AlipayConfig.ALIPAY_INPUT_CHARSET,
        )

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25490;&#24207;&#21435;&#38500;&#31354;&#20540;&#21644;sign,sign_type&#36873;&#39033;</span>
        <span style="color: #ffff00;">url_params</span> = cls._get_url_params(pay_option)

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21152;&#23494;&#21644;&#21152;&#23494;&#31867;&#22411;</span>
        <span style="color: #ffff00;">url_params</span>[<span style="color: #00ff00;">'sign'</span>] = cls._get_sign(url_params)
        <span style="color: #ffff00;">url_params</span>[<span style="color: #00ff00;">'sign_type'</span>] = AlipayConfig.ALIPAY_SIGN_TYPE

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#29983;&#25104;&#25903;&#20184;url</span>
        <span style="color: #ffff00;">submit_url</span> = AlipayConfig.ALIPAY_GATEWAY + urllib.urlencode(url_params)

        <span style="color: #00ffff; font-weight: bold;">return</span> submit_url

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">verify_alipay_notify</span>(cls, url_data):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#39564;&#35777;&#25903;&#20184;&#23453;&#25903;&#20184;&#25104;&#21151;&#30340;&#36820;&#22238;&#20449;&#24687;</span>
<span style="color: #00ff00;">        &#20004;&#20010;&#27493;&#39588;&#65306;</span>
<span style="color: #00ff00;">           1. &#39564;&#35777;&#31614;&#21517;</span>
<span style="color: #00ff00;">           2. &#26597;&#35810;&#27492;notify&#26159;&#21542;&#22312;&#25903;&#20184;&#23453;&#20013;&#26377;&#25928;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#39564;&#35777;&#31614;&#21517;</span>
        <span style="color: #ffff00;">alipay_sign</span> = url_data.get(<span style="color: #00ff00;">'sign'</span>)
        <span style="color: #ffff00;">alipay_url_params</span> = cls._get_url_params(url_data)
        <span style="color: #ffff00;">sign</span> = cls._get_sign(alipay_url_params)

        <span style="color: #00ffff; font-weight: bold;">if</span> sign != alipay_sign:
            <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #ff00ff;">False</span>

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#35810;&#20449;&#24687;&#26159;&#21542;&#22312;&#25903;&#20184;&#23453;&#20013;&#26377;&#25928;</span>
        <span style="color: #ffff00;">check_params</span> = {
            <span style="color: #00ff00;">'partner'</span>: AlipayConfig.ALIPAY_PID,
            <span style="color: #00ff00;">'notify_id'</span>: url_data.get(<span style="color: #00ff00;">'notify_id'</span>)
        }
        <span style="color: #ffff00;">result</span> = requests.get(
            AlipayConfig.ALIPAY_NOTIFY_GATEWAY,
            params=check_params
        )
        <span style="color: #00ffff; font-weight: bold;">if</span> result.text.lower().strip() == <span style="color: #00ff00;">'true'</span>:
            <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #ff00ff;">True</span>

        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #ff00ff;">False</span>
</pre>
</div>

<p>
一些运行结果:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#29983;&#25104;&#25903;&#20184;&#30340;url</span>
https://mapi.alipay.com/gateway.do?<span style="color: #ffff00;">_input_charset</span>=utf-8&amp;<span style="color: #ffff00;">body</span>=hehehehhe&amp;<span style="color: #ffff00;">out_trade_no</span>=20140928110814-8cd3
&amp;<span style="color: #ffff00;">partner</span>=xxxxx&amp;<span style="color: #ffff00;">payment_type</span>=1&amp;<span style="color: #ffff00;">paymenthod</span>=directPay&amp;<span style="color: #ffff00;">seller_email</span>=xxx%40xxx.com&amp;
<span style="color: #ffff00;">service</span>=create_direct_pay_by_user&amp;<span style="color: #ffff00;">subject</span>=hehehe&amp;<span style="color: #ffff00;">total_fee</span>=2599&amp;<span style="color: #ffff00;">sign</span>=603b228b7e6663d217dc44bdc12a5106&amp;
<span style="color: #ffff00;">sign_type</span>=MD5

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25903;&#20184;&#23453;&#36820;&#22238;&#25968;&#25454;&#30340;url</span>
127.0.0.1:8000/payment/alipay_return/?<span style="color: #ffff00;">body</span>=&#22871;&#39184;B&amp;<span style="color: #ffff00;">buyer_email</span>=xxxx%40163.com&amp;<span style="color: #ffff00;">buyer_id</span>=xxxxxxx&amp;
<span style="color: #ffff00;">exterface</span>=create_direct_pay_by_user&amp;<span style="color: #ffff00;">is_success</span>=T&amp;
<span style="color: #ffff00;">notify_id</span>=RqPnCoPT3K9%252Fvwbh3InQ9JC%252Ft24wOkxbC3d3NsqzK9v6KWsnZ2vWqks9o41CFgeCkbai&amp;
<span style="color: #ffff00;">notify_time</span>=2014-09-30+14%3A21%3A22&amp;<span style="color: #ffff00;">notify_type</span>=trade_status_sync&amp;<span style="color: #ffff00;">out_trade_no</span>=20140928110814-8cd4&amp;
<span style="color: #ffff00;">payment_type</span>=1&amp;<span style="color: #ffff00;">seller_email</span>=xxx%40xxxx.com&amp;<span style="color: #ffff00;">seller_id</span>=xxxx&amp;<span style="color: #ffff00;">subject</span>=&#22871;&#39184;B&amp;<span style="color: #ffff00;">total_fee</span>=0.10&amp;
<span style="color: #ffff00;">trade_no</span>=2014093000715684&amp;<span style="color: #ffff00;">trade_status</span>=TRADE_SUCCESS&amp;<span style="color: #ffff00;">sign</span>=de81410e5fba18e8d97823a31c0724ac&amp;<span style="color: #ffff00;">sign_type</span>=MD5
</pre>
</div>
</div>
</li></ul>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">总结：</h3>
<div class="outline-text-3" id="text-1-4">
<p>
支付宝的文档确实有点看不懂，上面放了两个运行结果，希望大家做起来有点方向，知道构造什么，验证什么，<br>
感谢github上<a href="https:github.com/yefei/python-alipay" target="_blank" rel="external">这个repo</a>, 给了我很大的帮助。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Python使用支付宝接口&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来源&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
&lt;i&gt;www.pinbot.me&lt;/i&gt;需要支持线上支付，先从支持支付宝开始。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;使用支付宝什么接口&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
支付宝接口有很多，而线上支付使用的是即时到账接口，这里有&lt;a href=&quot;https:b.alipay.com/order/productDetail.htm?productId=2012111200373124&amp;tabId=1#ps-tabinfo-hash&quot;&gt;官方介绍&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;如何使用该接口&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
实现代码参考了&lt;a href=&quot;https:github.com/yefei/python-alipay&quot;&gt;python-alipay&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;获取PID和32位KEY&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
只能是企业才能申请该接口的使用，实名认证通过后，你只要拿到PID和KEY &lt;br  /&gt;
就行了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;使用该接口&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;/div&gt;&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;使用该接口需要实现两个工具函数:&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;构造支付宝的支付链接，如果链接请求成功会生存支付宝的支付页面。
&lt;/li&gt;
&lt;li&gt;支付成功后需要验证支付宝返回的结果是否正确，如果正确就做相应的订单更新。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;实现构造支付链接&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-2&quot;&gt;
&lt;p&gt;
注意事项：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;传给支付宝的url参数需要字母顺序排序，且不能含有空格，空值。
&lt;/li&gt;
&lt;li&gt;验证，使用MD5验证，构造除了sign和sign_type的url参数和key做md5。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;实现验证支付宝返回数据的验证&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-3&quot;&gt;
&lt;p&gt;
验证支付宝请求return_url和notify_url的数据 &lt;br  /&gt;
注意事项
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;支付宝的notify_id在一分钟后会实效。
&lt;/li&gt;
&lt;li&gt;支付宝异步请求如果没有收到success的话会间隔发请求，直到获取到success，或者超过24小时。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
代码：
一个配置类AlipayConfig &lt;br  /&gt;
一个工具类AlipayUtils &lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
AlipayConfig代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;coding: utf-8&lt;/span&gt;


&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;AlipayConfig&lt;/span&gt;(&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;object&lt;/span&gt;):

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_PID&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your apply pid&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_KEY&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your apply key&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_SELLER_EMAIL&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your apply email&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_INPUT_CHARSET&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_SIGN_TYPE&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;MD5&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_GATEWAY&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;https://mapi.alipay.com/gateway.do?&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_NOTIFY_GATEWAY&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;https://mapi.alipay.com/gateway.do?service=notify_verify&amp;amp;&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_RETURN_URL&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your return url&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
AlipayUtils代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;coding: utf-8&lt;/span&gt;

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; urllib
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; requests
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; hashlib &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; md5
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; collections &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; OrderedDict

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; alipay_config &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; AlipayConfig

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; Pinbot.settings &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; DEBUG


&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;AlipayUtils&lt;/span&gt;(&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;object&lt;/span&gt;):

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;_convert_str_encode&lt;/span&gt;(cls, pay_option, encoding=&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;       &amp;#23558;unicode&amp;#32534;&amp;#30721;&amp;#36716;&amp;#25442;&amp;#25104;utf-8&amp;#32534;&amp;#30721;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; key, value &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; pay_option.iteritems():
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;not&lt;/span&gt; value:
                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;continue&lt;/span&gt;
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;isinstance&lt;/span&gt;(value, &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;unicode&lt;/span&gt;):
                &lt;span style=&quot;color: #ffff00;&quot;&gt;pay_option&lt;/span&gt;[key] = value.encode(encoding)
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; pay_option

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;_get_url_params&lt;/span&gt;(cls, pay_option):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#20351;&amp;#29992;OrderedDict&amp;#23558;url&amp;#21442;&amp;#25968;&amp;#25353;&amp;#23383;&amp;#27597;&amp;#39034;&amp;#24207;&amp;#25490;&amp;#24207;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#21435;&amp;#38500;&amp;#31354;&amp;#30340;&amp;#23383;&amp;#27573;&amp;#21644;sign, sign_type&amp;#23383;&amp;#27573;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt; = OrderedDict(
            &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;sorted&lt;/span&gt;(
                [
                    item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; pay_option.iteritems()
                    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; item[1] &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;and&lt;/span&gt; item[0] &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;not&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign_type&#39;&lt;/span&gt;)
                ],
                key=&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; x: x[0]
            )
        )
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; url_params

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;_get_sign&lt;/span&gt;(cls, url_params):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        md5&amp;#21152;&amp;#23494;url&amp;#21442;&amp;#25968;&amp;#21644;key&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;key&lt;/span&gt; = AlipayConfig.ALIPAY_KEY
        &lt;span style=&quot;color: #ffff00;&quot;&gt;prestr&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;.join(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;%s=%s&#39;&lt;/span&gt; % item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; url_params.iteritems())
        &lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt; = md5(prestr + key).hexdigest()
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; sign

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;submit_order_url&lt;/span&gt;(cls, order):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#26500;&amp;#36896;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#21363;&amp;#26102;&amp;#21040;&amp;#36134;&amp;#38142;&amp;#25509;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;pay_option&lt;/span&gt; = &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;dict&lt;/span&gt;([
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;service&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;create_direct_pay_by_user&#39;&lt;/span&gt;),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;payment_type&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;1&#39;&lt;/span&gt;),

            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;_input_charset&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_INPUT_CHARSET),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;partner&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_PID),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;seller_email&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_SELLER_EMAIL),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;return_url&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_RETURN_URL),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;notify_url&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&lt;/span&gt;),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;show_url&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&lt;/span&gt;),

            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;out_trade_no&#39;&lt;/span&gt;, order.order_id),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;subject&#39;&lt;/span&gt;, order.subject_name()),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;body&#39;&lt;/span&gt;, order.order_detail()),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;total_fee&#39;&lt;/span&gt;, order.total_price &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;not&lt;/span&gt; DEBUG &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;else&lt;/span&gt; 0.1),
        ])

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23558;&amp;#25903;&amp;#20184;&amp;#21442;&amp;#25968;&amp;#30340;&amp;#32534;&amp;#30721;&amp;#32479;&amp;#19968;&amp;#25104;utf-8&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;pay_option&lt;/span&gt; = cls._convert_str_encode(
            pay_option,
            encoding=AlipayConfig.ALIPAY_INPUT_CHARSET,
        )

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25490;&amp;#24207;&amp;#21435;&amp;#38500;&amp;#31354;&amp;#20540;&amp;#21644;sign,sign_type&amp;#36873;&amp;#39033;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt; = cls._get_url_params(pay_option)

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#21152;&amp;#23494;&amp;#21644;&amp;#21152;&amp;#23494;&amp;#31867;&amp;#22411;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt;[&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign&#39;&lt;/span&gt;] = cls._get_sign(url_params)
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt;[&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign_type&#39;&lt;/span&gt;] = AlipayConfig.ALIPAY_SIGN_TYPE

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#29983;&amp;#25104;&amp;#25903;&amp;#20184;url&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;submit_url&lt;/span&gt; = AlipayConfig.ALIPAY_GATEWAY + urllib.urlencode(url_params)

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; submit_url

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;verify_alipay_notify&lt;/span&gt;(cls, url_data):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#39564;&amp;#35777;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#25903;&amp;#20184;&amp;#25104;&amp;#21151;&amp;#30340;&amp;#36820;&amp;#22238;&amp;#20449;&amp;#24687;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#20004;&amp;#20010;&amp;#27493;&amp;#39588;&amp;#65306;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;           1. &amp;#39564;&amp;#35777;&amp;#31614;&amp;#21517;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;           2. &amp;#26597;&amp;#35810;&amp;#27492;notify&amp;#26159;&amp;#21542;&amp;#22312;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#20013;&amp;#26377;&amp;#25928;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#39564;&amp;#35777;&amp;#31614;&amp;#21517;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;alipay_sign&lt;/span&gt; = url_data.get(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign&#39;&lt;/span&gt;)
        &lt;span style=&quot;color: #ffff00;&quot;&gt;alipay_url_params&lt;/span&gt; = cls._get_url_params(url_data)
        &lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt; = cls._get_sign(alipay_url_params)

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; sign != alipay_sign:
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;False&lt;/span&gt;

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26597;&amp;#35810;&amp;#20449;&amp;#24687;&amp;#26159;&amp;#21542;&amp;#22312;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#20013;&amp;#26377;&amp;#25928;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;check_params&lt;/span&gt; = {
            &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;partner&#39;&lt;/span&gt;: AlipayConfig.ALIPAY_PID,
            &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;notify_id&#39;&lt;/span&gt;: url_data.get(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;notify_id&#39;&lt;/span&gt;)
        }
        &lt;span style=&quot;color: #ffff00;&quot;&gt;result&lt;/span&gt; = requests.get(
            AlipayConfig.ALIPAY_NOTIFY_GATEWAY,
            params=check_params
        )
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; result.text.lower().strip() == &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;true&#39;&lt;/span&gt;:
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;True&lt;/span&gt;

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
一些运行结果:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#29983;&amp;#25104;&amp;#25903;&amp;#20184;&amp;#30340;url&lt;/span&gt;
https://mapi.alipay.com/gateway.do?&lt;span style=&quot;color: #ffff00;&quot;&gt;_input_charset&lt;/span&gt;=utf-8&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;body&lt;/span&gt;=hehehehhe&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;out_trade_no&lt;/span&gt;=20140928110814-8cd3
&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;partner&lt;/span&gt;=xxxxx&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;payment_type&lt;/span&gt;=1&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;paymenthod&lt;/span&gt;=directPay&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;seller_email&lt;/span&gt;=xxx%40xxx.com&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;service&lt;/span&gt;=create_direct_pay_by_user&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;subject&lt;/span&gt;=hehehe&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;total_fee&lt;/span&gt;=2599&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt;=603b228b7e6663d217dc44bdc12a5106&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;sign_type&lt;/span&gt;=MD5

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#36820;&amp;#22238;&amp;#25968;&amp;#25454;&amp;#30340;url&lt;/span&gt;
127.0.0.1:8000/payment/alipay_return/?&lt;span style=&quot;color: #ffff00;&quot;&gt;body&lt;/span&gt;=&amp;#22871;&amp;#39184;B&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;buyer_email&lt;/span&gt;=xxxx%40163.com&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;buyer_id&lt;/span&gt;=xxxxxxx&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;exterface&lt;/span&gt;=create_direct_pay_by_user&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;is_success&lt;/span&gt;=T&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;notify_id&lt;/span&gt;=RqPnCoPT3K9%252Fvwbh3InQ9JC%252Ft24wOkxbC3d3NsqzK9v6KWsnZ2vWqks9o41CFgeCkbai&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;notify_time&lt;/span&gt;=2014-09-30+14%3A21%3A22&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;notify_type&lt;/span&gt;=trade_status_sync&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;out_trade_no&lt;/span&gt;=20140928110814-8cd4&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;payment_type&lt;/span&gt;=1&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;seller_email&lt;/span&gt;=xxx%40xxxx.com&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;seller_id&lt;/span&gt;=xxxx&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;subject&lt;/span&gt;=&amp;#22871;&amp;#39184;B&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;total_fee&lt;/span&gt;=0.10&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;trade_no&lt;/span&gt;=2014093000715684&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;trade_status&lt;/span&gt;=TRADE_SUCCESS&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt;=de81410e5fba18e8d97823a31c0724ac&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;sign_type&lt;/span&gt;=MD5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;总结：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
支付宝的文档确实有点看不懂，上面放了两个运行结果，希望大家做起来有点方向，知道构造什么，验证什么，&lt;br  /&gt;
感谢github上&lt;a href=&quot;https:github.com/yefei/python-alipay&quot;&gt;这个repo&lt;/a&gt;, 给了我很大的帮助。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://runforever.github.io/categories/Python/"/>
    
      <category term="Alipay" scheme="http://runforever.github.io/categories/Python/Alipay/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Mixin 学习笔记</title>
    <link href="http://runforever.github.io/2014-07-19/2014-07-19-python-mixin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://runforever.github.io/2014-07-19/2014-07-19-python-mixin学习笔记/</id>
    <published>2014-07-18T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:31.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">2016-10-25 17:04 的邮件</h2>
<div class="outline-text-2" id="text-1">
<p>
正思考着如何给 <a href="https://github.com/BurnishTechCN/djkit" target="_blank" rel="external">djkit</a>（Django starter）项目添加 admin 和 models 的支持，
此时收到一封邮件，来自 <a href="https://github.com/uhayate" target="_blank" rel="external">uhayate</a>，内容如下：
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png" alt="5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png">
</p>
</div>

<p>
看了他的 github 和博客，我确定我不认识这个同学，这下有意思了，我的博客居
然被人搜索到而且还发现了一个错误，赶紧回了邮件然后审查文章压压惊，之后便有了
这次更新，不得不说，两年前写的东西还是欠火候，至于评论功能，使用 <a href="https://github.com/runforever/runforever.github.com/issues/new" target="_blank" rel="external">Issue</a>。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">主要更新</h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>新式类 MRO 的机制理解。
</li>
<li>文章排版按照<a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external"> 中文文案排版指北</a> 重排。
</li>
<li>Mixin 使用场景。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">更新总结</h3>
<div class="outline-text-3" id="text-1-2">
<ol class="org-ol">
<li>多继承真的很复杂。
</li>
<li>博客和代码一样，每当你过一段时间回头来看会问自己当时为什么要这样写，代码要经常重构，文章也需要经常更新，当别人看到你写的东西的时候就要拿出最好的给读者。
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">来由</h2>
<div class="outline-text-2" id="text-2">
<p>
对 Python 的面向对象编程研究的比较少，Django 是从 1.3 推荐使用 class base view，
免不了会用到 Python 的面向对象的特性，所以把研究的东西记录一下。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">知识点</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>Python 面向对象的基本使用和多继承 MRO（method resolution order）的机制。
</li>
<li>Mixin 和多继承有什么区别及应用场景。
</li>
<li>Python 中的静态方法、类方法、实例方法。
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">1. Python 面向对象的基本使用和 MRO</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">定义 class</h3>
<div class="outline-text-3" id="text-4-1">
<p>
old school 旧式类
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>:
    <span style="color: #00ff00;">'''old school &#19981;&#33021;&#20351;&#29992; super &#20851;&#38190;&#23383;'''</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
</pre>
</div>

<p>
new school 新式类
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Bar</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #00ff00;">'''new school &#32487;&#25215;&#33258; object &#21487;&#20197;&#20351;&#29992; super &#20851;&#38190;&#23383;'''</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
</pre>
</div>
<p>
两者区别在于是否继承 object，old school 的查找顺序式深度优先，new school 的查找顺序是 C3 算法
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">old school 类多继承的问题</h3>
<div class="outline-text-3" id="text-4-2">
<p>
我查阅了很多文章，基本都用下面的例子说明存在的问题
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">A</span>():
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"A"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">B</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo2</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">C</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"C"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">D</span>(B, C):
    <span style="color: #00ffff; font-weight: bold;">pass</span>

<span style="color: #ffff00;">d</span> = D()
d.foo1() <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35843;&#29992;&#30340;&#26159; A &#30340; foo1 &#26041;&#27861;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">result: A</span>
</pre>
</div>

<p>
old school 的 MRO 过程<br>
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/img_0045.jpg" alt="img_0045.jpg">
</p>
</div>

<p>
由于基本不用多继承，竟然一开始没有理解到这样结果有什么问题，仔细一想，
如果我写了这样的多继承代码，我应该是想使用父类 C 的 foo1() 方法，结果
给了我 A 的 foo1() 方法，确实不符合预期，既然如此是不是换个顺序就解决
问题了 class D(C, B)，可能解决了调用 foo1 的问题，然而顺序换了之后使
用别的父类方法依然会出现类似 foo1 方法的问题，修复 bug 的同时引入了
其他 bug，于是我很好奇的去看了 C3 算法是如何解决这个问题的。
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">C3 算法</h3>
<div class="outline-text-3" id="text-4-3">
<p>
在我查找 C3 算法资料的时候发现 Python 2.2 版本的 MRO 使用的是广度优先搜索，
这个我就不多说了，现在没有人还会使用 Python 2.2 版本，2.3 以后的版本 MRO 都是使用的 C3。
</p>

<p>
我们把上面多继承的例子改成 new school 方式，Python 提供了 <code>__mro__</code> 方法来看 MRO
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">A</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"A"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">B</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo2</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">C</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"C"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">D</span>(B, C):
    <span style="color: #00ffff; font-weight: bold;">pass</span>

<span style="color: #ffff00;">d</span> = D()
<span style="color: #00ffff; font-weight: bold;">print</span> D.__mro__
d.foo1() <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31526;&#21512;&#39044;&#26399;&#30340;&#35843;&#29992;&#30340;&#26159; C &#30340; foo1 &#26041;&#27861;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">result: C</span>
</pre>
</div>

<p>
C3 算法比较有意思，用了函数式编程编程的思想。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">L &#26159;&#27714; MRO &#39034;&#24207;&#30340;&#20989;&#25968;</span>
L(<span style="color: #0000ff; font-weight: bold;">object</span>) = <span style="color: #0000ff; font-weight: bold;">object</span>
L(D(B, C)) = C + merge(L(B), L(C), BC)
</pre>
</div>

<p>
merge 过程很难用文字解释清楚，我们通过过程来理解。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ffff00;">O</span> = <span style="color: #0000ff; font-weight: bold;">object</span>
L(O) = O
L(A(O)) = A + merge(L(O))
        = AO

L(B(A)) = B + merge(L(A))
        = B + merge(A O)
        = BAO

L(C(A)) = CAO <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35745;&#31639;&#36807;&#31243;&#21516;&#19978;</span>

L(D(B, C)) = D + merge(L(B), L(C), BC)
           = D + merge(BAO, CAO, BC)       <span style="color: #ff0000;"># </span><span style="color: #ff0000;">B &#37117;&#26159;&#31532;&#19968;&#65292;B out</span>
           = D + B + merge(AO, CAO, C)     <span style="color: #ff0000;"># </span><span style="color: #ff0000;">A &#21644; O &#37117;&#22312; CAO &#21518;&#65292;&#19981;&#33021; out&#65292;C &#22312;&#31532;&#19968;&#65292;C out</span>
           = D + B + C + merge(AO, AO)     <span style="color: #ff0000;"># </span><span style="color: #ff0000;">A &#37117;&#26159;&#31532;&#19968;&#65292;A out</span>
           = D + B + C + A + merge(O, O)   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21516;&#19978;&#65292;O out</span>
           = D + B + C + A + O
</pre>
</div>
<p>
从上面的 MRO 顺序我们看到最终调用的 foo1 是 C 类的 foo1，这个问题解决，
同时 MRO 也展现了多继承设计是很复杂的，为了解决这样的复杂性，出现了 Mixin。
</p>

<p>
如果看不懂，直接使用 <code>__mro__</code> 方法来看继承顺序。
</p>

<p>
都使用 new school 来定义类，不要 old school 和 new school 混用。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">2. 使用 Mixin</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">什么是Mixin</h3>
<div class="outline-text-3" id="text-5-1">
<p>
继承，组合都是为了代码复用，Mixin 方式也是一种多继承，但他看起来像是用组合的方式来实现代码复用，
可以把 Mixin 看成是一个个的插件，设计的类需要什么插件就继承相应的 Mixin。
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">Mixin 设计代码的方式</h3>
<div class="outline-text-3" id="text-5-2">
<p>
代码中的任何单元（package，module，class，function）都要遵循只做一件事，并且把这件事做好的原则，
Mixin 也要保证一个 Mixin 只有一个功能，如果有多个功能，写成多个 Mixin。
</p>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3">Mixin 的使用场景</h3>
<div class="outline-text-3" id="text-5-3">
<p>
我们写 web view 的时候会有涉及到认证和权限，下面我们来看 Django 是怎样通过 Mixin 来解决这个问题的。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#30331;&#24405;&#35748;&#35777; Mixin</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">LoginRequiredMixin</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@method_decorator</span>(login_required)
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">dispatch</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request, *args, **kwargs):
        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #0000ff; font-weight: bold;">super</span>(LoginRequiredMixin, <span style="color: #00ffff; font-weight: bold;">self</span>).dispatch(request, *args, **kwargs)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#19981;&#26657;&#39564; CSRF Mixin</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">CSRFExemptMixin</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@method_decorator</span>(csrf_exempt)
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">dispatch</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, *args, **kwargs):
        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #0000ff; font-weight: bold;">super</span>(CSRFExemptMixin, <span style="color: #00ffff; font-weight: bold;">self</span>).dispatch(*args, **kwargs)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31649;&#29702;&#21592;&#35748;&#35777; Mixin</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">StaffRequiredMixin</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@method_decorator</span>(user_passes_test(<span style="color: #00ffff; font-weight: bold;">lambda</span> u: u.is_staff))
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">dispatch</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request, *args, **kwargs):
        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #0000ff; font-weight: bold;">super</span>(StaffRequiredMixin, <span style="color: #00ffff; font-weight: bold;">self</span>).dispatch(request, *args, **kwargs)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#27809;&#26377;&#35748;&#35777;&#30340; web view</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(View):

    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">get</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request):
       <span style="color: #00ffff; font-weight: bold;">return</span> HttpResponse(<span style="color: #00ff00;">'I am a web view'</span>)

    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">post</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request):
       <span style="color: #00ffff; font-weight: bold;">return</span> HttpResponse(<span style="color: #00ff00;">'post success'</span>)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">1. View &#28155;&#21152; Login &#35748;&#35777;</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(LoginRequiredMixin, View):
    <span style="color: #00ff00;">'''do something'''</span>


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">2. View &#19981;&#26657;&#39564; CSRF &#24182;&#19988; Login &#35748;&#35777;</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(CSRFExemptMixin, LoginRequiredMixin, View):
    <span style="color: #00ff00;">'''do something'''</span>


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">3. View &#38656;&#35201;&#31649;&#29702;&#21592;&#35748;&#35777;</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(StaffRequiredMixin, View):
    <span style="color: #00ff00;">'''do something'''</span>
</pre>
</div>
<p>
看完上面的代码 Mixin 确实让代码的设计变得清晰了很多，没有多继承设计那种复杂的层级关系，只有一个层级，
使用组合起来达到目的，让我想到了 Unix 里工具的设计思想，可以通过管道（pipeline）自由组合。<br>
例如批量杀进程： <code>ps aux | grep 'foo' | awk '{print $1}' | xargs kill -9</code>
</p>

<p>
Mixin 和多继承实现机制是一样的，他们的不同体现在设计思想的不同，理解了 MRO 有助于我们更好的设计代码。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">3. Python 中的类方法，静态方法和实例方法</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">静态方法</h3>
<div class="outline-text-3" id="text-6-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>

    <span style="color: #00ff00;">@staticmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">do_something</span>():
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#26080;&#27861;&#35775;&#38382;&#31867;&#23646;&#24615;&#12289;&#23454;&#20363;&#23646;&#24615;&#65292;&#30456;&#24403;&#20110;&#19968;&#20010;&#30456;&#23545;&#29420;&#31435;&#30340;&#26041;&#27861;&#65292;</span>
<span style="color: #00ff00;">        &#36319;&#31867;&#20854;&#23454;&#27809;&#20160;&#20040;&#20851;&#31995;&#65292;&#25442;&#20010;&#35282;&#24230;&#26469;&#35762;&#65292;&#20854;&#23454;&#23601;&#26159;&#25918;&#22312;&#19968;&#20010;</span>
<span style="color: #00ff00;">        &#31867;&#30340;&#20316;&#29992;&#22495;&#37324;&#30340;&#20989;&#25968;&#32780;&#24050;&#12290;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">'I am just a static method'</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20351;&#29992;</span>
Foo.do_something()
<span style="color: #ffff00;">f</span> = Foo()
f.do_something()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2">类方法</h3>
<div class="outline-text-3" id="text-6-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #ffff00;">msg</span> = <span style="color: #00ff00;">'hello world'</span>

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">do_something</span>(cls):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#21487;&#20197;&#35775;&#38382;&#31867;&#23646;&#24615;&#65292;&#26080;&#27861;&#35775;&#38382;&#23454;&#20363;&#23646;&#24615;&#12290;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #00ffff; font-weight: bold;">print</span> cls.msg

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20351;&#29992;</span>
Foo.do_something()
<span style="color: #ffff00;">f</span> = foo()
f.do_something()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-3" class="outline-3">
<h3 id="sec-6-3">实例方法</h3>
<div class="outline-text-3" id="text-6-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #ffff00;">cls_msg</span> = <span style="color: #00ff00;">'I am a cls msg'</span>

    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">self</span>.ins_msg = <span style="color: #00ff00;">'I am a instance msg'</span>

    <span style="color: #00ff00;">@staticmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">static_do</span>():
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">'I am a static msg</span>

<span style="color: #00ff00;">    @classmethod</span>
<span style="color: #00ff00;">    def class_do(cls):</span>
<span style="color: #00ff00;">        print cls.cls_msg</span>

<span style="color: #00ff00;">    def instance_do(self):</span>
<span style="color: #00ff00;">        '''</span>&#21487;&#20197;&#35775;&#38382;&#31867;&#23646;&#24615;<span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        print self.ins_msg</span>
<span style="color: #00ff00;">        print Foo.cls_msg</span>

<span style="color: #00ff00;"># &#20351;&#29992;</span>
<span style="color: #00ff00;">f = Foo()</span>

<span style="color: #00ff00;">f.static_do()</span>
<span style="color: #00ff00;"># I am a static msg</span>

<span style="color: #00ff00;">f.class_do()</span>
<span style="color: #00ff00;"># I am a cls msg</span>

<span style="color: #00ff00;">f.instance_do()</span>
<span style="color: #00ff00;"># I am a instance msg</span>
<span style="color: #00ff00;"># I am a cls msg</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-4" class="outline-3">
<h3 id="sec-6-4">小结</h3>
<div class="outline-text-3" id="text-6-4">
<ol class="org-ol">
<li>python 的类方法可以用来写工具类。
</li>
<li>静态方法暂时没有想到他的具体用途
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">总结</h2>
<div class="outline-text-2" id="text-7">
<ol class="org-ol">
<li>面向对象的思想其实和 UNIX 的设计思想其实是一致，K.I.S.S。
</li>
<li>组合优于继承，继承的层次不宜太多，单一继承结构最好。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">参考</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://www.libaoyin.com/2013/08/06/pyhton-staticmethod-classmethod/" target="_blank" rel="external">python 静态方法和类方法</a> <br>
<a href="http://xiaocong.github.io/blog/2012/06/13/python-mixin-and-mro/" target="_blank" rel="external">Python Mixin and MRO</a> <br>
<a href="https://github.com/zhouhaibing089/Blog/" target="_blank" rel="external">{译}The Python 2.3 Method Resolution Order</a> <br>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;2016-10-25 17:04 的邮件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
正思考着如何给 &lt;a href=&quot;https://github.com/BurnishTechCN/djkit&quot;&gt;djkit&lt;/a&gt;（Django starter）项目添加 admin 和 models 的支持，
此时收到一封邮件，来自 &lt;a href=&quot;https://github.com/uhayate&quot;&gt;uhayate&lt;/a&gt;，内容如下：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.defcoding.com/5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png&quot; alt=&quot;5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
看了他的 github 和博客，我确定我不认识这个同学，这下有意思了，我的博客居
然被人搜索到而且还发现了一个错误，赶紧回了邮件然后审查文章压压惊，之后便有了
这次更新，不得不说，两年前写的东西还是欠火候，至于评论功能，使用 &lt;a href=&quot;https://github.com/runforever/runforever.github.com/issues/new&quot;&gt;Issue&lt;/a&gt;。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;主要更新&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;新式类 MRO 的机制理解。
&lt;/li&gt;
&lt;li&gt;文章排版按照&lt;a href=&quot;https://github.com/sparanoid/chinese-copywriting-guidelines&quot;&gt; 中文文案排版指北&lt;/a&gt; 重排。
&lt;/li&gt;
&lt;li&gt;Mixin 使用场景。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;更新总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;多继承真的很复杂。
&lt;/li&gt;
&lt;li&gt;博客和代码一样，每当你过一段时间回头来看会问自己当时为什么要这样写，代码要经常重构，文章也需要经常更新，当别人看到你写的东西的时候就要拿出最好的给读者。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;来由&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
对 Python 的面向对象编程研究的比较少，Django 是从 1.3 推荐使用 class base view，
免不了会用到 Python 的面向对象的特性，所以把研究的东西记录一下。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;知识点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Python 面向对象的基本使用和多继承 MRO（method resolution order）的机制。
&lt;/li&gt;
&lt;li&gt;Mixin 和多继承有什么区别及应用场景。
&lt;/li&gt;
&lt;li&gt;Python 中的静态方法、类方法、实例方法。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://runforever.github.io/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>saltstack自定义模块</title>
    <link href="http://runforever.github.io/2014-07-11/2014-07-11-saltstack%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/"/>
    <id>http://runforever.github.io/2014-07-11/2014-07-11-saltstack自定义模块/</id>
    <published>2014-07-10T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:32.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">SaltStack自定义模块</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来由</h3>
<div class="outline-text-3" id="text-1-1">
<p>
公司项目以前使用的是fabric将代码部署到云平台，现在迁移到本地的服务器，<br>
再使用fabric显然有点不合适，然而使用SaltStack的state来描述发版本的过 <br>
程又略显不灵活，所以决定自己编写一个SaltStack的模块来实现版本发布的需求，<br>
下面给出编写自定义模块的方法。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">版本发布流程</h3>
<div class="outline-text-3" id="text-1-2">
<ol class="org-ol">
<li>使用git pull最新的master代码。
</li>
<li>使用脚本替换一些变量。
</li>
<li>一些其他的操作
</li>
<li>重启supervisor开启的uwsgi服务。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">如何编写SaltStack自定义模块</h3>
<div class="outline-text-3" id="text-1-3">
<p>
编写SaltStack自定义模块超级简单，前提是需要你会一些Python编程，具体如下： <br>
</p>
</div>

<div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">步骤</h4>
<div class="outline-text-4" id="text-1-3-1">
<ol class="org-ol">
<li>首先需要在master机器的file_roots 下建一个_modules文件夹，里面放.py 文件，也就是自定义模块。
<ul class="org-ul">
<li>file_roots 在/etc/salt/master 里可以设置，默认是/srv/salt/，即你需要在这个目录下新建文件夹_modules
</li>
</ul>
</li>
<li>在_modules里新建自定义模块，然后编写相应的代码。
<ul class="org-ul">
<li>比如模块名是foo，在里面定义了方法bar。
</li>
</ul>
</li>
<li>写完代码后，使用命令 salt '*' saltutil.sync_all 将自定义模块同步到各个minion上。
<ul class="org-ul">
<li>也可以使用 salt '*' saltutil.sync_modules 将自定义模块同步到minion上
</li>
</ul>
</li>
<li>运行自定也模块，使用命令 salt '*' foo.bar
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-3-2" class="outline-4">
<h4 id="sec-1-3-2">实例</h4>
<div class="outline-text-4" id="text-1-3-2">
<p>
目录结构：
</p>
<div class="org-src-container">

<pre class="src src-sh">srv
<span style="color: #00ff00;">\-</span>- salt
   <span style="color: #00ff00;">\-</span>- _modules
       <span style="color: #00ff00;">\-</span>- foo.py
   <span style="color: #00ff00;">\-</span>- prod
   ...
</pre>
</div>

<p>
自定义模块代码:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">bar</span>():
    <span style="color: #ffff00;">CMD_RUN</span> = __salt__[<span style="color: #00ff00;">'cmd.run'</span>]
    <span style="color: #ffff00;">cmd</span> = <span style="color: #00ff00;">"ls /etc/init"</span>
    <span style="color: #00ffff; font-weight: bold;">return</span> CMD_RUN(cmd)

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35299;&#37322;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#33258;&#23450;&#20041;&#27169;&#22359;&#20250;&#21152;&#36733;__salt__&#21464;&#37327;&#65292;&#36825;&#20010;dict&#21464;&#37327;&#37324;&#21253;&#21547;&#25152;&#26377;&#30340;salt function</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#19978;&#38754;&#30340;cmd.run&#23601;&#26159;salt&#30340;&#21629;&#20196;&#36816;&#34892;&#20989;&#25968;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">__salt__&#21464;&#37327;&#24517;&#39035;&#22312;&#33258;&#23450;&#20041;&#30340;&#27169;&#22359;&#37324;&#20351;&#29992;&#65292;&#20063;&#23601;&#26159;&#24517;&#39035;&#22312;&#33258;&#23450;&#19968;&#30340;&#26041;&#27861;&#20013;&#20351;&#29992;&#65292;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22914;&#19978;&#38754;&#30340;bar&#26041;&#27861;&#65292;&#19981;&#33021;&#23558;__salt__&#21464;&#37327;&#25918;&#21040;&#20840;&#23616;&#21464;&#37327;&#20013;&#20351;&#29992;&#65292;&#21542;&#21017;&#20250;&#25253;__salt__&#21464;&#37327;&#20026;&#23450;&#20041;</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">注意事项</h3>
<div class="outline-text-3" id="text-1-4">
<ol class="org-ol">
<li>如果要使用__salt__变量，必须要在自定义的方法中使用，不能在全局变量中使用。
</li>
<li>如果运行命令报错了，如报 foo.bar is not avaliable，请到minion机器上去查看具体的日志。
<ul class="org-ul">
<li>报上述错误并不是模块没有同步到minion上，而是你编写的模块运行有问题。
</li>
<li>minion的日志记录在/var/log/salt/minion中，可以去这里查看具体错误。
</li>
</ul>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">最后的思考</h3>
<div class="outline-text-3" id="text-1-5">
<ol class="org-ol">
<li>编写SaltStack自定义模块很简单、方便。
</li>
<li>实现自定义模块的过程中，可以发扬NIH(Not invent here)的思想。
<ul class="org-ul">
<li>可以充分利用__salt__变量里的salt自带函数来实现你想要的功能。
</li>
</ul>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">参考</h3>
<div class="outline-text-3" id="text-1-6">
<blockquote>
<p>
<a href="http://docs.saltstack.com/en/latest/ref/modules/" target="_blank" rel="external">Execution Modules</a>
</p>
</blockquote>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;SaltStack自定义模块&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来由&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
公司项目以前使用的是fabric将代码部署到云平台，现在迁移到本地的服务器，&lt;br  /&gt;
再使用fabric显然有点不合适，然而使用SaltStack的state来描述发版本的过 &lt;br  /&gt;
程又略显不灵活，所以决定自己编写一个SaltStack的模块来实现版本发布的需求，&lt;br  /&gt;
下面给出编写自定义模块的方法。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;版本发布流程&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;使用git pull最新的master代码。
&lt;/li&gt;
&lt;li&gt;使用脚本替换一些变量。
&lt;/li&gt;
&lt;li&gt;一些其他的操作
&lt;/li&gt;
&lt;li&gt;重启supervisor开启的uwsgi服务。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;如何编写SaltStack自定义模块&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
编写SaltStack自定义模块超级简单，前提是需要你会一些Python编程，具体如下： &lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;步骤&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;首先需要在master机器的file_roots 下建一个_modules文件夹，里面放.py 文件，也就是自定义模块。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;file_roots 在/etc/salt/master 里可以设置，默认是/srv/salt/，即你需要在这个目录下新建文件夹_modules
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在_modules里新建自定义模块，然后编写相应的代码。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;比如模块名是foo，在里面定义了方法bar。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写完代码后，使用命令 salt &#39;*&#39; saltutil.sync_all 将自定义模块同步到各个minion上。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;也可以使用 salt &#39;*&#39; saltutil.sync_modules 将自定义模块同步到minion上
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运行自定也模块，使用命令 salt &#39;*&#39; foo.bar
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;实例&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;p&gt;
目录结构：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;srv
&lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- salt
   &lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- _modules
       &lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- foo.py
   &lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- prod
   ...
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
自定义模块代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;coding: utf-8&lt;/span&gt;

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;bar&lt;/span&gt;():
    &lt;span style=&quot;color: #ffff00;&quot;&gt;CMD_RUN&lt;/span&gt; = __salt__[&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;cmd.run&#39;&lt;/span&gt;]
    &lt;span style=&quot;color: #ffff00;&quot;&gt;cmd&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;ls /etc/init&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; CMD_RUN(cmd)

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#35299;&amp;#37322;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#33258;&amp;#23450;&amp;#20041;&amp;#27169;&amp;#22359;&amp;#20250;&amp;#21152;&amp;#36733;__salt__&amp;#21464;&amp;#37327;&amp;#65292;&amp;#36825;&amp;#20010;dict&amp;#21464;&amp;#37327;&amp;#37324;&amp;#21253;&amp;#21547;&amp;#25152;&amp;#26377;&amp;#30340;salt function&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#19978;&amp;#38754;&amp;#30340;cmd.run&amp;#23601;&amp;#26159;salt&amp;#30340;&amp;#21629;&amp;#20196;&amp;#36816;&amp;#34892;&amp;#20989;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;__salt__&amp;#21464;&amp;#37327;&amp;#24517;&amp;#39035;&amp;#22312;&amp;#33258;&amp;#23450;&amp;#20041;&amp;#30340;&amp;#27169;&amp;#22359;&amp;#37324;&amp;#20351;&amp;#29992;&amp;#65292;&amp;#20063;&amp;#23601;&amp;#26159;&amp;#24517;&amp;#39035;&amp;#22312;&amp;#33258;&amp;#23450;&amp;#19968;&amp;#30340;&amp;#26041;&amp;#27861;&amp;#20013;&amp;#20351;&amp;#29992;&amp;#65292;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22914;&amp;#19978;&amp;#38754;&amp;#30340;bar&amp;#26041;&amp;#27861;&amp;#65292;&amp;#19981;&amp;#33021;&amp;#23558;__salt__&amp;#21464;&amp;#37327;&amp;#25918;&amp;#21040;&amp;#20840;&amp;#23616;&amp;#21464;&amp;#37327;&amp;#20013;&amp;#20351;&amp;#29992;&amp;#65292;&amp;#21542;&amp;#21017;&amp;#20250;&amp;#25253;__salt__&amp;#21464;&amp;#37327;&amp;#20026;&amp;#23450;&amp;#20041;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;注意事项&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;如果要使用__salt__变量，必须要在自定义的方法中使用，不能在全局变量中使用。
&lt;/li&gt;
&lt;li&gt;如果运行命令报错了，如报 foo.bar is not avaliable，请到minion机器上去查看具体的日志。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;报上述错误并不是模块没有同步到minion上，而是你编写的模块运行有问题。
&lt;/li&gt;
&lt;li&gt;minion的日志记录在/var/log/salt/minion中，可以去这里查看具体错误。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;最后的思考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;编写SaltStack自定义模块很简单、方便。
&lt;/li&gt;
&lt;li&gt;实现自定义模块的过程中，可以发扬NIH(Not invent here)的思想。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;可以充分利用__salt__变量里的salt自带函数来实现你想要的功能。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://docs.saltstack.com/en/latest/ref/modules/&quot;&gt;Execution Modules&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="saltstack" scheme="http://runforever.github.io/categories/saltstack/"/>
    
    
  </entry>
  
  <entry>
    <title>saltstack使用笔记</title>
    <link href="http://runforever.github.io/2014-06-21/2014-06-21-salt%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://runforever.github.io/2014-06-21/2014-06-21-salt使用笔记/</id>
    <published>2014-06-20T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:32.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">saltstack使用笔记</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来由：</h3>
<div class="outline-text-3" id="text-1-1">
<p>
公司需要部署把服务部署到自己的服务器中，每次迁移服务都得重新安装软件<br>
配置什么东西，身为程序员的我本身比较懒，就想找个工具把配置写好，下次<br>
部署的时候直接使用配置来玩，而不是每次都手工，所以就发现了 <b>saltstack</b><br>
这个自动化部署工具了。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">简介</h3>
<div class="outline-text-3" id="text-1-2">
<p>
salt采用的C/S架构，主机master和客户端minion，master通过命令控制客户端minion <br>
进行相应的任务（软件安装，配置，重启，定时任务，状态监控。。。）。
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">核心</h3>
<div class="outline-text-3" id="text-1-3">
<p>
远程执行引擎是Salt的核心，它能够为多组系统创建高速、安全的双向通讯网络。<br>
基于这个通许系统，Salt提供了一个非常快速、灵活并且容易使用的配置管理系统，<br>
称之为“Salt States”。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">安装配置</h3>
<div class="outline-text-3" id="text-1-4">
<p>
参考 <a href="http://docs.saltstack.cn/topics/tutorials/walkthrough.html" target="_blank" rel="external">http://docs.saltstack.cn/topics/tutorials/walkthrough.html</a> <br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#36816;&#34892;</span>
:salt-key -L
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22914;&#26524;&#20986;&#29616;&#23458;&#25143;&#31471;&#26426;&#22120;&#65292;&#35828;&#26126;&#37197;&#32622;&#25104;&#21151;&#20102;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">使用</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1">salt state</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
SLS（代表SaLt State文件）只是结构化的数据。<br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#36816;&#34892;</span>
salt <span style="color: #00ff00;">'*'</span> state.highstate
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20250;&#35753;&#25152;&#26377;&#30340;minion&#21040;master&#19978;&#26469;&#21462;&#36208;&#33258;&#24049;&#30340;SLS&#23450;&#20041;</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#27169;&#25311;&#36816;&#34892;</span>
salt <span style="color: #00ff00;">'minion1.example.com'</span> state.highstate -v <span style="color: #ffff00;">test</span>=True
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5-2" class="outline-4">
<h4 id="sec-1-5-2">更多使用教程</h4>
<div class="outline-text-4" id="text-1-5-2">
<p>
官方文档 <a href="http://docs.saltstack.com/" target="_blank" rel="external">http://docs.saltstack.com/</a>
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">salt 配置文件结构</h3>
<div class="outline-text-3" id="text-1-6">
</div><div id="outline-container-sec-1-6-1" class="outline-4">
<h4 id="sec-1-6-1">开启salt配置文件</h4>
<div class="outline-text-4" id="text-1-6-1">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20462;&#25913;/etc/salt/master&#25991;&#20214;&#65292;&#21435;&#25481;&#22914;&#19979;&#27880;&#37322;</span>
file_roots:
  base:
    - /srv/salt
  prod:
    - /srv/salt/prod
  dev:
    - /srv/salt/dev


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22914;&#26524;&#38656;&#35201;&#20351;&#29992;pillar&#65292;&#21435;&#25481;&#22914;&#19979;&#27880;&#37322;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">pillar&#21487;&#20197;&#20801;&#35768;&#20320;&#23450;&#20041;&#19968;&#20123;&#21464;&#37327;&#65292;&#25935;&#24863;&#25968;&#25454;&#65292;&#20855;&#20307;&#21442;&#32771; http://www.ituring.com.cn/article/42398</span>
pillar_root:
  base:
    - /srv/pillar
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6-2" class="outline-4">
<h4 id="sec-1-6-2">配置文件格式</h4>
<div class="outline-text-4" id="text-1-6-2">
<ol class="org-ol">
<li>salt 的配置文件使用yaml格式，文件名后缀是.sls
</li>
<li>关于yaml格式可以参考<a href="http://www.yaml.org/spec/1.2/spec.html" target="_blank" rel="external">http://www.yaml.org/spec/1.2/spec.html</a>
<ul class="org-ul">
<li>json是yaml的子集，yaml可以描述更多的东西
</li>
<li>yaml的可读性要比json好，但是身为程序员的我觉得json的可读性更好。
</li>
<li>学习yaml可以使用如下网站进行json和yaml的转换，<a href="http://yamltojson.com/" target="_blank" rel="external">http://yamltojson.com/</a> ，这样可以更好的理解yaml。
</li>
</ul>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-6-3" class="outline-4">
<h4 id="sec-1-6-3">配置文件的目录结构</h4>
<div class="outline-text-4" id="text-1-6-3">
<div class="org-src-container">

<pre class="src src-yaml">tops.sls &#65288;&#25551;&#36848;&#25152;&#26377;&#23458;&#25143;&#31471;&#38656;&#35201;&#25191;&#34892;&#30340;&#29366;&#24577;&#65289;
prod &#65288;&#29983;&#20135;&#29615;&#22659;&#37197;&#32622;&#65289;
  -- core &#65288;&#22522;&#26412;&#36719;&#20214;&#23433;&#35013;&#65289;
     -- core.sls
  -- nginx
     -- nginx.sls
     -- nginx.conf
  -- vim
     -- vim.sls
     -- vim.local
  -- git
     -- git.sls
  -- web
     -- web.sls
  -- ...
     -- ...
dev &#65288;&#27979;&#35797;&#29615;&#22659;&#37197;&#32622;&#65289;
  -- ...
     -- ...
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6-4" class="outline-4">
<h4 id="sec-1-6-4">配置文件解释</h4>
<div class="outline-text-4" id="text-1-6-4">
<p>
core.sls
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">/srv/salt/tops.sls</span>
<span style="color: #ffff00;">prod</span>:
  <span style="color: #ffff00;">'*'</span>:   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25152;&#26377;minion&#37117;&#35201;&#33719;&#21462;core&#29366;&#24577;</span>
    - core.core

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">/srv/salt/prod/core/core.sls</span>
<span style="color: #ffff00;">mypkgs</span>:
  <span style="color: #ffff00;">pkg.installed</span>:
    - <span style="color: #ffff00;">pkgs</span>:
      - gcc
      - python-dev
      - tmux
      - build-essential
      - g++
      - ...
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7">总结</h3>
<div class="outline-text-3" id="text-1-7">
<p>
saltstack 可以让你像编程一样去管理服务器，简单，高效，有趣。
</p>
</div>
</div>

<div id="outline-container-sec-1-8" class="outline-3">
<h3 id="sec-1-8">参考</h3>
<div class="outline-text-3" id="text-1-8">
<blockquote>
<p>
<a href="http://docs.saltstack.cn/topics/tutorials/walkthrough.html" target="_blank" rel="external">saltstack演练</a> <br>
<a href="http://docs.saltstack.cn/topics/tutorials/starting_states.html" target="_blank" rel="external">http://docs.saltstack.cn/topics/tutorials/starting_states.html</a> <br>
<a href="http://www.ituring.com.cn/article/42398" target="_blank" rel="external">http://www.ituring.com.cn/article/42398</a> <br>
</p>
</blockquote>
<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;saltstack使用笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来由：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
公司需要部署把服务部署到自己的服务器中，每次迁移服务都得重新安装软件&lt;br  /&gt;
配置什么东西，身为程序员的我本身比较懒，就想找个工具把配置写好，下次&lt;br  /&gt;
部署的时候直接使用配置来玩，而不是每次都手工，所以就发现了 &lt;b&gt;saltstack&lt;/b&gt;&lt;br  /&gt;
这个自动化部署工具了。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;简介&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
salt采用的C/S架构，主机master和客户端minion，master通过命令控制客户端minion &lt;br  /&gt;
进行相应的任务（软件安装，配置，重启，定时任务，状态监控。。。）。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;核心&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
远程执行引擎是Salt的核心，它能够为多组系统创建高速、安全的双向通讯网络。&lt;br  /&gt;
基于这个通许系统，Salt提供了一个非常快速、灵活并且容易使用的配置管理系统，&lt;br  /&gt;
称之为“Salt States”。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;安装配置&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
参考 &lt;a href=&quot;http://docs.saltstack.cn/topics/tutorials/walkthrough.html&quot;&gt;http://docs.saltstack.cn/topics/tutorials/walkthrough.html&lt;/a&gt; &lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#36816;&amp;#34892;&lt;/span&gt;
:salt-key -L
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22914;&amp;#26524;&amp;#20986;&amp;#29616;&amp;#23458;&amp;#25143;&amp;#31471;&amp;#26426;&amp;#22120;&amp;#65292;&amp;#35828;&amp;#26126;&amp;#37197;&amp;#32622;&amp;#25104;&amp;#21151;&amp;#20102;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;使用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;salt state&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;p&gt;
SLS（代表SaLt State文件）只是结构化的数据。&lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#36816;&amp;#34892;&lt;/span&gt;
salt &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;*&#39;&lt;/span&gt; state.highstate
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20250;&amp;#35753;&amp;#25152;&amp;#26377;&amp;#30340;minion&amp;#21040;master&amp;#19978;&amp;#26469;&amp;#21462;&amp;#36208;&amp;#33258;&amp;#24049;&amp;#30340;SLS&amp;#23450;&amp;#20041;&lt;/span&gt;

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#27169;&amp;#25311;&amp;#36816;&amp;#34892;&lt;/span&gt;
salt &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;minion1.example.com&#39;&lt;/span&gt; state.highstate -v &lt;span style=&quot;color: #ffff00;&quot;&gt;test&lt;/span&gt;=True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;更多使用教程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;p&gt;
官方文档 &lt;a href=&quot;http://docs.saltstack.com/&quot;&gt;http://docs.saltstack.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;salt 配置文件结构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-6-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-1&quot;&gt;开启salt配置文件&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20462;&amp;#25913;/etc/salt/master&amp;#25991;&amp;#20214;&amp;#65292;&amp;#21435;&amp;#25481;&amp;#22914;&amp;#19979;&amp;#27880;&amp;#37322;&lt;/span&gt;
file_roots:
  base:
    - /srv/salt
  prod:
    - /srv/salt/prod
  dev:
    - /srv/salt/dev


&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22914;&amp;#26524;&amp;#38656;&amp;#35201;&amp;#20351;&amp;#29992;pillar&amp;#65292;&amp;#21435;&amp;#25481;&amp;#22914;&amp;#19979;&amp;#27880;&amp;#37322;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;pillar&amp;#21487;&amp;#20197;&amp;#20801;&amp;#35768;&amp;#20320;&amp;#23450;&amp;#20041;&amp;#19968;&amp;#20123;&amp;#21464;&amp;#37327;&amp;#65292;&amp;#25935;&amp;#24863;&amp;#25968;&amp;#25454;&amp;#65292;&amp;#20855;&amp;#20307;&amp;#21442;&amp;#32771; http://www.ituring.com.cn/article/42398&lt;/span&gt;
pillar_root:
  base:
    - /srv/pillar
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-2&quot;&gt;配置文件格式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;salt 的配置文件使用yaml格式，文件名后缀是.sls
&lt;/li&gt;
&lt;li&gt;关于yaml格式可以参考&lt;a href=&quot;http://www.yaml.org/spec/1.2/spec.html&quot;&gt;http://www.yaml.org/spec/1.2/spec.html&lt;/a&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;json是yaml的子集，yaml可以描述更多的东西
&lt;/li&gt;
&lt;li&gt;yaml的可读性要比json好，但是身为程序员的我觉得json的可读性更好。
&lt;/li&gt;
&lt;li&gt;学习yaml可以使用如下网站进行json和yaml的转换，&lt;a href=&quot;http://yamltojson.com/&quot;&gt;http://yamltojson.com/&lt;/a&gt; ，这样可以更好的理解yaml。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-3&quot;&gt;配置文件的目录结构&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-yaml&quot;&gt;tops.sls &amp;#65288;&amp;#25551;&amp;#36848;&amp;#25152;&amp;#26377;&amp;#23458;&amp;#25143;&amp;#31471;&amp;#38656;&amp;#35201;&amp;#25191;&amp;#34892;&amp;#30340;&amp;#29366;&amp;#24577;&amp;#65289;
prod &amp;#65288;&amp;#29983;&amp;#20135;&amp;#29615;&amp;#22659;&amp;#37197;&amp;#32622;&amp;#65289;
  -- core &amp;#65288;&amp;#22522;&amp;#26412;&amp;#36719;&amp;#20214;&amp;#23433;&amp;#35013;&amp;#65289;
     -- core.sls
  -- nginx
     -- nginx.sls
     -- nginx.conf
  -- vim
     -- vim.sls
     -- vim.local
  -- git
     -- git.sls
  -- web
     -- web.sls
  -- ...
     -- ...
dev &amp;#65288;&amp;#27979;&amp;#35797;&amp;#29615;&amp;#22659;&amp;#37197;&amp;#32622;&amp;#65289;
  -- ...
     -- ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-4&quot;&gt;配置文件解释&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-4&quot;&gt;
&lt;p&gt;
core.sls
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-yaml&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;/srv/salt/tops.sls&lt;/span&gt;
&lt;span style=&quot;color: #ffff00;&quot;&gt;prod&lt;/span&gt;:
  &lt;span style=&quot;color: #ffff00;&quot;&gt;&#39;*&#39;&lt;/span&gt;:   &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25152;&amp;#26377;minion&amp;#37117;&amp;#35201;&amp;#33719;&amp;#21462;core&amp;#29366;&amp;#24577;&lt;/span&gt;
    - core.core

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;/srv/salt/prod/core/core.sls&lt;/span&gt;
&lt;span style=&quot;color: #ffff00;&quot;&gt;mypkgs&lt;/span&gt;:
  &lt;span style=&quot;color: #ffff00;&quot;&gt;pkg.installed&lt;/span&gt;:
    - &lt;span style=&quot;color: #ffff00;&quot;&gt;pkgs&lt;/span&gt;:
      - gcc
      - python-dev
      - tmux
      - build-essential
      - g++
      - ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;p&gt;
saltstack 可以让你像编程一样去管理服务器，简单，高效，有趣。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://docs.saltstack.cn/topics/tutorials/walkthrough.html&quot;&gt;saltstack演练&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://docs.saltstack.cn/topics/tutorials/starting_states.html&quot;&gt;http://docs.saltstack.cn/topics/tutorials/starting_states.html&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://www.ituring.com.cn/article/42398&quot;&gt;http://www.ituring.com.cn/article/42398&lt;/a&gt; &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="saltstack" scheme="http://runforever.github.io/categories/saltstack/"/>
    
    
  </entry>
  
  <entry>
    <title>JustForFun读书感想</title>
    <link href="http://runforever.github.io/2014-06-15/2014-06-15-justforfun%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%83%B3/"/>
    <id>http://runforever.github.io/2014-06-15/2014-06-15-justforfun读书感想/</id>
    <published>2014-06-14T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:32.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">JustForFun读书感想</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来源</h3>
<div class="outline-text-3" id="text-1-1">
<p>
无意间发现了linus的自传，周末读了一下，感觉不错，记录一下感想。
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">摘录</h3>
<div class="outline-text-3" id="text-1-2">
<blockquote>
<p>
有三件事具有生命的意义：第一是生存，第二是社会秩序，第三是娱乐。<br>
一切事物都将从生存走向娱乐。<br>
Just for Fun <br>
</p>
</blockquote>

<blockquote>
<p>
我问他,如果见到比尔盖茨想说些什么,他却说连与后者见 一面的欲望都没有。<br>
“在我们俩之间没有什么关系可言,”他说,“他所做的事是世界上最优秀的,但我却丝
毫不感兴趣。我所做的事在世界上也可能是最优秀的,他也不感兴趣。我对他经商
提不出任何建议,他对我的技术也提不出任何看法。”
</p>
</blockquote>

<blockquote>
<p>
强制性服兵役制度的主要原因就是让芬兰男人们在喝啤酒时有话可聊,而且他们能活多久
就能聊多久。生个人都忍受了许多痛苦,那是共同的。他们都恨军队,但事后聊起来时却又
都格外开心。
</p>
</blockquote>

<blockquote>
<p>
每个人都会一本改变其一生的书籍,比如《圣经》、《资本论》、《星期二和莫瑞在一起》、
《我想 知道我在幼儿园里学到的一切》等等. <br>
把我推向生命高峰的是安德鲁?塔南鲍姆 (Andrew S. Tanenbaum)写的《操作系统:设计和实现》。
</p>
</blockquote>

<blockquote>
<p>
通过阅读和对 UNIX 的了解愈来愈深,我的热情高涨起来。<br>
说实话,我的热情从来没有低落过(我希望你在做某件事时也能说出同样的话)。<br>
</p>
</blockquote>

<blockquote>
<p>
UNIX的理念是越小越漂亮。一小堆简单基本的建筑材料,结合起来就能创造出无限的复杂表述。<br>
</p>
</blockquote>

<blockquote>
<p>
编程给人带来的最初兴奋的原因有部分是显而易见的,<br>
那就是:通过编程你可以支配一台计算机,你叫计算机做什么,它就做什么,永远准确无误,而且毫无怨言。
</p>
</blockquote>

<blockquote>
<p>
一个伟大的 编程者能凭借其聪明的头脑就知道答案是什么。他知道怎样写出漂亮的程序,知道怎样采用<br>
一种全新的但最终会被证明是正确的方法。
</p>
</blockquote>

<blockquote>
<p>
在软件世界中,一旦你已解决了最根本的问题,兴趣就容易很快地消失
</p>
</blockquote>

<blockquote>
<p>
Linux 所取得的许多成功,其实可以归结为我的缺点所致: <br>
1、 我很懒散。<br>
2、 我喜欢授权给其他人。<br>
</p>
</blockquote>

<blockquote>
<p>
我遇上了塔芙。她对我一生的影响甚至比《操作系统:设计与执行》一书对我的影响 还要大。<br>
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">总结：</h3>
<div class="outline-text-3" id="text-1-3">
<pre class="example">
1. 做自己想做的事。
2. just for fun
</pre>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;JustForFun读书感想&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来源&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
无意间发现了linus的自传，周末读了一下，感觉不错，记录一下感想。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;摘录&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
有三件事具有生命的意义：第一是生存，第二是社会秩序，第三是娱乐。&lt;br  /&gt;
一切事物都将从生存走向娱乐。&lt;br  /&gt;
Just for Fun &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
我问他,如果见到比尔盖茨想说些什么,他却说连与后者见 一面的欲望都没有。&lt;br  /&gt;
“在我们俩之间没有什么关系可言,”他说,“他所做的事是世界上最优秀的,但我却丝
毫不感兴趣。我所做的事在世界上也可能是最优秀的,他也不感兴趣。我对他经商
提不出任何建议,他对我的技术也提不出任何看法。”
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
强制性服兵役制度的主要原因就是让芬兰男人们在喝啤酒时有话可聊,而且他们能活多久
就能聊多久。生个人都忍受了许多痛苦,那是共同的。他们都恨军队,但事后聊起来时却又
都格外开心。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
每个人都会一本改变其一生的书籍,比如《圣经》、《资本论》、《星期二和莫瑞在一起》、
《我想 知道我在幼儿园里学到的一切》等等. &lt;br  /&gt;
把我推向生命高峰的是安德鲁?塔南鲍姆 (Andrew S. Tanenbaum)写的《操作系统:设计和实现》。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
通过阅读和对 UNIX 的了解愈来愈深,我的热情高涨起来。&lt;br  /&gt;
说实话,我的热情从来没有低落过(我希望你在做某件事时也能说出同样的话)。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
UNIX的理念是越小越漂亮。一小堆简单基本的建筑材料,结合起来就能创造出无限的复杂表述。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
编程给人带来的最初兴奋的原因有部分是显而易见的,&lt;br  /&gt;
那就是:通过编程你可以支配一台计算机,你叫计算机做什么,它就做什么,永远准确无误,而且毫无怨言。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
一个伟大的 编程者能凭借其聪明的头脑就知道答案是什么。他知道怎样写出漂亮的程序,知道怎样采用&lt;br  /&gt;
一种全新的但最终会被证明是正确的方法。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
在软件世界中,一旦你已解决了最根本的问题,兴趣就容易很快地消失
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
Linux 所取得的许多成功,其实可以归结为我的缺点所致: &lt;br  /&gt;
1、 我很懒散。&lt;br  /&gt;
2、 我喜欢授权给其他人。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
我遇上了塔芙。她对我一生的影响甚至比《操作系统:设计与执行》一书对我的影响 还要大。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;总结：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 做自己想做的事。
2. just for fun
&lt;/pre&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="life" scheme="http://runforever.github.io/categories/life/"/>
    
    
  </entry>
  
</feed>
