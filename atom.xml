<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Runforever</title>
  <subtitle>K.I.S.S</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-02T03:44:11.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>runforever</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迁移 Octopress 到 Hexo</title>
    <link href="http://yoursite.com/2016-11-02/2016-11-02-%E8%BF%81%E7%A7%BB-octopress-%E5%88%B0-hexo/"/>
    <id>http://yoursite.com/2016-11-02/2016-11-02-迁移-octopress-到-hexo/</id>
    <published>2016-11-01T16:00:00.000Z</published>
    <updated>2016-11-02T03:44:11.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">不折腾会死</h2>
<div class="outline-text-2" id="text-1">
<p>
前几天更新了 <a href="http:runforever.github.io/2014-07-19/2014-07-19-python-mixin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="external">Python Mixin 学习笔记</a> 这篇文章，文章中有一张图，于是乎想添加 fancybox 插件来预览图片，
原本以为是非常简单的一件事，结果上 google 找，果然没有找到，同时发现博客的分页有 bug，再看看 Octopress 的
最后更新时间，看到这些茫茫多的问题，于是便有了迁移 Octopress 到 Hexo 的念头。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">迁移前的调研</h2>
<div class="outline-text-2" id="text-2">
<p>
google 找了一些迁移的文章，发现迁移没有想象中难，于是开始准备。
</p>

<p>
我的需求：
</p>
<ol class="org-ol">
<li>可以继续使用 Emacs 上的 <a href="https://github.com/yoshinari-nomura/org-octopress" target="_blank" rel="external">org-octopress</a> 插件写博客。
</li>
<li>可以兼容我之前写的文章，代码高亮必须漂亮。
</li>
<li>一定要有 fancybox。
</li>
<li>没有分页等乱七八糟的明显 bug。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">迁移后的优点</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>generate 速度大幅提高。
</li>
<li>Hexo 更新快，插件多，没有很明显的 bug。
</li>
<li>完美兼容我的写作习惯。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">迁移过程</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>安装配置 Hexo。
</li>
<li>迁移 <code>source/_posts</code> 里的博客源文件。
</li>
<li>重新配置 org-octopress。
</li>
<li>选择一个兼容 Octopress 文章的主题。
</li>
<li>调整 Hexo 和主题的配置。
</li>
<li>管理博客代码管理。
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">安装配置 Hexo</h3>
<div class="outline-text-3" id="text-4-1">
<p>
安装过程可以参考 <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">官方文档</a>，值得注意的地方是：
</p>
<ol class="org-ol">
<li>推荐使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a> 安装 node。
</li>
<li>遇到 <code>Error with DTrace</code> 的解决方案是 <code>npm install hexo --no-optional</code> 参考 <a href="https:hexo.io/docs/troubleshooting.html#Error-with-DTrace-Mac-OS-X" target="_blank" rel="external">hexo troubleshooting</a>。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">迁移 <code>source/_posts</code> 里的博客源文件</h3>
<div class="outline-text-3" id="text-4-2">
<p>
Hexo 有 <a href="https://hexo.io/zh-cn/docs/migration.html#Octopress" target="_blank" rel="external">迁移文档</a>教程，我的迁移过程：
</p>
<div class="org-src-container">

<pre class="src src-bash"># 创建文件夹
mkdir blog
cd blog

# 初始化
hexo init

# 安装依赖
npm install

# 解决 Error with DTrace 问题
npm install hexo --no-optional

# 查看目录
tree -L 1

.
├── _config.yml
├── db.json
├── node_modules
├── org
├── package.json
├── public
├── scaffolds
├── source
└── themes

# 复制 Octopress source/_posts 的文件到当前的 source/_posts
cp /your_octopress_path/source_posts/* source/_posts
</pre>
</div>

<p>
首次配置 _config.yml
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ffff00;">title</span>: Runforever
<span style="color: #ffff00;">subtitle</span>: K.I.S.S
<span style="color: #ffff00;">description</span>: &#25105;&#21482;&#26159;&#22312;&#20889;&#19968;&#20010;&#25925;&#20107;
<span style="color: #ffff00;">author</span>: runforever

<span style="color: #ff0000;">...</span>

<span style="color: #ffff00;">permalink</span>: :year-:month-:day/:title/  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35201;&#21644; Octopress &#30340; permalink &#20445;&#25345;&#19968;&#33268;</span>
</pre>
</div>

<p>
生成博客
</p>
<div class="org-src-container">

<pre class="src src-bash">hexo generate
hexo server --watch

# 可以简写
hexo g
hexo s --watch
</pre>
</div>
<p>
这些步骤没有什么难度，很快就搞定了。
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">重新配置 org-octopress</h3>
<div class="outline-text-3" id="text-4-3">
<p>
我的配置如下：
</p>
<div class="org-src-container">

<pre class="src src-lisp">(require 'org-octopress)
(setq org-octopress-directory-top       <span style="color: #00ff00;">"/your-blog-path/source"</span>)
(setq org-octopress-directory-posts     <span style="color: #00ff00;">"/your-blog-path/source/_posts"</span>)
(setq org-octopress-directory-org-top   <span style="color: #00ff00;">"/your-blog-path/source"</span>)
(setq org-octopress-directory-org-posts <span style="color: #00ff00;">"/your-blog-path/org/source"</span>)
(setq org-octopress-setup-file          <span style="color: #00ff00;">"/your-blog-path/org/setupfile.org"</span>)
</pre>
</div>

<p>
在 blog 文件夹下新建了 org 目录，里面有 org 的配置文件 setupfile.org 和放博客源文件的 source 目录，
将 octopress 的 org 博客源文件 copy 到 org/source 即可。
</p>

<p>
配置好后，重启 Emacs，修改了 <a href="http://runforever.github.io/2016-02-03/2016-02-03-ansible%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/" target="_blank" rel="external">Ansible 使用入门</a> 文章来测试效果，没有问题。
</p>
</div>
</div>

<div id="outline-container-sec-4-4" class="outline-3">
<h3 id="sec-4-4">选择一个兼容 Octopress 文章的主题</h3>
<div class="outline-text-3" id="text-4-4">
<p>
这个过程是整个迁移过程中最耗时的，<a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo Theme</a> 这里面满屏幕的博客主题，经过测试 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a> 是对
迁移的兼容性最好的，别的主题要么样式错乱，要么代码高亮有问题，整个测试过程让我崩溃的想要放弃。
</p>

<p>
next 主题 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">安装文档</a>，过程：
</p>
<div class="org-src-container">

<pre class="src src-bash">git clone https://github.com/iissnan/hexo-theme-next.git theme/next
</pre>
</div>

<p>
修改 blog/_config.yml 中 theme 配置
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">Extensions</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">Plugins: http://hexo.io/plugins/</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">Themes: http://hexo.io/themes/</span>
<span style="color: #ffff00;">theme</span>: next
</pre>
</div>

<p>
测试
</p>
<div class="org-src-container">

<pre class="src src-bash">hexo g
hexo s
</pre>
</div>

<p>
当我看到显示效果后，我决定就是它了，接下来就是配置的微调了。
</p>
</div>
</div>

<div id="outline-container-sec-4-5" class="outline-3">
<h3 id="sec-4-5">调整 Hexo 和主题的配置</h3>
<div class="outline-text-3" id="text-4-5">
<p>
blog/_config.yml 的调整
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ffff00;">title</span>: Runforever
<span style="color: #ffff00;">subtitle</span>: K.I.S.S
<span style="color: #ffff00;">description</span>: &#25105;&#21482;&#26159;&#22312;&#20889;&#19968;&#20010;&#25925;&#20107;
<span style="color: #ffff00;">author</span>: runforever
<span style="color: #ffff00;">language</span>: zh-Hans   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35821;&#35328;</span>
<span style="color: #ffff00;">timezone</span>: Asia/Shanghai  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22320;&#21306;</span>
<span style="color: #ffff00;">avatar</span>: http://cdn.defcoding.com/0227c20b4bab4ef28f08f9ae3c6aa875.jpg   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22836;&#20687;&#37197;&#32622;</span>

<span style="color: #ffff00;">permalink</span>: :year-:month-:day/:title/  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21338;&#23458;&#38142;&#25509;</span>
</pre>
</div>

<p>
theme/next/_config.yml 的调整
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ffff00;">keywords</span>: <span style="color: #00ff00;">"&#25105;&#21482;&#26159;&#22312;&#20889;&#25925;&#20107;"</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35774;&#32622;&#20195;&#30721;&#32972;&#26223;</span>
<span style="color: #ff0000;">#    </span><span style="color: #ff0000;">normal | night | night eighties | night blue | night bright</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">https://github.com/chriskempson/tomorrow-theme</span>
<span style="color: #ffff00;">highlight_theme</span>: night

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20391;&#36793;&#26639;&#33756;&#21333;&#23637;&#31034;</span>
<span style="color: #ffff00;">menu</span>:
  <span style="color: #ffff00;">home</span>: /
  <span style="color: #ffff00;">categories</span>: /categories
  <span style="color: #ffff00;">archives</span>: /archives

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25105;&#36873;&#29992;&#30340;&#20027;&#39064;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">Schemes</span>
<span style="color: #ff0000;">#</span><span style="color: #ff0000;">scheme: Muse</span>
<span style="color: #ffff00;">scheme</span>: Mist
<span style="color: #ff0000;">#</span><span style="color: #ff0000;">scheme: Pisces</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23637;&#31034;&#30340;&#38142;&#25509;</span>
<span style="color: #ffff00;">social</span>:
  <span style="color: #ffff00;">GitHub</span>: https://github.com/runforever
  <span style="color: #ffff00;">Bitbucket</span>: https://bitbucket.com/runforever
  <span style="color: #ffff00;">&#25552; Issue</span>: https://github.com/runforever/runforever.github.com/issues/new

<span style="color: #ffff00;">sidebar</span>:
  <span style="color: #ffff00;">position</span>: left
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">Sidebar Display, </span><span style="color: #ffff00;">available value</span><span style="color: #ff0000;">:</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- post    expand on posts automatically. Default.</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- always  expand for all pages automatically</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- hide    expand only when click on the sidebar toggle icon.</span>
  <span style="color: #ff0000;">#  </span><span style="color: #ff0000;">- remove  Totally remove sidebar including sidebar toggler.</span>
  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35774;&#32622;&#20391;&#36793;&#26639;&#24635;&#26159;&#26174;&#31034;</span>
  <span style="color: #ffff00;">display</span>: always
</pre>
</div>
<p>
经过测试，代码高亮主题为 <code>night</code> 的时候兼容效果最好，预览后，终于看到曙光了，
不过侧边栏分类页面无法显示，查看<a href="http:theme-next.iissnan.com/theme-settings.html#categories-page" target="_blank" rel="external"> 主题配置</a> 文档找到了解决方案。
<img src="http:cdn.defcoding.com/93E66597-DCA7-4F7D-AA13-FA70CE6ACB2C.png" alt="93E66597-DCA7-4F7D-AA13-FA70CE6ACB2C.png">
</p>


<div class="figure">
<p><img src="http:cdn.defcoding.com/F089DF58-F049-431A-88DD-C3744954318C.png" alt="F089DF58-F049-431A-88DD-C3744954318C.png">
</p>
</div>

<p>
现在只剩下如何去管理博客代码这个问题了。
</p>
</div>
</div>

<div id="outline-container-sec-4-6" class="outline-3">
<h3 id="sec-4-6">博客代码管理</h3>
<div class="outline-text-3" id="text-4-6">
<p>
我依然使用 GitHub Pages 来发布博客，根据<a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="external"> 官方部署文档</a> 来做就行。
</p>
<div class="org-src-container">

<pre class="src src-bash"># hexo-deployer-git
npm install hexo-deployer-git --save
</pre>
</div>

<p>
修改 blog/_config.yml
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">Deployment</span>
<span style="color: #ff0000;">## </span><span style="color: #ff0000;">Docs: http://hexo.io/docs/deployment.html</span>
<span style="color: #ffff00;">deploy</span>:
  <span style="color: #ffff00;">type</span>: git
  <span style="color: #ffff00;">repo</span>: https://github.com/runforever/runforever.github.com.git
</pre>
</div>

<p>
测试发布
</p>
<div class="org-src-container">

<pre class="src src-bash">hexo g
hexo deploy
</pre>
</div>

<p>
发布没有问题，博客代码的版本控制我延续 Octopress 的策略使用 master 和 source 两个分支，
master 用于博客发布，source 用于源代码管理。
</p>
</div>

<div id="outline-container-sec-4-6-1" class="outline-4">
<h4 id="sec-4-6-1">提交博客源代码</h4>
<div class="outline-text-4" id="text-4-6-1">
<p>
将 theme/ 文件夹添加的 blog/.gitignore
</p>
<div class="org-src-container">

<pre class="src src-bash">.DS_Store
Thumbs.db
db.json
*.log
node_modules/
public/
.deploy*/
themes/
</pre>
</div>

<div class="org-src-container">

<pre class="src src-bash">git add .
git commit -a -m "init hexo blog"

# 修改 master 分支名为 source
git branch -m source

# 强制 push
git push -f
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4-6-2" class="outline-4">
<h4 id="sec-4-6-2">提交博客主题</h4>
<div class="outline-text-4" id="text-4-6-2">
<p>
首先，GitHub 上 fork 一份 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a> 到自己的仓库。
然后，开始提交代码。
</p>
<div class="org-src-container">

<pre class="src src-bash">cd theme/next
git remote set-url origin https://your-fork-repo.git
git commit -a -m 'change config'
git push
</pre>
</div>
<p>
打完收工，整个迁移过程已经完成，博客效果正如你现在看到的。
</p>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">感谢</h2>
<div class="outline-text-2" id="text-5">
<ol class="org-ol">
<li>Hexo 提供静态博客框架。
</li>
<li>next 提供的博客主题。
</li>
</ol>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;不折腾会死&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
前几天更新了 &lt;a href=&quot;http:runforever.github.io/2014-07-19/2014-07-19-python-mixin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/&quot;&gt;Python Mixin 学习笔记&lt;/a&gt; 这篇文章，文章中有一张图，于是乎想添加 fancybox 插件来预览图片，
原本以为是非常简单的一件事，结果上 google 找，果然没有找到，同时发现博客的分页有 bug，再看看 Octopress 的
最后更新时间，看到这些茫茫多的问题，于是便有了迁移 Octopress 到 Hexo 的念头。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;迁移前的调研&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
google 找了一些迁移的文章，发现迁移没有想象中难，于是开始准备。
&lt;/p&gt;

&lt;p&gt;
我的需求：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;可以继续使用 Emacs 上的 &lt;a href=&quot;https://github.com/yoshinari-nomura/org-octopress&quot;&gt;org-octopress&lt;/a&gt; 插件写博客。
&lt;/li&gt;
&lt;li&gt;可以兼容我之前写的文章，代码高亮必须漂亮。
&lt;/li&gt;
&lt;li&gt;一定要有 fancybox。
&lt;/li&gt;
&lt;li&gt;没有分页等乱七八糟的明显 bug。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;迁移后的优点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;generate 速度大幅提高。
&lt;/li&gt;
&lt;li&gt;Hexo 更新快，插件多，没有很明显的 bug。
&lt;/li&gt;
&lt;li&gt;完美兼容我的写作习惯。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;迁移过程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;安装配置 Hexo。
&lt;/li&gt;
&lt;li&gt;迁移 &lt;code&gt;source/_posts&lt;/code&gt; 里的博客源文件。
&lt;/li&gt;
&lt;li&gt;重新配置 org-octopress。
&lt;/li&gt;
&lt;li&gt;选择一个兼容 Octopress 文章的主题。
&lt;/li&gt;
&lt;li&gt;调整 Hexo 和主题的配置。
&lt;/li&gt;
&lt;li&gt;管理博客代码管理。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="blog" scheme="http://yoursite.com/categories/blog/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建私有 Docker Registry</title>
    <link href="http://yoursite.com/2016-07-06/2016-07-06-%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89docker-registry/"/>
    <id>http://yoursite.com/2016-07-06/2016-07-06-如何搭建私有docker-registry/</id>
    <published>2016-07-05T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>
为了团队的其他同学可以方便的更新开发环境到本地，我们决定搭建私有的 Docker Registry。<br>
不使用公共服务的原因：
</p>
<ol class="org-ol">
<li>Docker Hub 在国外，同步超级慢。
</li>
<li>DaoCloud 的私有 image 需要收费，对于我们小团队来说不太友好。
</li>
</ol>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">搭建步骤</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>环境准备。
</li>
<li>配置 LetsEncrypt 证书。
</li>
<li>安装 Docker Registry。
</li>
<li>配置 Nginx。
</li>
<li>后续工作。
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">环境准备</h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>Linux 服务器一台。
</li>
<li>域名。
</li>
<li>已经安装上 Docker 和 Nginx。
</li>
</ol>

<p>
注意：开发环境和服务器的 Docker 都先升级到最新的版本，否则有可能出现未知的失败。 <br>
</p>

<p>
目录结构 <br>
<img src="http://i4.piimg.com/567571/dfa3f652e14eda27.png" alt="dfa3f652e14eda27.png">
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">配置 LetsEncrypt 证书</h3>
<div class="outline-text-3" id="text-1-2">
<p>
由于私有 Docker Registry 的安全机制，需要使用 Https，<a href="https://docs.docker.com/registry/deploying/#/running-a-domain-registry" target="_blank" rel="external">原因</a>
</p>

<p>
配置 LetsEncrypt 证书
使用 <a href="https://certbot.eff.org/#ubuntutrusty-nginx" target="_blank" rel="external">certbot</a>
</p>
<div class="org-src-container">

<pre class="src src-bash">wget https://dl.eff.org/certbot-auto
chmod a+x certbot-auto
$ ./certbot-auto

./path/to/certbot-auto certonly --standalone -d registry.yourdomain.com
</pre>
</div>

<p>
<b>安装的时候必须先关闭 Nginx 服务否则无法生成证书</b> <br>
<b>LetsEncrypt 只支持二级域名，而且有域名个数限制，提前想好私有 Docker Registry 的二级域名</b>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">安装 Docker Registry</h3>
<div class="outline-text-3" id="text-1-3">
<p>
使用 daocloud 上的 docker registry 公共镜像
</p>
<div class="org-src-container">

<pre class="src src-bash">docker pull daocloud.io/library/registry:2
</pre>
</div>

<p>
将 LetsEncrypt 证书复制到 /certs
</p>
<div class="org-src-container">

<pre class="src src-bash">cp /etc/letsencrypt/live/yourdomain/fullchain.pem certs/
cp /etc/letsencrypt/live/youdomain/privkey.pem certs/
</pre>
</div>

<p>
生成认证文件
</p>
<div class="org-src-container">

<pre class="src src-bash">docker run --entrypoint htpasswd daocloud.io/library/registry:2.4.1 -Bbn username password &gt; auth/htpasswd
</pre>
</div>

<p>
配置 docker-compose.yml
</p>
<div class="org-src-container">

<pre class="src src-bash"># docker-compose.yml
registry:
  restart: always
  image: daocloud.io/library/registry:2
  ports:
    - 5000:5000
  environment:
    # Example use Lensencrypt cert
    REGISTRY_HTTP_TLS_CERTIFICATE: /certs/fullchain.pem
    REGISTRY_HTTP_TLS_KEY: /certs/privkey.pem
    REGISTRY_AUTH: htpasswd
    REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
    REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
  volumes:
    # Replace those three path
    - /path/registry:/var/lib/registry
    - /path/certs:/certs
    - /path/auth:/auth
</pre>
</div>

<p>
运行
</p>
<div class="org-src-container">

<pre class="src src-bash">docker-compose up
</pre>
</div>

<p>
测试浏览器访问
</p>
<div class="org-src-container">

<pre class="src src-bash">https://yourdomain.xxx:5000/v2
</pre>
</div>

<p>
测试push
</p>
<div class="org-src-container">

<pre class="src src-bash">docker login yourdomain.xxx:5000
# 输入之前配置好的用户名密码

docker pull redis
docker tag redis yourdomain.xxx:5000/redis
docker push yourdomain.xxx:5000/redis
</pre>
</div>

<p>
成功的效果 <br>
<img src="http://i1.piimg.com/567571/5860b16d5aa8d17a.jpg" alt="5860b16d5aa8d17a.jpg">
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">配置 Nginx 做反向代理</h3>
<div class="outline-text-3" id="text-1-4">
<p>
配置文件 docker_nginx.conf
</p>
<div class="org-src-container">

<pre class="src src-bash"># this is necessary for us to be able to disable request buffering in all cases
proxy_http_version 1.1;

server {
    listen 443 ssl;
    server_name registry.youdomain.com;

    # SSL
    # Replace with your cert
    ssl_certificate /path/certs/fullchain.pem;
    ssl_certificate_key /path/certs/privkey.pem;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
    chunked_transfer_encoding on;

    location /v1/ {
      return 404;
    }

    location /v2/ {
      proxy_pass https://127.0.0.1:5000;
      proxy_set_header Host $http_host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_buffering off;

    }
}

server {
    listen 80;
    # Replace with your domain
    server_name yourdomain;
    rewrite ^/(.*) https://$server_name/$1 permanent;
}
</pre>
</div>

<p>
重新加载 Nginx 配置
</p>
<div class="org-src-container">

<pre class="src src-bash"># 软链接
ln -s /path/docker_nginx.conf /etc/nginx/site-enabled

# 测试
nginx -t

# 重新加载
nginx -s reload
</pre>
</div>

<p>
浏览器测试
</p>
<div class="org-src-container">

<pre class="src src-bash">https://yourdomain.xxx/v2

# 需要输入之前配置好的用户名和密码
</pre>
</div>

<p>
push 测试
</p>
<div class="org-src-container">

<pre class="src src-bash">docker login yourdomain.xxx
# 输入之前配置好的用户名密码
docker pull redis
docker tag redis yourdomain.xxx/redis
docker push yourdomain.xxx/redis
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">后续工作</h3>
<div class="outline-text-3" id="text-1-5">
<p>
由于 LetsEncrypt 证书 3 个月会自动过期，需要使用脚本做自动更新，配合 crontab 两个月更新一次
</p>

<p>
renew_cert.sh
</p>
<div class="org-src-container">

<pre class="src src-bash">#!/bin/bash

# renew cert
/letsencrypt/certbot-auto renew --pre-hook "service nginx stop" --post-hook "service nginx start"

# backup cert
cp /yourpath/docker-registry/certs/fullchain.pem /yourpath/docker-registry/certs/fullchain.pem.bak
cp /yourpath/docker-registry/certs/privkey.pem /yourpath/docker-registry/certs/privkey.pem.bak

# change cert
cp /etc/letsencrypt/live/yourdomain/fullchain.pem /yourpath/docker-registry/certs/fullchain.pem
cp /etc/letsencrypt/live/yourdomain/privkey.pem /yourpath/docker-registry/certs/privkey.pem
</pre>
</div>

<p>
运行
</p>
<div class="org-src-container">

<pre class="src src-bash">sh renew_cert.sh
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">参考</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://www.jianshu.com/p/141855241f2d" target="_blank" rel="external">http://www.jianshu.com/p/141855241f2d</a>
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">感谢</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://www.daocloud.io" target="_blank" rel="external">https://www.daocloud.io</a> 提供国内的公共镜像服务
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;
为了团队的其他同学可以方便的更新开发环境到本地，我们决定搭建私有的 Docker Registry。&lt;br  /&gt;
不使用公共服务的原因：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Docker Hub 在国外，同步超级慢。
&lt;/li&gt;
&lt;li&gt;DaoCloud 的私有 image 需要收费，对于我们小团队来说不太友好。
&lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;搭建步骤&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;环境准备。
&lt;/li&gt;
&lt;li&gt;配置 LetsEncrypt 证书。
&lt;/li&gt;
&lt;li&gt;安装 Docker Registry。
&lt;/li&gt;
&lt;li&gt;配置 Nginx。
&lt;/li&gt;
&lt;li&gt;后续工作。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Django项目如何使用Docker搭建环境</title>
    <link href="http://yoursite.com/2016-06-28/2016-06-28-django%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8docker%E5%81%9A%E7%8E%AF%E5%A2%83%E7%BB%9F%E4%B8%80/"/>
    <id>http://yoursite.com/2016-06-28/2016-06-28-django项目使用docker做环境统一/</id>
    <published>2016-06-27T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:28.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">背景</h2>
<div class="outline-text-2" id="text-1">
<p>
公司的项目前后端是分离的，前端使用React作为技术栈，后端使用Django做完web开发框架，
前端的同学调试代码的时候需要启动后端的项目，后端的项目往往需要一堆环境依赖，例如数据库，
Redis缓存，Python的库，每次搭建环境更新环境对于前端的同学来说都是一场噩梦，比如安装数据库，
编译Python的库等等都会遇到很多问题，为了提高效率，更好的统一开发环境，所以使用了Docker来做
这件事。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">达到的效果</h2>
<div class="outline-text-2" id="text-2">

<div class="figure">
<p><img src="http://i1.piimg.com/567571/b91020a400c2106d.png" alt="b91020a400c2106d.png">
</p>
</div>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">流程</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>安装Docker环境
</li>
<li>编写开发环境需要的Dockerfile
</li>
<li>编写docker-compose.yml定义好启动环境需要的依赖
</li>
<li>启动环境
</li>
<li>搭建私有的Docker Registry
</li>
<li>将自定义的docker image push到私有的registry
</li>
<li>常用操作
</li>
</ol>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">安装Docker环境</h3>
<div class="outline-text-3" id="text-3-1">
<p>
这个不多说，大家参照官网安装就行
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">自定义开发环境所需要的Dockerfile</h3>
<div class="outline-text-3" id="text-3-2">
<div class="org-src-container">

<pre class="src src-bash"># 使用国内的源加快速度
FROM daocloud.io/library/python:2.7.11
ENV PYTHONUNBUFFERED 1
RUN sed -i 's/http:\/\/httpredir\.debian\.org\/debian\//http:\/\/mirrors\.163\.com\/debian\//g' /etc/apt/sources.list
RUN apt-get update &amp;&amp; apt-get install -y gcc g++ python-software-properties libpq-dev git libmysqlclient-dev build-essential
RUN mkdir /code
WORKDIR /code
ADD . /code/
# 使用豆瓣源加快速度
RUN pip install -r requirements/dev.txt -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">编写docker-compose.yml</h3>
<div class="outline-text-3" id="text-3-3">
<div class="org-src-container">

<pre class="src src-bash"># mysql
# username admin password root
mysql:
  image: daocloud.io/library/mysql:5.5.44
  environment:
    - MYSQL_ROOT_PASSWORD=root
    - MYSQL_DATABASE=owl
    - MYSQL_ALLOW_EMPTY_PASSWORD=yes
  volumes:
    - ./conf:/etc/mysql/conf.d

# redis
# password root
redis:
  image: redis:latest
  command: redis-server --requirepass root

# mongo
mongo:
  image: daocloud.io/library/mongo:3.2.7

# web
web:
  image: burnish/owl:latest
  command: python manage.py runserver 0.0.0.0:8888
  volumes:
    - .:/code
  ports:
    - "8888:8888"
  environment:
    - PYTHONPATH=/code
  links:
    - mysql:mysql
    - redis:redis
    - mongo:mongo
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">启动环境</h3>
<div class="outline-text-3" id="text-3-4">
<div class="org-src-container">

<pre class="src src-bash">docker-compose up
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5">搭建私有的Docker Registry</h3>
<div class="outline-text-3" id="text-3-5">
<p>
这个过程内容较长，不在这篇文章描述，后续会专门写一篇关于如何搭建环境的教程,
搭建好的私有docker registry域名是burnsh
</p>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6">将build完成的docker image push到私有registry</h3>
<div class="outline-text-3" id="text-3-6">
<div class="org-src-container">

<pre class="src src-bash"># 登陆
docker login burnish

# 打tag
docker tag image burnish/owl:latest

# push
docker push burnish/owl:latest
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7">常用操作和场景</h3>
<div class="outline-text-3" id="text-3-7">
</div><div id="outline-container-sec-3-7-1" class="outline-4">
<h4 id="sec-3-7-1">1. 初始化项目和app</h4>
<div class="outline-text-4" id="text-3-7-1">
<div class="org-src-container">

<pre class="src src-bash"># 进入docker
docker-compose web run --rm /bin/bash
django-admin.py startapp app_xxx

# 命令解释
# 进入contanier中，新建app
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7-2" class="outline-4">
<h4 id="sec-3-7-2">2. 数据库生成migration和migrate</h4>
<div class="outline-text-4" id="text-3-7-2">
<div class="org-src-container">

<pre class="src src-bash">docker-compose web run --rm python manage.py makemigrations
docker-compose web run --rm python manage.py migrate
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7-3" class="outline-4">
<h4 id="sec-3-7-3">3. 安装新的python 包</h4>
<div class="outline-text-4" id="text-3-7-3">
<p>
安装
</p>
<div class="org-src-container">

<pre class="src src-bash">docker-compose web run pip install xxxx
docker commit container_id -a "runforever" -c "add new xxxx python lib" burnish/owl:latest
docker push burnish/owl:latest
</pre>
</div>

<p>
更新
</p>
<div class="org-src-container">

<pre class="src src-bash">docker pull burnish/owl:latest
docker-compose up
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-7-4" class="outline-4">
<h4 id="sec-3-7-4">4. pdb调试</h4>
<div class="outline-text-4" id="text-3-7-4">
<div class="org-src-container">

<pre class="src src-bash">docker-compose run --service-ports --rm web
</pre>
</div>
</div>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;背景&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
公司的项目前后端是分离的，前端使用React作为技术栈，后端使用Django做完web开发框架，
前端的同学调试代码的时候需要启动后端的项目，后端的项目往往需要一堆环境依赖，例如数据库，
Redis缓存，Python的库，每次搭建环境更新环境对于前端的同学来说都是一场噩梦，比如安装数据库，
编译Python的库等等都会遇到很多问题，为了提高效率，更好的统一开发环境，所以使用了Docker来做
这件事。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;达到的效果&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/b91020a400c2106d.png&quot; alt=&quot;b91020a400c2106d.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
      <category term="Django" scheme="http://yoursite.com/categories/Docker/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Ansible 使用入门</title>
    <link href="http://yoursite.com/2016-02-03/2016-02-03-ansible%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2016-02-03/2016-02-03-ansible使用入门/</id>
    <published>2016-02-02T16:00:00.000Z</published>
    <updated>2016-11-01T07:45:39.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">背景</h2>
<div class="outline-text-2" id="text-1">
<p>
由于经常有部署新服务器的需求，服务器部署过程中的配置和基础环境的安装很多都是重复性的
工作，所以使用配置管理工具将这些重复性的工作控制起来最合适不过了，之前有写过一篇用<a href="https://docs.saltstack.com/en/latest/" target="_blank" rel="external"> SaltStack</a>
做自动化运维的文章<a href="http://runforever.github.io/2014-06-21/2014-06-21-salt%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/" target="_blank" rel="external"> saltstack 使用笔记</a>，这次换用 <a href="http://docs.ansible.com" target="_blank" rel="external">Ansible</a> ，顺便比较一下两种工具。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">选用 Ansible 的原因</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>轻量级
</li>
<li>通过 SSH 下发命令
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">如何开始</h2>
<div class="outline-text-2" id="text-3">
<p>
目录结构
</p>
<div class="org-src-container">

<pre class="src src-bash">.
--hosts    # 服务器地址和组，以下的是配置
├── config
│   ├── kernel
│   ├── tmux
│   └── vim
├── deploy
│   └── project1
│   └── project2
├── docker
│   └── fig_config
│       ├── common
│       ├── mongo
│       ├── mysql
│       ├── nginx
│       ├── rabbitmq
│       └── redis
├── env
├── iptables
├── nginx
└── ssh
</pre>
</div>

<p>
首先配置好 hosts 文件, 格式:
</p>
<div class="org-src-container">

<pre class="src src-ini">; ansible hosts file user .ini format
; group
; [test]
; ip address

; service ip address
; 127.0.0.1
</pre>
</div>

<p>
将上面的注释去掉，IP 地址改成服务器地址，并且在服务器上加上本地的 ssh 公钥，执行下面命令:
</p>
<div class="org-src-container">

<pre class="src src-bash"># 导入环境变量
export ANSIBLE_HOSTS=/hosts_file_direcory/hosts

# 测试服务器连通
ansible all -m ping
# 如果没有问题服务器应该会返回 pong
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">配置文件格式</h2>
<div class="outline-text-2" id="text-4">
<p>
连接服务器没有问题的话，就可以使用写 playbook（配置管理文件）来管理服务器了。
</p>

<p>
Ansible 的配置文件使用的 YAML 格式，例子如下：
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">-------- </span><span style="color: #ffff00;">basic env</span><span style="color: #ff0000;">: init-env.yml -------------</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">install basic env tool task</span>
- <span style="color: #ffff00;">name</span>: install pkg
  <span style="color: #ffff00;">apt</span>: pkg= state=present update_cache=yes
  <span style="color: #ffff00;">with_items</span>:
    - gcc
    - g++
    - curl
    - tmux
    - python-dev
    - python-setuptools
    - python-pip
    - htop
    - zsh
    - software-properties-common
    - python-software-properties
    - libpq-dev
    - build-essential
    - libmysqlclient-dev
    - libevent-dev
    - git
    - wget
    - mc

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">install python lib task</span>
- <span style="color: #ffff00;">name</span>: install python pkg
  <span style="color: #ffff00;">pip</span>: name=
  <span style="color: #ffff00;">with_items</span>:
    - fabric
    - virtualenvwrapper
    - ipython
    - ipdb
    - supervisor
    - fig

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">add user task</span>
- <span style="color: #ffff00;">name</span>: add deploy user
  <span style="color: #ffff00;">user</span>: name=deploy shell=/bin/zsh append=yes

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">----- </span><span style="color: #ffff00;">web basic env</span><span style="color: #ff0000;">: web_env.yml -------</span>
<span style="color: #ff0000;">---</span>
- <span style="color: #ffff00;">hosts</span>: your_web_hosts
  <span style="color: #ffff00;">remote_user</span>: root

  <span style="color: #ffff00;">tasks</span>:
    - <span style="color: #ffff00;">include</span>: init-env.yml
    - <span style="color: #ffff00;">name</span>: init web dir
      <span style="color: #ffff00;">file</span>: path=/data owner=root group=root state=directory mode=0755
</pre>
</div>

<p>
运行
</p>
<div class="org-src-container">

<pre class="src src-bash"># 对服务器执行初始化命令
ansible-playbook init_env.yml
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">常用命令</h2>
<div class="outline-text-2" id="text-5">
<div class="org-src-container">

<pre class="src src-bash"># 对所用服务器 web_hosts 执行初始化命令
ansible-playbook web_env.yml

# 指定服务器
ansible-playbook web_env.yml --limit web_hosts

# 调试（Dry Run）
ansible-playbook web_env.yml --check
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">整理出来的开源库参考</h2>
<div class="outline-text-2" id="text-6">
<p>
<a href="https://github.com/runforever/Auto" target="_blank" rel="external">Auto</a>
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">总结</h2>
<div class="outline-text-2" id="text-7">
<p>
Ansible 对于我来说最大的有点就是使用 ssh 来执行命令，而 SaltStack 则需要在机器上安装客户端
其次 Ansible 由于设计的时候就考虑了监控和图形化，可视化做的不错，如果大家在考虑选择 Ansible
还是 SaltStack，个人推荐使用 Ansible
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;背景&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
由于经常有部署新服务器的需求，服务器部署过程中的配置和基础环境的安装很多都是重复性的
工作，所以使用配置管理工具将这些重复性的工作控制起来最合适不过了，之前有写过一篇用&lt;a href=&quot;https://docs.saltstack.com/en/latest/&quot;&gt; SaltStack&lt;/a&gt;
做自动化运维的文章&lt;a href=&quot;http://runforever.github.io/2014-06-21/2014-06-21-salt%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/&quot;&gt; saltstack 使用笔记&lt;/a&gt;，这次换用 &lt;a href=&quot;http://docs.ansible.com&quot;&gt;Ansible&lt;/a&gt; ，顺便比较一下两种工具。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;选用 Ansible 的原因&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;轻量级
&lt;/li&gt;
&lt;li&gt;通过 SSH 下发命令
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Ansible" scheme="http://yoursite.com/categories/Ansible/"/>
    
    
  </entry>
  
  <entry>
    <title>uwsgi部署Django服务的坑</title>
    <link href="http://yoursite.com/2016-01-31/2016-01-31-django-uwsgi%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2016-01-31/2016-01-31-django-uwsgi部署/</id>
    <published>2016-01-30T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:29.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">uwsgi部署Django服务</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">部署Django的方式</h3>
<div class="outline-text-3" id="text-1-1">
<ul class="org-ul">
<li>gunicorn + Nginx
</li>
<li>uwsgi + Nginx
</li>
</ul>
</div>

<div id="outline-container-sec-1-1-1" class="outline-4">
<h4 id="sec-1-1-1">gunicorn + Nginx</h4>
<div class="outline-text-4" id="text-1-1-1">
<p>
<a href="http://gunicorn.org" target="_blank" rel="external">http://gunicorn.org</a> 最大的好处就是部署简单，如果没有特殊要求，推荐使用这种方式部署Python Web程序
</p>
</div>
</div>

<div id="outline-container-sec-1-1-2" class="outline-4">
<h4 id="sec-1-1-2">uwsgi + Nginx</h4>
<div class="outline-text-4" id="text-1-1-2">
<p>
uwsgi 相对 gunicorn来说配置选项相对复杂，但是uwsgi是支持websocket的，出于这个原因选择uwsgi来部署django程序
</p>
</div>

<ul class="org-ul"><li>问题1：uwsgi的默认监听进程的数量100<br><div class="outline-text-5" id="text-1-1-2-1">
<p>
解决： 之前由于只知道启动uwsgi worker的数量，不管怎么调worker的数量，并发都很低，<br>
配置listen参数解决，根据服务器配置和访问来决定，目前我开的是20000
</p>
</div>
</li>

<li>问题2：supervisor没有办法优雅的重启uwsgi worker，导致服务器资源被重启的uwsgi进程占满<br><div class="outline-text-5" id="text-1-1-2-2">
<p>
解决：配置no-orphans参数
</p>
</div>
</li>

<li>配置范例<br><div class="outline-text-5" id="text-1-1-2-3">
<div class="org-src-container">

<pre class="src src-ini">master = true
processes = 8
thread = 100
thread-stacksize = 512
stats = 127.0.0.1:9194
buffer-size = 65535
enable-threads = true
http-timeout = 60
socket-timeout = 60
chmod-socket = 666
harakiri = 60
max-requests = 20000
listen = 20000
no-orphans
</pre>
</div>

<p>
<a id="more"></a>
</p>
</div>
</li></ul>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;uwsgi部署Django服务&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;部署Django的方式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;gunicorn + Nginx
&lt;/li&gt;
&lt;li&gt;uwsgi + Nginx
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-1&quot;&gt;gunicorn + Nginx&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-1&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;http://gunicorn.org&quot;&gt;http://gunicorn.org&lt;/a&gt; 最大的好处就是部署简单，如果没有特殊要求，推荐使用这种方式部署Python Web程序
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-1-2&quot;&gt;uwsgi + Nginx&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-1-2&quot;&gt;
&lt;p&gt;
uwsgi 相对 gunicorn来说配置选项相对复杂，但是uwsgi是支持websocket的，出于这个原因选择uwsgi来部署django程序
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;问题1：uwsgi的默认监听进程的数量100&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-2-1&quot;&gt;
&lt;p&gt;
解决： 之前由于只知道启动uwsgi worker的数量，不管怎么调worker的数量，并发都很低，&lt;br  /&gt;
配置listen参数解决，根据服务器配置和访问来决定，目前我开的是20000
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;问题2：supervisor没有办法优雅的重启uwsgi worker，导致服务器资源被重启的uwsgi进程占满&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-2-2&quot;&gt;
&lt;p&gt;
解决：配置no-orphans参数
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;配置范例&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-1-2-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-ini&quot;&gt;master = true
processes = 8
thread = 100
thread-stacksize = 512
stats = 127.0.0.1:9194
buffer-size = 65535
enable-threads = true
http-timeout = 60
socket-timeout = 60
chmod-socket = 666
harakiri = 60
max-requests = 20000
listen = 20000
no-orphans
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="uwsgi" scheme="http://yoursite.com/categories/uwsgi/"/>
    
      <category term="django" scheme="http://yoursite.com/categories/uwsgi/django/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular.js入门参考</title>
    <link href="http://yoursite.com/2014-12-20/2014-12-20-angular.js%E5%85%A5%E9%97%A8%E5%8F%82%E8%80%83/"/>
    <id>http://yoursite.com/2014-12-20/2014-12-20-angular.js入门参考/</id>
    <published>2014-12-19T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:30.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Angular.js 入门参考</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来源</h3>
<div class="outline-text-3" id="text-1-1">
<p>
很早听说这个前端MV*框架，最近公司的一个新项目未来可能需要支持手机App，所以决定<br>
使用API驱动的设计，也就是网站后端只提供API，逻辑处理由前端实现，也就是Angular这些<br>
前端框架要做的事情了，以后如果上手机App的话也可以使用同一套API，不用单独为手机App<br>
开发新的API。
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">前端MV*是什么？</h3>
<div class="outline-text-3" id="text-1-2">
<p>
MV* 可以是MVC(Model, View, Controller)模式，也可以是MVVM(Model, View, ViewModel)<br>
你可以把Angular用成你想要的模式，而MVVM正是我项目里面想要的东西，Model和UI的双向绑定<br>
也就是Model变化UI相应的改变，UI改变Model也跟着改变。
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">Angular的使用场景和优缺点</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">使用场景</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
Single Page Application(单页面应用)，即MVVM模式发挥优势的地方。
</p>
</div>
</div>

<div id="outline-container-sec-1-3-2" class="outline-4">
<h4 id="sec-1-3-2">优点</h4>
<div class="outline-text-4" id="text-1-3-2">
<ul class="org-ul">
<li>使Javascript开发变得模块化。
</li>
<li>保证开发人员的代码风格统一。
</li>
<li>资源相对较多，上手相对简单。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-3-3" class="outline-4">
<h4 id="sec-1-3-3">缺点</h4>
<div class="outline-text-4" id="text-1-3-3">
<ul class="org-ul">
<li>调试很困难
</li>
</ul>
</div>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">Angular 基本概念</h3>
<div class="outline-text-3" id="text-1-4">
<ol class="org-ol">
<li>Directive(指令)
</li>
<li>Scope(变量空间)
</li>
<li>Service(服务)
</li>
<li>Controller(控制器)
</li>
<li>Module(模块)
</li>
</ol>
</div>

<div id="outline-container-sec-1-4-1" class="outline-4">
<h4 id="sec-1-4-1">Directive</h4>
<div class="outline-text-4" id="text-1-4-1">
<p>
Angular指令，如ng-app, ng-controller, ng-model, ng-repeat等等。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-2" class="outline-4">
<h4 id="sec-1-4-2">Scope</h4>
<div class="outline-text-4" id="text-1-4-2">
<p>
Controller可以访问的变量空间。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-3" class="outline-4">
<h4 id="sec-1-4-3">Service</h4>
<div class="outline-text-4" id="text-1-4-3">
<p>
服务，如Http，window，element等服务，可以自定义公用的服务，达到模块化管理的目的。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-4" class="outline-4">
<h4 id="sec-1-4-4">Controller</h4>
<div class="outline-text-4" id="text-1-4-4">
<p>
View的控制模块。
</p>
</div>
</div>

<div id="outline-container-sec-1-4-5" class="outline-4">
<h4 id="sec-1-4-5">Module</h4>
<div class="outline-text-4" id="text-1-4-5">
<p>
模块，要使用Angular必须先初始化模块
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">实例</h3>
<div class="outline-text-3" id="text-1-5">
<p>
index.html
</p>
<div class="org-src-container">

<pre class="src src-html">&lt;<span style="color: #00ffff; font-weight: bold;">!doctype</span> html&gt;
&lt;<span style="color: #0000ff; font-weight: bold;">html</span> <span style="color: #ffff00;">lang</span>=<span style="color: #00ff00;">"en"</span>&gt;
    &lt;<span style="color: #0000ff; font-weight: bold;">head</span>&gt;
        &lt;<span style="color: #0000ff; font-weight: bold;">meta</span> <span style="color: #ffff00;">charset</span>=<span style="color: #00ff00;">"UTF-8"</span>/&gt;
        &lt;<span style="color: #0000ff; font-weight: bold;">title</span>&gt;<span style="font-weight: bold; text-decoration: underline;">Document</span>&lt;/<span style="color: #0000ff; font-weight: bold;">title</span>&gt;
    &lt;/<span style="color: #0000ff; font-weight: bold;">head</span>&gt;
    <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">&#20351;&#29992;directive&#21021;&#22987;&#21270;app </span><span style="color: #ff0000;">--&gt;</span>
    &lt;<span style="color: #0000ff; font-weight: bold;">body</span> <span style="color: #ffff00;">ng-app</span>=<span style="color: #00ff00;">"app"</span>&gt;
        <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">&#28155;&#21152;controller </span><span style="color: #ff0000;">--&gt;</span>
        &lt;<span style="color: #0000ff; font-weight: bold;">div</span> <span style="color: #ffff00;">ng-controller</span>=<span style="color: #00ff00;">"loginCtrl"</span>&gt;
             <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">&#20351;&#29992;ng-model&#32465;&#23450;username&#21644;input, &#20004;&#32773;&#21482;&#35201;&#26377;&#19968;&#20010;&#25913;&#21464;&#37117;&#20250;&#36827;&#34892;&#30456;&#24212;&#30340;&#25913;&#21464; </span><span style="color: #ff0000;">--&gt;</span>
             &lt;<span style="color: #0000ff; font-weight: bold;">input</span> <span style="color: #ffff00;">ng-model</span>=<span style="color: #00ff00;">"username"</span> <span style="color: #ffff00;">name</span>=<span style="color: #00ff00;">"username"</span> <span style="color: #ffff00;">type</span>=<span style="color: #00ff00;">"text"</span>/&gt;
             &lt;<span style="color: #0000ff; font-weight: bold;">input</span> <span style="color: #ffff00;">ng-model</span>=<span style="color: #00ff00;">"password"</span> <span style="color: #ffff00;">name</span>=<span style="color: #00ff00;">"username"</span> <span style="color: #ffff00;">type</span>=<span style="color: #00ff00;">"password"</span>/&gt;
             <span style="color: #ff0000;">&lt;!-- </span><span style="color: #ff0000;">controller&#37324;&#38754;&#28155;&#21152;&#30456;&#24212;&#30340;&#20989;&#25968; </span><span style="color: #ff0000;">--&gt;</span>
             &lt;<span style="color: #0000ff; font-weight: bold;">a</span> href <span style="color: #ffff00;">ng-click</span>=<span style="color: #00ff00;">"login()"</span>&gt;&#30331;&#24405;&lt;/<span style="color: #0000ff; font-weight: bold;">a</span>&gt;
        &lt;/<span style="color: #0000ff; font-weight: bold;">div</span>&gt;
    &lt;/<span style="color: #0000ff; font-weight: bold;">body</span>&gt;
    &lt;<span style="color: #0000ff; font-weight: bold;">script</span> <span style="color: #ffff00;">src</span>=<span style="color: #00ff00;">"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.7/angular.min.js"</span>&gt;&lt;/<span style="color: #0000ff; font-weight: bold;">script</span>&gt;
&lt;/<span style="color: #0000ff; font-weight: bold;">html</span>&gt;
</pre>
</div>

<p>
app.js
</p>
<div class="org-src-container">

<pre class="src src-javascript">(<span style="color: #00ffff; font-weight: bold;">function</span>() {
    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#21021;&#22987;&#21270;App</span>
    <span style="color: #00ffff; font-weight: bold;">var</span> <span style="color: #ffff00;">app</span> = angular.module(<span style="color: #00ff00;">'app'</span>, []);

    <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#28155;&#21152;Controller</span>
    app.controller(
        <span style="color: #00ff00;">'loginCtrl'</span>,
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20381;&#36182;&#27880;&#20837;&#20351;&#29992;&#26381;&#21153; $scope &#21644; $http</span>
        [<span style="color: #00ff00;">'$scope'</span>, <span style="color: #00ff00;">'$http'</span>, <span style="color: #00ffff; font-weight: bold;">function</span>(<span style="color: #ffff00;">$scope</span>, <span style="color: #ffff00;">$http</span>) {
            <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#28155;&#21152;&#30331;&#24405;&#22788;&#29702;&#20989;&#25968;</span>
            $scope.login = <span style="color: #00ffff; font-weight: bold;">function</span>() {
                $http.post(<span style="color: #00ff00;">'/login/'</span>, {username: $scope.username, password: $scope.password}).success(<span style="color: #00ffff; font-weight: bold;">function</span>(<span style="color: #ffff00;">data</span>) {
                    alert(data.msg);
                });
            }
        }]
    );
})();
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">总结</h3>
<div class="outline-text-3" id="text-1-6">
<p>
本篇提供angular的入门，后续会有一些使用心得，总体来说angular上手还是很简单的。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Angular.js 入门参考&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来源&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
很早听说这个前端MV*框架，最近公司的一个新项目未来可能需要支持手机App，所以决定&lt;br  /&gt;
使用API驱动的设计，也就是网站后端只提供API，逻辑处理由前端实现，也就是Angular这些&lt;br  /&gt;
前端框架要做的事情了，以后如果上手机App的话也可以使用同一套API，不用单独为手机App&lt;br  /&gt;
开发新的API。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;前端MV*是什么？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
MV* 可以是MVC(Model, View, Controller)模式，也可以是MVVM(Model, View, ViewModel)&lt;br  /&gt;
你可以把Angular用成你想要的模式，而MVVM正是我项目里面想要的东西，Model和UI的双向绑定&lt;br  /&gt;
也就是Model变化UI相应的改变，UI改变Model也跟着改变。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Angular的使用场景和优缺点&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;使用场景&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
Single Page Application(单页面应用)，即MVVM模式发挥优势的地方。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;优点&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;使Javascript开发变得模块化。
&lt;/li&gt;
&lt;li&gt;保证开发人员的代码风格统一。
&lt;/li&gt;
&lt;li&gt;资源相对较多，上手相对简单。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-3&quot;&gt;缺点&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;调试很困难
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;Angular 基本概念&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Directive(指令)
&lt;/li&gt;
&lt;li&gt;Scope(变量空间)
&lt;/li&gt;
&lt;li&gt;Service(服务)
&lt;/li&gt;
&lt;li&gt;Controller(控制器)
&lt;/li&gt;
&lt;li&gt;Module(模块)
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;Directive&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;p&gt;
Angular指令，如ng-app, ng-controller, ng-model, ng-repeat等等。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;Scope&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;p&gt;
Controller可以访问的变量空间。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-3&quot;&gt;Service&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-3&quot;&gt;
&lt;p&gt;
服务，如Http，window，element等服务，可以自定义公用的服务，达到模块化管理的目的。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-4&quot;&gt;Controller&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-4&quot;&gt;
&lt;p&gt;
View的控制模块。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-5&quot;&gt;Module&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-5&quot;&gt;
&lt;p&gt;
模块，要使用Angular必须先初始化模块
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;实例&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
index.html
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-html&quot;&gt;&amp;lt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;!doctype&lt;/span&gt; html&amp;gt;
&amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;html&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;lang&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;en&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;head&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;meta&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;charset&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;/&amp;gt;
        &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;Document&lt;/span&gt;&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;title&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;head&lt;/span&gt;&amp;gt;
    &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20351;&amp;#29992;directive&amp;#21021;&amp;#22987;&amp;#21270;app &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;body&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-app&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;app&quot;&lt;/span&gt;&amp;gt;
        &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#28155;&amp;#21152;controller &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
        &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;div&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-controller&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;loginCtrl&quot;&lt;/span&gt;&amp;gt;
             &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20351;&amp;#29992;ng-model&amp;#32465;&amp;#23450;username&amp;#21644;input, &amp;#20004;&amp;#32773;&amp;#21482;&amp;#35201;&amp;#26377;&amp;#19968;&amp;#20010;&amp;#25913;&amp;#21464;&amp;#37117;&amp;#20250;&amp;#36827;&amp;#34892;&amp;#30456;&amp;#24212;&amp;#30340;&amp;#25913;&amp;#21464; &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
             &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;input&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-model&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;text&quot;&lt;/span&gt;/&amp;gt;
             &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;input&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-model&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;password&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;name&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;type&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;password&quot;&lt;/span&gt;/&amp;gt;
             &lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;lt;!-- &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;controller&amp;#37324;&amp;#38754;&amp;#28155;&amp;#21152;&amp;#30456;&amp;#24212;&amp;#30340;&amp;#20989;&amp;#25968; &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;--&amp;gt;&lt;/span&gt;
             &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;a&lt;/span&gt; href &lt;span style=&quot;color: #ffff00;&quot;&gt;ng-click&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;login()&quot;&lt;/span&gt;&amp;gt;&amp;#30331;&amp;#24405;&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;a&lt;/span&gt;&amp;gt;
        &amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;script&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;src&lt;/span&gt;=&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.7/angular.min.js&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;script&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;html&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
app.js
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-javascript&quot;&gt;(&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;() {
    &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#21021;&amp;#22987;&amp;#21270;App&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #ffff00;&quot;&gt;app&lt;/span&gt; = angular.module(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;app&#39;&lt;/span&gt;, []);

    &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#28155;&amp;#21152;Controller&lt;/span&gt;
    app.controller(
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;loginCtrl&#39;&lt;/span&gt;,
        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20381;&amp;#36182;&amp;#27880;&amp;#20837;&amp;#20351;&amp;#29992;&amp;#26381;&amp;#21153; $scope &amp;#21644; $http&lt;/span&gt;
        [&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;$scope&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;$http&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #ffff00;&quot;&gt;$scope&lt;/span&gt;, &lt;span style=&quot;color: #ffff00;&quot;&gt;$http&lt;/span&gt;) {
            &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#28155;&amp;#21152;&amp;#30331;&amp;#24405;&amp;#22788;&amp;#29702;&amp;#20989;&amp;#25968;&lt;/span&gt;
            $scope.login = &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;() {
                $http.post(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;/login/&#39;&lt;/span&gt;, {username: $scope.username, password: $scope.password}).success(&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #ffff00;&quot;&gt;data&lt;/span&gt;) {
                    alert(data.msg);
                });
            }
        }]
    );
})();
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;p&gt;
本篇提供angular的入门，后续会有一些使用心得，总体来说angular上手还是很简单的。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Angular" scheme="http://yoursite.com/categories/Angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Python使用支付宝接口</title>
    <link href="http://yoursite.com/2014-10-02/2014-10-02-%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2014-10-02/2014-10-02-支付宝接口使用/</id>
    <published>2014-10-01T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:31.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Python使用支付宝接口</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来源</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<i>www.pinbot.me</i>需要支持线上支付，先从支持支付宝开始。
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">使用支付宝什么接口</h3>
<div class="outline-text-3" id="text-1-2">
<p>
支付宝接口有很多，而线上支付使用的是即时到账接口，这里有<a href="https:b.alipay.com/order/productDetail.htm?productId=2012111200373124&tabId=1#ps-tabinfo-hash" target="_blank" rel="external">官方介绍</a>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">如何使用该接口</h3>
<div class="outline-text-3" id="text-1-3">
<p>
实现代码参考了<a href="https:github.com/yefei/python-alipay" target="_blank" rel="external">python-alipay</a>
</p>
</div>

<div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">获取PID和32位KEY</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
只能是企业才能申请该接口的使用，实名认证通过后，你只要拿到PID和KEY <br>
就行了。
</p>
</div>
</div>

<div id="outline-container-sec-1-3-2" class="outline-4">
<h4 id="sec-1-3-2">使用该接口</h4>
<div class="outline-text-4" id="text-1-3-2">
</div><ul class="org-ul"><li>使用该接口需要实现两个工具函数:<br><div class="outline-text-5" id="text-1-3-2-1">
<ol class="org-ol">
<li>构造支付宝的支付链接，如果链接请求成功会生存支付宝的支付页面。
</li>
<li>支付成功后需要验证支付宝返回的结果是否正确，如果正确就做相应的订单更新。
</li>
</ol>
</div>
</li>

<li>实现构造支付链接<br><div class="outline-text-5" id="text-1-3-2-2">
<p>
注意事项：
</p>
<ol class="org-ol">
<li>传给支付宝的url参数需要字母顺序排序，且不能含有空格，空值。
</li>
<li>验证，使用MD5验证，构造除了sign和sign_type的url参数和key做md5。
</li>
</ol>
</div>
</li>

<li>实现验证支付宝返回数据的验证<br><div class="outline-text-5" id="text-1-3-2-3">
<p>
验证支付宝请求return_url和notify_url的数据 <br>
注意事项
</p>
<ol class="org-ol">
<li>支付宝的notify_id在一分钟后会实效。
</li>
<li>支付宝异步请求如果没有收到success的话会间隔发请求，直到获取到success，或者超过24小时。
</li>
</ol>

<p>
代码：
一个配置类AlipayConfig <br>
一个工具类AlipayUtils <br>
</p>

<p>
AlipayConfig代码：
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>


<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">AlipayConfig</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #ffff00;">ALIPAY_PID</span> = <span style="color: #00ff00;">'your apply pid'</span>
    <span style="color: #ffff00;">ALIPAY_KEY</span> = <span style="color: #00ff00;">'your apply key'</span>

    <span style="color: #ffff00;">ALIPAY_SELLER_EMAIL</span> = <span style="color: #00ff00;">'your apply email'</span>

    <span style="color: #ffff00;">ALIPAY_INPUT_CHARSET</span> = <span style="color: #00ff00;">'utf-8'</span>
    <span style="color: #ffff00;">ALIPAY_SIGN_TYPE</span> = <span style="color: #00ff00;">'MD5'</span>

    <span style="color: #ffff00;">ALIPAY_GATEWAY</span> = <span style="color: #00ff00;">'https://mapi.alipay.com/gateway.do?'</span>
    <span style="color: #ffff00;">ALIPAY_NOTIFY_GATEWAY</span> = <span style="color: #00ff00;">'https://mapi.alipay.com/gateway.do?service=notify_verify&amp;'</span>

    <span style="color: #ffff00;">ALIPAY_RETURN_URL</span> = <span style="color: #00ff00;">'your return url'</span>
</pre>
</div>

<p>
AlipayUtils代码：
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #00ffff; font-weight: bold;">import</span> urllib
<span style="color: #00ffff; font-weight: bold;">import</span> requests
<span style="color: #00ffff; font-weight: bold;">from</span> hashlib <span style="color: #00ffff; font-weight: bold;">import</span> md5
<span style="color: #00ffff; font-weight: bold;">from</span> collections <span style="color: #00ffff; font-weight: bold;">import</span> OrderedDict

<span style="color: #00ffff; font-weight: bold;">from</span> alipay_config <span style="color: #00ffff; font-weight: bold;">import</span> AlipayConfig

<span style="color: #00ffff; font-weight: bold;">from</span> Pinbot.settings <span style="color: #00ffff; font-weight: bold;">import</span> DEBUG


<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">AlipayUtils</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">_convert_str_encode</span>(cls, pay_option, encoding=<span style="color: #00ff00;">'utf-8'</span>):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">       &#23558;unicode&#32534;&#30721;&#36716;&#25442;&#25104;utf-8&#32534;&#30721;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #00ffff; font-weight: bold;">for</span> key, value <span style="color: #00ffff; font-weight: bold;">in</span> pay_option.iteritems():
            <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #00ffff; font-weight: bold;">not</span> value:
                <span style="color: #00ffff; font-weight: bold;">continue</span>
            <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #0000ff; font-weight: bold;">isinstance</span>(value, <span style="color: #0000ff; font-weight: bold;">unicode</span>):
                <span style="color: #ffff00;">pay_option</span>[key] = value.encode(encoding)
        <span style="color: #00ffff; font-weight: bold;">return</span> pay_option

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">_get_url_params</span>(cls, pay_option):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#20351;&#29992;OrderedDict&#23558;url&#21442;&#25968;&#25353;&#23383;&#27597;&#39034;&#24207;&#25490;&#24207;</span>
<span style="color: #00ff00;">        &#21435;&#38500;&#31354;&#30340;&#23383;&#27573;&#21644;sign, sign_type&#23383;&#27573;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ffff00;">url_params</span> = OrderedDict(
            <span style="color: #0000ff; font-weight: bold;">sorted</span>(
                [
                    item <span style="color: #00ffff; font-weight: bold;">for</span> item <span style="color: #00ffff; font-weight: bold;">in</span> pay_option.iteritems()
                    <span style="color: #00ffff; font-weight: bold;">if</span> item[1] <span style="color: #00ffff; font-weight: bold;">and</span> item[0] <span style="color: #00ffff; font-weight: bold;">not</span> <span style="color: #00ffff; font-weight: bold;">in</span> (<span style="color: #00ff00;">'sign'</span>, <span style="color: #00ff00;">'sign_type'</span>)
                ],
                key=<span style="color: #00ffff; font-weight: bold;">lambda</span> x: x[0]
            )
        )
        <span style="color: #00ffff; font-weight: bold;">return</span> url_params

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">_get_sign</span>(cls, url_params):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        md5&#21152;&#23494;url&#21442;&#25968;&#21644;key</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ffff00;">key</span> = AlipayConfig.ALIPAY_KEY
        <span style="color: #ffff00;">prestr</span> = <span style="color: #00ff00;">'&amp;'</span>.join(<span style="color: #00ff00;">'%s=%s'</span> % item <span style="color: #00ffff; font-weight: bold;">for</span> item <span style="color: #00ffff; font-weight: bold;">in</span> url_params.iteritems())
        <span style="color: #ffff00;">sign</span> = md5(prestr + key).hexdigest()
        <span style="color: #00ffff; font-weight: bold;">return</span> sign

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">submit_order_url</span>(cls, order):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#26500;&#36896;&#25903;&#20184;&#23453;&#21363;&#26102;&#21040;&#36134;&#38142;&#25509;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ffff00;">pay_option</span> = <span style="color: #0000ff; font-weight: bold;">dict</span>([
            (<span style="color: #00ff00;">'service'</span>, <span style="color: #00ff00;">'create_direct_pay_by_user'</span>),
            (<span style="color: #00ff00;">'payment_type'</span>, <span style="color: #00ff00;">'1'</span>),

            (<span style="color: #00ff00;">'_input_charset'</span>, AlipayConfig.ALIPAY_INPUT_CHARSET),
            (<span style="color: #00ff00;">'partner'</span>, AlipayConfig.ALIPAY_PID),
            (<span style="color: #00ff00;">'seller_email'</span>, AlipayConfig.ALIPAY_SELLER_EMAIL),
            (<span style="color: #00ff00;">'return_url'</span>, AlipayConfig.ALIPAY_RETURN_URL),
            (<span style="color: #00ff00;">'notify_url'</span>, <span style="color: #00ff00;">''</span>),
            (<span style="color: #00ff00;">'show_url'</span>, <span style="color: #00ff00;">''</span>),

            (<span style="color: #00ff00;">'out_trade_no'</span>, order.order_id),
            (<span style="color: #00ff00;">'subject'</span>, order.subject_name()),
            (<span style="color: #00ff00;">'body'</span>, order.order_detail()),
            (<span style="color: #00ff00;">'total_fee'</span>, order.total_price <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #00ffff; font-weight: bold;">not</span> DEBUG <span style="color: #00ffff; font-weight: bold;">else</span> 0.1),
        ])

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23558;&#25903;&#20184;&#21442;&#25968;&#30340;&#32534;&#30721;&#32479;&#19968;&#25104;utf-8</span>
        <span style="color: #ffff00;">pay_option</span> = cls._convert_str_encode(
            pay_option,
            encoding=AlipayConfig.ALIPAY_INPUT_CHARSET,
        )

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25490;&#24207;&#21435;&#38500;&#31354;&#20540;&#21644;sign,sign_type&#36873;&#39033;</span>
        <span style="color: #ffff00;">url_params</span> = cls._get_url_params(pay_option)

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21152;&#23494;&#21644;&#21152;&#23494;&#31867;&#22411;</span>
        <span style="color: #ffff00;">url_params</span>[<span style="color: #00ff00;">'sign'</span>] = cls._get_sign(url_params)
        <span style="color: #ffff00;">url_params</span>[<span style="color: #00ff00;">'sign_type'</span>] = AlipayConfig.ALIPAY_SIGN_TYPE

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#29983;&#25104;&#25903;&#20184;url</span>
        <span style="color: #ffff00;">submit_url</span> = AlipayConfig.ALIPAY_GATEWAY + urllib.urlencode(url_params)

        <span style="color: #00ffff; font-weight: bold;">return</span> submit_url

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">verify_alipay_notify</span>(cls, url_data):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#39564;&#35777;&#25903;&#20184;&#23453;&#25903;&#20184;&#25104;&#21151;&#30340;&#36820;&#22238;&#20449;&#24687;</span>
<span style="color: #00ff00;">        &#20004;&#20010;&#27493;&#39588;&#65306;</span>
<span style="color: #00ff00;">           1. &#39564;&#35777;&#31614;&#21517;</span>
<span style="color: #00ff00;">           2. &#26597;&#35810;&#27492;notify&#26159;&#21542;&#22312;&#25903;&#20184;&#23453;&#20013;&#26377;&#25928;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#39564;&#35777;&#31614;&#21517;</span>
        <span style="color: #ffff00;">alipay_sign</span> = url_data.get(<span style="color: #00ff00;">'sign'</span>)
        <span style="color: #ffff00;">alipay_url_params</span> = cls._get_url_params(url_data)
        <span style="color: #ffff00;">sign</span> = cls._get_sign(alipay_url_params)

        <span style="color: #00ffff; font-weight: bold;">if</span> sign != alipay_sign:
            <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #ff00ff;">False</span>

        <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#35810;&#20449;&#24687;&#26159;&#21542;&#22312;&#25903;&#20184;&#23453;&#20013;&#26377;&#25928;</span>
        <span style="color: #ffff00;">check_params</span> = {
            <span style="color: #00ff00;">'partner'</span>: AlipayConfig.ALIPAY_PID,
            <span style="color: #00ff00;">'notify_id'</span>: url_data.get(<span style="color: #00ff00;">'notify_id'</span>)
        }
        <span style="color: #ffff00;">result</span> = requests.get(
            AlipayConfig.ALIPAY_NOTIFY_GATEWAY,
            params=check_params
        )
        <span style="color: #00ffff; font-weight: bold;">if</span> result.text.lower().strip() == <span style="color: #00ff00;">'true'</span>:
            <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #ff00ff;">True</span>

        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #ff00ff;">False</span>
</pre>
</div>

<p>
一些运行结果:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#29983;&#25104;&#25903;&#20184;&#30340;url</span>
https://mapi.alipay.com/gateway.do?<span style="color: #ffff00;">_input_charset</span>=utf-8&amp;<span style="color: #ffff00;">body</span>=hehehehhe&amp;<span style="color: #ffff00;">out_trade_no</span>=20140928110814-8cd3
&amp;<span style="color: #ffff00;">partner</span>=xxxxx&amp;<span style="color: #ffff00;">payment_type</span>=1&amp;<span style="color: #ffff00;">paymenthod</span>=directPay&amp;<span style="color: #ffff00;">seller_email</span>=xxx%40xxx.com&amp;
<span style="color: #ffff00;">service</span>=create_direct_pay_by_user&amp;<span style="color: #ffff00;">subject</span>=hehehe&amp;<span style="color: #ffff00;">total_fee</span>=2599&amp;<span style="color: #ffff00;">sign</span>=603b228b7e6663d217dc44bdc12a5106&amp;
<span style="color: #ffff00;">sign_type</span>=MD5

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25903;&#20184;&#23453;&#36820;&#22238;&#25968;&#25454;&#30340;url</span>
127.0.0.1:8000/payment/alipay_return/?<span style="color: #ffff00;">body</span>=&#22871;&#39184;B&amp;<span style="color: #ffff00;">buyer_email</span>=xxxx%40163.com&amp;<span style="color: #ffff00;">buyer_id</span>=xxxxxxx&amp;
<span style="color: #ffff00;">exterface</span>=create_direct_pay_by_user&amp;<span style="color: #ffff00;">is_success</span>=T&amp;
<span style="color: #ffff00;">notify_id</span>=RqPnCoPT3K9%252Fvwbh3InQ9JC%252Ft24wOkxbC3d3NsqzK9v6KWsnZ2vWqks9o41CFgeCkbai&amp;
<span style="color: #ffff00;">notify_time</span>=2014-09-30+14%3A21%3A22&amp;<span style="color: #ffff00;">notify_type</span>=trade_status_sync&amp;<span style="color: #ffff00;">out_trade_no</span>=20140928110814-8cd4&amp;
<span style="color: #ffff00;">payment_type</span>=1&amp;<span style="color: #ffff00;">seller_email</span>=xxx%40xxxx.com&amp;<span style="color: #ffff00;">seller_id</span>=xxxx&amp;<span style="color: #ffff00;">subject</span>=&#22871;&#39184;B&amp;<span style="color: #ffff00;">total_fee</span>=0.10&amp;
<span style="color: #ffff00;">trade_no</span>=2014093000715684&amp;<span style="color: #ffff00;">trade_status</span>=TRADE_SUCCESS&amp;<span style="color: #ffff00;">sign</span>=de81410e5fba18e8d97823a31c0724ac&amp;<span style="color: #ffff00;">sign_type</span>=MD5
</pre>
</div>
</div>
</li></ul>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">总结：</h3>
<div class="outline-text-3" id="text-1-4">
<p>
支付宝的文档确实有点看不懂，上面放了两个运行结果，希望大家做起来有点方向，知道构造什么，验证什么，<br>
感谢github上<a href="https:github.com/yefei/python-alipay" target="_blank" rel="external">这个repo</a>, 给了我很大的帮助。
</p>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Python使用支付宝接口&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来源&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
&lt;i&gt;www.pinbot.me&lt;/i&gt;需要支持线上支付，先从支持支付宝开始。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;使用支付宝什么接口&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
支付宝接口有很多，而线上支付使用的是即时到账接口，这里有&lt;a href=&quot;https:b.alipay.com/order/productDetail.htm?productId=2012111200373124&amp;tabId=1#ps-tabinfo-hash&quot;&gt;官方介绍&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;如何使用该接口&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
实现代码参考了&lt;a href=&quot;https:github.com/yefei/python-alipay&quot;&gt;python-alipay&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;获取PID和32位KEY&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
只能是企业才能申请该接口的使用，实名认证通过后，你只要拿到PID和KEY &lt;br  /&gt;
就行了。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;使用该接口&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;/div&gt;&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;使用该接口需要实现两个工具函数:&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;构造支付宝的支付链接，如果链接请求成功会生存支付宝的支付页面。
&lt;/li&gt;
&lt;li&gt;支付成功后需要验证支付宝返回的结果是否正确，如果正确就做相应的订单更新。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;实现构造支付链接&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-2&quot;&gt;
&lt;p&gt;
注意事项：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;传给支付宝的url参数需要字母顺序排序，且不能含有空格，空值。
&lt;/li&gt;
&lt;li&gt;验证，使用MD5验证，构造除了sign和sign_type的url参数和key做md5。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;实现验证支付宝返回数据的验证&lt;br  /&gt;&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-3-2-3&quot;&gt;
&lt;p&gt;
验证支付宝请求return_url和notify_url的数据 &lt;br  /&gt;
注意事项
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;支付宝的notify_id在一分钟后会实效。
&lt;/li&gt;
&lt;li&gt;支付宝异步请求如果没有收到success的话会间隔发请求，直到获取到success，或者超过24小时。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
代码：
一个配置类AlipayConfig &lt;br  /&gt;
一个工具类AlipayUtils &lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
AlipayConfig代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;coding: utf-8&lt;/span&gt;


&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;AlipayConfig&lt;/span&gt;(&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;object&lt;/span&gt;):

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_PID&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your apply pid&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_KEY&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your apply key&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_SELLER_EMAIL&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your apply email&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_INPUT_CHARSET&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_SIGN_TYPE&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;MD5&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_GATEWAY&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;https://mapi.alipay.com/gateway.do?&#39;&lt;/span&gt;
    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_NOTIFY_GATEWAY&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;https://mapi.alipay.com/gateway.do?service=notify_verify&amp;amp;&#39;&lt;/span&gt;

    &lt;span style=&quot;color: #ffff00;&quot;&gt;ALIPAY_RETURN_URL&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;your return url&#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
AlipayUtils代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;coding: utf-8&lt;/span&gt;

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; urllib
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; requests
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; hashlib &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; md5
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; collections &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; OrderedDict

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; alipay_config &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; AlipayConfig

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;from&lt;/span&gt; Pinbot.settings &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; DEBUG


&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;AlipayUtils&lt;/span&gt;(&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;object&lt;/span&gt;):

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;_convert_str_encode&lt;/span&gt;(cls, pay_option, encoding=&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;       &amp;#23558;unicode&amp;#32534;&amp;#30721;&amp;#36716;&amp;#25442;&amp;#25104;utf-8&amp;#32534;&amp;#30721;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; key, value &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; pay_option.iteritems():
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;not&lt;/span&gt; value:
                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;continue&lt;/span&gt;
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;isinstance&lt;/span&gt;(value, &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;unicode&lt;/span&gt;):
                &lt;span style=&quot;color: #ffff00;&quot;&gt;pay_option&lt;/span&gt;[key] = value.encode(encoding)
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; pay_option

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;_get_url_params&lt;/span&gt;(cls, pay_option):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#20351;&amp;#29992;OrderedDict&amp;#23558;url&amp;#21442;&amp;#25968;&amp;#25353;&amp;#23383;&amp;#27597;&amp;#39034;&amp;#24207;&amp;#25490;&amp;#24207;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#21435;&amp;#38500;&amp;#31354;&amp;#30340;&amp;#23383;&amp;#27573;&amp;#21644;sign, sign_type&amp;#23383;&amp;#27573;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt; = OrderedDict(
            &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;sorted&lt;/span&gt;(
                [
                    item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; pay_option.iteritems()
                    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; item[1] &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;and&lt;/span&gt; item[0] &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;not&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign_type&#39;&lt;/span&gt;)
                ],
                key=&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;lambda&lt;/span&gt; x: x[0]
            )
        )
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; url_params

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;_get_sign&lt;/span&gt;(cls, url_params):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        md5&amp;#21152;&amp;#23494;url&amp;#21442;&amp;#25968;&amp;#21644;key&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;key&lt;/span&gt; = AlipayConfig.ALIPAY_KEY
        &lt;span style=&quot;color: #ffff00;&quot;&gt;prestr&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&amp;amp;&#39;&lt;/span&gt;.join(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;%s=%s&#39;&lt;/span&gt; % item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; item &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;in&lt;/span&gt; url_params.iteritems())
        &lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt; = md5(prestr + key).hexdigest()
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; sign

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;submit_order_url&lt;/span&gt;(cls, order):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#26500;&amp;#36896;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#21363;&amp;#26102;&amp;#21040;&amp;#36134;&amp;#38142;&amp;#25509;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;pay_option&lt;/span&gt; = &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;dict&lt;/span&gt;([
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;service&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;create_direct_pay_by_user&#39;&lt;/span&gt;),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;payment_type&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;1&#39;&lt;/span&gt;),

            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;_input_charset&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_INPUT_CHARSET),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;partner&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_PID),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;seller_email&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_SELLER_EMAIL),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;return_url&#39;&lt;/span&gt;, AlipayConfig.ALIPAY_RETURN_URL),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;notify_url&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&lt;/span&gt;),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;show_url&#39;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&lt;/span&gt;),

            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;out_trade_no&#39;&lt;/span&gt;, order.order_id),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;subject&#39;&lt;/span&gt;, order.subject_name()),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;body&#39;&lt;/span&gt;, order.order_detail()),
            (&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;total_fee&#39;&lt;/span&gt;, order.total_price &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;not&lt;/span&gt; DEBUG &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;else&lt;/span&gt; 0.1),
        ])

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23558;&amp;#25903;&amp;#20184;&amp;#21442;&amp;#25968;&amp;#30340;&amp;#32534;&amp;#30721;&amp;#32479;&amp;#19968;&amp;#25104;utf-8&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;pay_option&lt;/span&gt; = cls._convert_str_encode(
            pay_option,
            encoding=AlipayConfig.ALIPAY_INPUT_CHARSET,
        )

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25490;&amp;#24207;&amp;#21435;&amp;#38500;&amp;#31354;&amp;#20540;&amp;#21644;sign,sign_type&amp;#36873;&amp;#39033;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt; = cls._get_url_params(pay_option)

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#21152;&amp;#23494;&amp;#21644;&amp;#21152;&amp;#23494;&amp;#31867;&amp;#22411;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt;[&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign&#39;&lt;/span&gt;] = cls._get_sign(url_params)
        &lt;span style=&quot;color: #ffff00;&quot;&gt;url_params&lt;/span&gt;[&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign_type&#39;&lt;/span&gt;] = AlipayConfig.ALIPAY_SIGN_TYPE

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#29983;&amp;#25104;&amp;#25903;&amp;#20184;url&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;submit_url&lt;/span&gt; = AlipayConfig.ALIPAY_GATEWAY + urllib.urlencode(url_params)

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; submit_url

    &lt;span style=&quot;color: #00ff00;&quot;&gt;@classmethod&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;verify_alipay_notify&lt;/span&gt;(cls, url_data):
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;&#39;&#39;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#39564;&amp;#35777;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#25903;&amp;#20184;&amp;#25104;&amp;#21151;&amp;#30340;&amp;#36820;&amp;#22238;&amp;#20449;&amp;#24687;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &amp;#20004;&amp;#20010;&amp;#27493;&amp;#39588;&amp;#65306;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;           1. &amp;#39564;&amp;#35777;&amp;#31614;&amp;#21517;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;           2. &amp;#26597;&amp;#35810;&amp;#27492;notify&amp;#26159;&amp;#21542;&amp;#22312;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#20013;&amp;#26377;&amp;#25928;&lt;/span&gt;
&lt;span style=&quot;color: #00ff00;&quot;&gt;        &#39;&#39;&#39;&lt;/span&gt;
        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#39564;&amp;#35777;&amp;#31614;&amp;#21517;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;alipay_sign&lt;/span&gt; = url_data.get(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;sign&#39;&lt;/span&gt;)
        &lt;span style=&quot;color: #ffff00;&quot;&gt;alipay_url_params&lt;/span&gt; = cls._get_url_params(url_data)
        &lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt; = cls._get_sign(alipay_url_params)

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; sign != alipay_sign:
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;False&lt;/span&gt;

        &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26597;&amp;#35810;&amp;#20449;&amp;#24687;&amp;#26159;&amp;#21542;&amp;#22312;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#20013;&amp;#26377;&amp;#25928;&lt;/span&gt;
        &lt;span style=&quot;color: #ffff00;&quot;&gt;check_params&lt;/span&gt; = {
            &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;partner&#39;&lt;/span&gt;: AlipayConfig.ALIPAY_PID,
            &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;notify_id&#39;&lt;/span&gt;: url_data.get(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;notify_id&#39;&lt;/span&gt;)
        }
        &lt;span style=&quot;color: #ffff00;&quot;&gt;result&lt;/span&gt; = requests.get(
            AlipayConfig.ALIPAY_NOTIFY_GATEWAY,
            params=check_params
        )
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; result.text.lower().strip() == &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;true&#39;&lt;/span&gt;:
            &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;True&lt;/span&gt;

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
一些运行结果:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#29983;&amp;#25104;&amp;#25903;&amp;#20184;&amp;#30340;url&lt;/span&gt;
https://mapi.alipay.com/gateway.do?&lt;span style=&quot;color: #ffff00;&quot;&gt;_input_charset&lt;/span&gt;=utf-8&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;body&lt;/span&gt;=hehehehhe&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;out_trade_no&lt;/span&gt;=20140928110814-8cd3
&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;partner&lt;/span&gt;=xxxxx&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;payment_type&lt;/span&gt;=1&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;paymenthod&lt;/span&gt;=directPay&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;seller_email&lt;/span&gt;=xxx%40xxx.com&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;service&lt;/span&gt;=create_direct_pay_by_user&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;subject&lt;/span&gt;=hehehe&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;total_fee&lt;/span&gt;=2599&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt;=603b228b7e6663d217dc44bdc12a5106&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;sign_type&lt;/span&gt;=MD5

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25903;&amp;#20184;&amp;#23453;&amp;#36820;&amp;#22238;&amp;#25968;&amp;#25454;&amp;#30340;url&lt;/span&gt;
127.0.0.1:8000/payment/alipay_return/?&lt;span style=&quot;color: #ffff00;&quot;&gt;body&lt;/span&gt;=&amp;#22871;&amp;#39184;B&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;buyer_email&lt;/span&gt;=xxxx%40163.com&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;buyer_id&lt;/span&gt;=xxxxxxx&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;exterface&lt;/span&gt;=create_direct_pay_by_user&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;is_success&lt;/span&gt;=T&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;notify_id&lt;/span&gt;=RqPnCoPT3K9%252Fvwbh3InQ9JC%252Ft24wOkxbC3d3NsqzK9v6KWsnZ2vWqks9o41CFgeCkbai&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;notify_time&lt;/span&gt;=2014-09-30+14%3A21%3A22&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;notify_type&lt;/span&gt;=trade_status_sync&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;out_trade_no&lt;/span&gt;=20140928110814-8cd4&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;payment_type&lt;/span&gt;=1&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;seller_email&lt;/span&gt;=xxx%40xxxx.com&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;seller_id&lt;/span&gt;=xxxx&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;subject&lt;/span&gt;=&amp;#22871;&amp;#39184;B&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;total_fee&lt;/span&gt;=0.10&amp;amp;
&lt;span style=&quot;color: #ffff00;&quot;&gt;trade_no&lt;/span&gt;=2014093000715684&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;trade_status&lt;/span&gt;=TRADE_SUCCESS&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;sign&lt;/span&gt;=de81410e5fba18e8d97823a31c0724ac&amp;amp;&lt;span style=&quot;color: #ffff00;&quot;&gt;sign_type&lt;/span&gt;=MD5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;总结：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
支付宝的文档确实有点看不懂，上面放了两个运行结果，希望大家做起来有点方向，知道构造什么，验证什么，&lt;br  /&gt;
感谢github上&lt;a href=&quot;https:github.com/yefei/python-alipay&quot;&gt;这个repo&lt;/a&gt;, 给了我很大的帮助。
&lt;/p&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Alipay" scheme="http://yoursite.com/categories/Python/Alipay/"/>
    
    
  </entry>
  
  <entry>
    <title>Python Mixin 学习笔记</title>
    <link href="http://yoursite.com/2014-07-19/2014-07-19-python-mixin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2014-07-19/2014-07-19-python-mixin学习笔记/</id>
    <published>2014-07-18T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:31.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">2016-10-25 17:04 的邮件</h2>
<div class="outline-text-2" id="text-1">
<p>
正思考着如何给 <a href="https://github.com/BurnishTechCN/djkit" target="_blank" rel="external">djkit</a>（Django starter）项目添加 admin 和 models 的支持，
此时收到一封邮件，来自 <a href="https://github.com/uhayate" target="_blank" rel="external">uhayate</a>，内容如下：
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png" alt="5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png">
</p>
</div>

<p>
看了他的 github 和博客，我确定我不认识这个同学，这下有意思了，我的博客居
然被人搜索到而且还发现了一个错误，赶紧回了邮件然后审查文章压压惊，之后便有了
这次更新，不得不说，两年前写的东西还是欠火候，至于评论功能，使用 <a href="https://github.com/runforever/runforever.github.com/issues/new" target="_blank" rel="external">Issue</a>。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">主要更新</h3>
<div class="outline-text-3" id="text-1-1">
<ol class="org-ol">
<li>新式类 MRO 的机制理解。
</li>
<li>文章排版按照<a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external"> 中文文案排版指北</a> 重排。
</li>
<li>Mixin 使用场景。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">更新总结</h3>
<div class="outline-text-3" id="text-1-2">
<ol class="org-ol">
<li>多继承真的很复杂。
</li>
<li>博客和代码一样，每当你过一段时间回头来看会问自己当时为什么要这样写，代码要经常重构，文章也需要经常更新，当别人看到你写的东西的时候就要拿出最好的给读者。
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">来由</h2>
<div class="outline-text-2" id="text-2">
<p>
对 Python 的面向对象编程研究的比较少，Django 是从 1.3 推荐使用 class base view，
免不了会用到 Python 的面向对象的特性，所以把研究的东西记录一下。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">知识点</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>Python 面向对象的基本使用和多继承 MRO（method resolution order）的机制。
</li>
<li>Mixin 和多继承有什么区别及应用场景。
</li>
<li>Python 中的静态方法、类方法、实例方法。
</li>
</ol>

<p>
<a id="more"></a>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">1. Python 面向对象的基本使用和 MRO</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">定义 class</h3>
<div class="outline-text-3" id="text-4-1">
<p>
old school 旧式类
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>:
    <span style="color: #00ff00;">'''old school &#19981;&#33021;&#20351;&#29992; super &#20851;&#38190;&#23383;'''</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
</pre>
</div>

<p>
new school 新式类
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Bar</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #00ff00;">'''new school &#32487;&#25215;&#33258; object &#21487;&#20197;&#20351;&#29992; super &#20851;&#38190;&#23383;'''</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
</pre>
</div>
<p>
两者区别在于是否继承 object，old school 的查找顺序式深度优先，new school 的查找顺序是 C3 算法
</p>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">old school 类多继承的问题</h3>
<div class="outline-text-3" id="text-4-2">
<p>
我查阅了很多文章，基本都用下面的例子说明存在的问题
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">A</span>():
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"A"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">B</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo2</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">C</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"C"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">D</span>(B, C):
    <span style="color: #00ffff; font-weight: bold;">pass</span>

<span style="color: #ffff00;">d</span> = D()
d.foo1() <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35843;&#29992;&#30340;&#26159; A &#30340; foo1 &#26041;&#27861;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">result: A</span>
</pre>
</div>

<p>
old school 的 MRO 过程<br>
</p>


<div class="figure">
<p><img src="http://cdn.defcoding.com/img_0045.jpg" alt="img_0045.jpg">
</p>
</div>

<p>
由于基本不用多继承，竟然一开始没有理解到这样结果有什么问题，仔细一想，
如果我写了这样的多继承代码，我应该是想使用父类 C 的 foo1() 方法，结果
给了我 A 的 foo1() 方法，确实不符合预期，既然如此是不是换个顺序就解决
问题了 class D(C, B)，可能解决了调用 foo1 的问题，然而顺序换了之后使
用别的父类方法依然会出现类似 foo1 方法的问题，修复 bug 的同时引入了
其他 bug，于是我很好奇的去看了 C3 算法是如何解决这个问题的。
</p>
</div>
</div>

<div id="outline-container-sec-4-3" class="outline-3">
<h3 id="sec-4-3">C3 算法</h3>
<div class="outline-text-3" id="text-4-3">
<p>
在我查找 C3 算法资料的时候发现 Python 2.2 版本的 MRO 使用的是广度优先搜索，
这个我就不多说了，现在没有人还会使用 Python 2.2 版本，2.3 以后的版本 MRO 都是使用的 C3。
</p>

<p>
我们把上面多继承的例子改成 new school 方式，Python 提供了 <code>__mro__</code> 方法来看 MRO
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">A</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"A"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">B</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo2</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">C</span>(A):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">foo1</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">"C"</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">D</span>(B, C):
    <span style="color: #00ffff; font-weight: bold;">pass</span>

<span style="color: #ffff00;">d</span> = D()
<span style="color: #00ffff; font-weight: bold;">print</span> D.__mro__
d.foo1() <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31526;&#21512;&#39044;&#26399;&#30340;&#35843;&#29992;&#30340;&#26159; C &#30340; foo1 &#26041;&#27861;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">result: C</span>
</pre>
</div>

<p>
C3 算法比较有意思，用了函数式编程编程的思想。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">L &#26159;&#27714; MRO &#39034;&#24207;&#30340;&#20989;&#25968;</span>
L(<span style="color: #0000ff; font-weight: bold;">object</span>) = <span style="color: #0000ff; font-weight: bold;">object</span>
L(D(B, C)) = C + merge(L(B), L(C), BC)
</pre>
</div>

<p>
merge 过程很难用文字解释清楚，我们通过过程来理解。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ffff00;">O</span> = <span style="color: #0000ff; font-weight: bold;">object</span>
L(O) = O
L(A(O)) = A + merge(L(O))
        = AO

L(B(A)) = B + merge(L(A))
        = B + merge(A O)
        = BAO

L(C(A)) = CAO <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35745;&#31639;&#36807;&#31243;&#21516;&#19978;</span>

L(D(B, C)) = D + merge(L(B), L(C), BC)
           = D + merge(BAO, CAO, BC)       <span style="color: #ff0000;"># </span><span style="color: #ff0000;">B &#37117;&#26159;&#31532;&#19968;&#65292;B out</span>
           = D + B + merge(AO, CAO, C)     <span style="color: #ff0000;"># </span><span style="color: #ff0000;">A &#21644; O &#37117;&#22312; CAO &#21518;&#65292;&#19981;&#33021; out&#65292;C &#22312;&#31532;&#19968;&#65292;C out</span>
           = D + B + C + merge(AO, AO)     <span style="color: #ff0000;"># </span><span style="color: #ff0000;">A &#37117;&#26159;&#31532;&#19968;&#65292;A out</span>
           = D + B + C + A + merge(O, O)   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21516;&#19978;&#65292;O out</span>
           = D + B + C + A + O
</pre>
</div>
<p>
从上面的 MRO 顺序我们看到最终调用的 foo1 是 C 类的 foo1，这个问题解决，
同时 MRO 也展现了多继承设计是很复杂的，为了解决这样的复杂性，出现了 Mixin。
</p>

<p>
如果看不懂，直接使用 <code>__mro__</code> 方法来看继承顺序。
</p>

<p>
都使用 new school 来定义类，不要 old school 和 new school 混用。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">2. 使用 Mixin</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">什么是Mixin</h3>
<div class="outline-text-3" id="text-5-1">
<p>
继承，组合都是为了代码复用，Mixin 方式也是一种多继承，但他看起来像是用组合的方式来实现代码复用，
可以把 Mixin 看成是一个个的插件，设计的类需要什么插件就继承相应的 Mixin。
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">Mixin 设计代码的方式</h3>
<div class="outline-text-3" id="text-5-2">
<p>
代码中的任何单元（package，module，class，function）都要遵循只做一件事，并且把这件事做好的原则，
Mixin 也要保证一个 Mixin 只有一个功能，如果有多个功能，写成多个 Mixin。
</p>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3">Mixin 的使用场景</h3>
<div class="outline-text-3" id="text-5-3">
<p>
我们写 web view 的时候会有涉及到认证和权限，下面我们来看 Django 是怎样通过 Mixin 来解决这个问题的。
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#30331;&#24405;&#35748;&#35777; Mixin</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">LoginRequiredMixin</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@method_decorator</span>(login_required)
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">dispatch</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request, *args, **kwargs):
        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #0000ff; font-weight: bold;">super</span>(LoginRequiredMixin, <span style="color: #00ffff; font-weight: bold;">self</span>).dispatch(request, *args, **kwargs)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#19981;&#26657;&#39564; CSRF Mixin</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">CSRFExemptMixin</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@method_decorator</span>(csrf_exempt)
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">dispatch</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, *args, **kwargs):
        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #0000ff; font-weight: bold;">super</span>(CSRFExemptMixin, <span style="color: #00ffff; font-weight: bold;">self</span>).dispatch(*args, **kwargs)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31649;&#29702;&#21592;&#35748;&#35777; Mixin</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">StaffRequiredMixin</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):

    <span style="color: #00ff00;">@method_decorator</span>(user_passes_test(<span style="color: #00ffff; font-weight: bold;">lambda</span> u: u.is_staff))
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">dispatch</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request, *args, **kwargs):
        <span style="color: #00ffff; font-weight: bold;">return</span> <span style="color: #0000ff; font-weight: bold;">super</span>(StaffRequiredMixin, <span style="color: #00ffff; font-weight: bold;">self</span>).dispatch(request, *args, **kwargs)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#27809;&#26377;&#35748;&#35777;&#30340; web view</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(View):

    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">get</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request):
       <span style="color: #00ffff; font-weight: bold;">return</span> HttpResponse(<span style="color: #00ff00;">'I am a web view'</span>)

    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">post</span>(<span style="color: #00ffff; font-weight: bold;">self</span>, request):
       <span style="color: #00ffff; font-weight: bold;">return</span> HttpResponse(<span style="color: #00ff00;">'post success'</span>)


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">1. View &#28155;&#21152; Login &#35748;&#35777;</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(LoginRequiredMixin, View):
    <span style="color: #00ff00;">'''do something'''</span>


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">2. View &#19981;&#26657;&#39564; CSRF &#24182;&#19988; Login &#35748;&#35777;</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(CSRFExemptMixin, LoginRequiredMixin, View):
    <span style="color: #00ff00;">'''do something'''</span>


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">3. View &#38656;&#35201;&#31649;&#29702;&#21592;&#35748;&#35777;</span>
<span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">ShowCodeView</span>(StaffRequiredMixin, View):
    <span style="color: #00ff00;">'''do something'''</span>
</pre>
</div>
<p>
看完上面的代码 Mixin 确实让代码的设计变得清晰了很多，没有多继承设计那种复杂的层级关系，只有一个层级，
使用组合起来达到目的，让我想到了 Unix 里工具的设计思想，可以通过管道（pipeline）自由组合。<br>
例如批量杀进程： <code>ps aux | grep 'foo' | awk '{print $1}' | xargs kill -9</code>
</p>

<p>
Mixin 和多继承实现机制是一样的，他们的不同体现在设计思想的不同，理解了 MRO 有助于我们更好的设计代码。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">3. Python 中的类方法，静态方法和实例方法</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">静态方法</h3>
<div class="outline-text-3" id="text-6-1">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">pass</span>

    <span style="color: #00ff00;">@staticmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">do_something</span>():
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#26080;&#27861;&#35775;&#38382;&#31867;&#23646;&#24615;&#12289;&#23454;&#20363;&#23646;&#24615;&#65292;&#30456;&#24403;&#20110;&#19968;&#20010;&#30456;&#23545;&#29420;&#31435;&#30340;&#26041;&#27861;&#65292;</span>
<span style="color: #00ff00;">        &#36319;&#31867;&#20854;&#23454;&#27809;&#20160;&#20040;&#20851;&#31995;&#65292;&#25442;&#20010;&#35282;&#24230;&#26469;&#35762;&#65292;&#20854;&#23454;&#23601;&#26159;&#25918;&#22312;&#19968;&#20010;</span>
<span style="color: #00ff00;">        &#31867;&#30340;&#20316;&#29992;&#22495;&#37324;&#30340;&#20989;&#25968;&#32780;&#24050;&#12290;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">'I am just a static method'</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20351;&#29992;</span>
Foo.do_something()
<span style="color: #ffff00;">f</span> = Foo()
f.do_something()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2">类方法</h3>
<div class="outline-text-3" id="text-6-2">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #ffff00;">msg</span> = <span style="color: #00ff00;">'hello world'</span>

    <span style="color: #00ff00;">@classmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">do_something</span>(cls):
        <span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        &#21487;&#20197;&#35775;&#38382;&#31867;&#23646;&#24615;&#65292;&#26080;&#27861;&#35775;&#38382;&#23454;&#20363;&#23646;&#24615;&#12290;</span>
<span style="color: #00ff00;">        '''</span>
        <span style="color: #00ffff; font-weight: bold;">print</span> cls.msg

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20351;&#29992;</span>
Foo.do_something()
<span style="color: #ffff00;">f</span> = foo()
f.do_something()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-3" class="outline-3">
<h3 id="sec-6-3">实例方法</h3>
<div class="outline-text-3" id="text-6-3">
<div class="org-src-container">

<pre class="src src-python"><span style="color: #00ffff; font-weight: bold;">class</span> <span style="color: #00ff00;">Foo</span>(<span style="color: #0000ff; font-weight: bold;">object</span>):
    <span style="color: #ffff00;">cls_msg</span> = <span style="color: #00ff00;">'I am a cls msg'</span>

    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">__init__</span>(<span style="color: #00ffff; font-weight: bold;">self</span>):
        <span style="color: #00ffff; font-weight: bold;">self</span>.ins_msg = <span style="color: #00ff00;">'I am a instance msg'</span>

    <span style="color: #00ff00;">@staticmethod</span>
    <span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">static_do</span>():
        <span style="color: #00ffff; font-weight: bold;">print</span> <span style="color: #00ff00;">'I am a static msg</span>

<span style="color: #00ff00;">    @classmethod</span>
<span style="color: #00ff00;">    def class_do(cls):</span>
<span style="color: #00ff00;">        print cls.cls_msg</span>

<span style="color: #00ff00;">    def instance_do(self):</span>
<span style="color: #00ff00;">        '''</span>&#21487;&#20197;&#35775;&#38382;&#31867;&#23646;&#24615;<span style="color: #00ff00;">'''</span>
<span style="color: #00ff00;">        print self.ins_msg</span>
<span style="color: #00ff00;">        print Foo.cls_msg</span>

<span style="color: #00ff00;"># &#20351;&#29992;</span>
<span style="color: #00ff00;">f = Foo()</span>

<span style="color: #00ff00;">f.static_do()</span>
<span style="color: #00ff00;"># I am a static msg</span>

<span style="color: #00ff00;">f.class_do()</span>
<span style="color: #00ff00;"># I am a cls msg</span>

<span style="color: #00ff00;">f.instance_do()</span>
<span style="color: #00ff00;"># I am a instance msg</span>
<span style="color: #00ff00;"># I am a cls msg</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-4" class="outline-3">
<h3 id="sec-6-4">小结</h3>
<div class="outline-text-3" id="text-6-4">
<ol class="org-ol">
<li>python 的类方法可以用来写工具类。
</li>
<li>静态方法暂时没有想到他的具体用途
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">总结</h2>
<div class="outline-text-2" id="text-7">
<ol class="org-ol">
<li>面向对象的思想其实和 UNIX 的设计思想其实是一致，K.I.S.S。
</li>
<li>组合优于继承，继承的层次不宜太多，单一继承结构最好。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">参考</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="http://www.libaoyin.com/2013/08/06/pyhton-staticmethod-classmethod/" target="_blank" rel="external">python 静态方法和类方法</a> <br>
<a href="http://xiaocong.github.io/blog/2012/06/13/python-mixin-and-mro/" target="_blank" rel="external">Python Mixin and MRO</a> <br>
<a href="https://github.com/zhouhaibing089/Blog/" target="_blank" rel="external">{译}The Python 2.3 Method Resolution Order</a> <br>
</p>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;2016-10-25 17:04 的邮件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
正思考着如何给 &lt;a href=&quot;https://github.com/BurnishTechCN/djkit&quot;&gt;djkit&lt;/a&gt;（Django starter）项目添加 admin 和 models 的支持，
此时收到一封邮件，来自 &lt;a href=&quot;https://github.com/uhayate&quot;&gt;uhayate&lt;/a&gt;，内容如下：
&lt;/p&gt;


&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn.defcoding.com/5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png&quot; alt=&quot;5EB59FBA-21CC-4BAB-98CB-BCA70237C5DD.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
看了他的 github 和博客，我确定我不认识这个同学，这下有意思了，我的博客居
然被人搜索到而且还发现了一个错误，赶紧回了邮件然后审查文章压压惊，之后便有了
这次更新，不得不说，两年前写的东西还是欠火候，至于评论功能，使用 &lt;a href=&quot;https://github.com/runforever/runforever.github.com/issues/new&quot;&gt;Issue&lt;/a&gt;。
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;主要更新&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;新式类 MRO 的机制理解。
&lt;/li&gt;
&lt;li&gt;文章排版按照&lt;a href=&quot;https://github.com/sparanoid/chinese-copywriting-guidelines&quot;&gt; 中文文案排版指北&lt;/a&gt; 重排。
&lt;/li&gt;
&lt;li&gt;Mixin 使用场景。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;更新总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;多继承真的很复杂。
&lt;/li&gt;
&lt;li&gt;博客和代码一样，每当你过一段时间回头来看会问自己当时为什么要这样写，代码要经常重构，文章也需要经常更新，当别人看到你写的东西的时候就要拿出最好的给读者。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;来由&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
对 Python 的面向对象编程研究的比较少，Django 是从 1.3 推荐使用 class base view，
免不了会用到 Python 的面向对象的特性，所以把研究的东西记录一下。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;知识点&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Python 面向对象的基本使用和多继承 MRO（method resolution order）的机制。
&lt;/li&gt;
&lt;li&gt;Mixin 和多继承有什么区别及应用场景。
&lt;/li&gt;
&lt;li&gt;Python 中的静态方法、类方法、实例方法。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>saltstack自定义模块</title>
    <link href="http://yoursite.com/2014-07-11/2014-07-11-saltstack%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2014-07-11/2014-07-11-saltstack自定义模块/</id>
    <published>2014-07-10T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:32.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">SaltStack自定义模块</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来由</h3>
<div class="outline-text-3" id="text-1-1">
<p>
公司项目以前使用的是fabric将代码部署到云平台，现在迁移到本地的服务器，<br>
再使用fabric显然有点不合适，然而使用SaltStack的state来描述发版本的过 <br>
程又略显不灵活，所以决定自己编写一个SaltStack的模块来实现版本发布的需求，<br>
下面给出编写自定义模块的方法。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">版本发布流程</h3>
<div class="outline-text-3" id="text-1-2">
<ol class="org-ol">
<li>使用git pull最新的master代码。
</li>
<li>使用脚本替换一些变量。
</li>
<li>一些其他的操作
</li>
<li>重启supervisor开启的uwsgi服务。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">如何编写SaltStack自定义模块</h3>
<div class="outline-text-3" id="text-1-3">
<p>
编写SaltStack自定义模块超级简单，前提是需要你会一些Python编程，具体如下： <br>
</p>
</div>

<div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">步骤</h4>
<div class="outline-text-4" id="text-1-3-1">
<ol class="org-ol">
<li>首先需要在master机器的file_roots 下建一个_modules文件夹，里面放.py 文件，也就是自定义模块。
<ul class="org-ul">
<li>file_roots 在/etc/salt/master 里可以设置，默认是/srv/salt/，即你需要在这个目录下新建文件夹_modules
</li>
</ul>
</li>
<li>在_modules里新建自定义模块，然后编写相应的代码。
<ul class="org-ul">
<li>比如模块名是foo，在里面定义了方法bar。
</li>
</ul>
</li>
<li>写完代码后，使用命令 salt '*' saltutil.sync_all 将自定义模块同步到各个minion上。
<ul class="org-ul">
<li>也可以使用 salt '*' saltutil.sync_modules 将自定义模块同步到minion上
</li>
</ul>
</li>
<li>运行自定也模块，使用命令 salt '*' foo.bar
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-3-2" class="outline-4">
<h4 id="sec-1-3-2">实例</h4>
<div class="outline-text-4" id="text-1-3-2">
<p>
目录结构：
</p>
<div class="org-src-container">

<pre class="src src-sh">srv
<span style="color: #00ff00;">\-</span>- salt
   <span style="color: #00ff00;">\-</span>- _modules
       <span style="color: #00ff00;">\-</span>- foo.py
   <span style="color: #00ff00;">\-</span>- prod
   ...
</pre>
</div>

<p>
自定义模块代码:
</p>
<div class="org-src-container">

<pre class="src src-python"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">coding: utf-8</span>

<span style="color: #00ffff; font-weight: bold;">def</span> <span style="color: #0000ff; font-weight: bold;">bar</span>():
    <span style="color: #ffff00;">CMD_RUN</span> = __salt__[<span style="color: #00ff00;">'cmd.run'</span>]
    <span style="color: #ffff00;">cmd</span> = <span style="color: #00ff00;">"ls /etc/init"</span>
    <span style="color: #00ffff; font-weight: bold;">return</span> CMD_RUN(cmd)

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#35299;&#37322;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#33258;&#23450;&#20041;&#27169;&#22359;&#20250;&#21152;&#36733;__salt__&#21464;&#37327;&#65292;&#36825;&#20010;dict&#21464;&#37327;&#37324;&#21253;&#21547;&#25152;&#26377;&#30340;salt function</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#19978;&#38754;&#30340;cmd.run&#23601;&#26159;salt&#30340;&#21629;&#20196;&#36816;&#34892;&#20989;&#25968;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">__salt__&#21464;&#37327;&#24517;&#39035;&#22312;&#33258;&#23450;&#20041;&#30340;&#27169;&#22359;&#37324;&#20351;&#29992;&#65292;&#20063;&#23601;&#26159;&#24517;&#39035;&#22312;&#33258;&#23450;&#19968;&#30340;&#26041;&#27861;&#20013;&#20351;&#29992;&#65292;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22914;&#19978;&#38754;&#30340;bar&#26041;&#27861;&#65292;&#19981;&#33021;&#23558;__salt__&#21464;&#37327;&#25918;&#21040;&#20840;&#23616;&#21464;&#37327;&#20013;&#20351;&#29992;&#65292;&#21542;&#21017;&#20250;&#25253;__salt__&#21464;&#37327;&#20026;&#23450;&#20041;</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">注意事项</h3>
<div class="outline-text-3" id="text-1-4">
<ol class="org-ol">
<li>如果要使用__salt__变量，必须要在自定义的方法中使用，不能在全局变量中使用。
</li>
<li>如果运行命令报错了，如报 foo.bar is not avaliable，请到minion机器上去查看具体的日志。
<ul class="org-ul">
<li>报上述错误并不是模块没有同步到minion上，而是你编写的模块运行有问题。
</li>
<li>minion的日志记录在/var/log/salt/minion中，可以去这里查看具体错误。
</li>
</ul>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">最后的思考</h3>
<div class="outline-text-3" id="text-1-5">
<ol class="org-ol">
<li>编写SaltStack自定义模块很简单、方便。
</li>
<li>实现自定义模块的过程中，可以发扬NIH(Not invent here)的思想。
<ul class="org-ul">
<li>可以充分利用__salt__变量里的salt自带函数来实现你想要的功能。
</li>
</ul>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">参考</h3>
<div class="outline-text-3" id="text-1-6">
<blockquote>
<p>
<a href="http://docs.saltstack.com/en/latest/ref/modules/" target="_blank" rel="external">Execution Modules</a>
</p>
</blockquote>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;SaltStack自定义模块&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来由&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
公司项目以前使用的是fabric将代码部署到云平台，现在迁移到本地的服务器，&lt;br  /&gt;
再使用fabric显然有点不合适，然而使用SaltStack的state来描述发版本的过 &lt;br  /&gt;
程又略显不灵活，所以决定自己编写一个SaltStack的模块来实现版本发布的需求，&lt;br  /&gt;
下面给出编写自定义模块的方法。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;版本发布流程&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;使用git pull最新的master代码。
&lt;/li&gt;
&lt;li&gt;使用脚本替换一些变量。
&lt;/li&gt;
&lt;li&gt;一些其他的操作
&lt;/li&gt;
&lt;li&gt;重启supervisor开启的uwsgi服务。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;如何编写SaltStack自定义模块&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
编写SaltStack自定义模块超级简单，前提是需要你会一些Python编程，具体如下： &lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;步骤&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;首先需要在master机器的file_roots 下建一个_modules文件夹，里面放.py 文件，也就是自定义模块。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;file_roots 在/etc/salt/master 里可以设置，默认是/srv/salt/，即你需要在这个目录下新建文件夹_modules
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在_modules里新建自定义模块，然后编写相应的代码。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;比如模块名是foo，在里面定义了方法bar。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;写完代码后，使用命令 salt &#39;*&#39; saltutil.sync_all 将自定义模块同步到各个minion上。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;也可以使用 salt &#39;*&#39; saltutil.sync_modules 将自定义模块同步到minion上
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;运行自定也模块，使用命令 salt &#39;*&#39; foo.bar
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-2&quot;&gt;实例&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;p&gt;
目录结构：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;srv
&lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- salt
   &lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- _modules
       &lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- foo.py
   &lt;span style=&quot;color: #00ff00;&quot;&gt;\-&lt;/span&gt;- prod
   ...
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
自定义模块代码:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;coding: utf-8&lt;/span&gt;

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;bar&lt;/span&gt;():
    &lt;span style=&quot;color: #ffff00;&quot;&gt;CMD_RUN&lt;/span&gt; = __salt__[&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;cmd.run&#39;&lt;/span&gt;]
    &lt;span style=&quot;color: #ffff00;&quot;&gt;cmd&lt;/span&gt; = &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;ls /etc/init&quot;&lt;/span&gt;
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; CMD_RUN(cmd)

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#35299;&amp;#37322;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#33258;&amp;#23450;&amp;#20041;&amp;#27169;&amp;#22359;&amp;#20250;&amp;#21152;&amp;#36733;__salt__&amp;#21464;&amp;#37327;&amp;#65292;&amp;#36825;&amp;#20010;dict&amp;#21464;&amp;#37327;&amp;#37324;&amp;#21253;&amp;#21547;&amp;#25152;&amp;#26377;&amp;#30340;salt function&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#19978;&amp;#38754;&amp;#30340;cmd.run&amp;#23601;&amp;#26159;salt&amp;#30340;&amp;#21629;&amp;#20196;&amp;#36816;&amp;#34892;&amp;#20989;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;__salt__&amp;#21464;&amp;#37327;&amp;#24517;&amp;#39035;&amp;#22312;&amp;#33258;&amp;#23450;&amp;#20041;&amp;#30340;&amp;#27169;&amp;#22359;&amp;#37324;&amp;#20351;&amp;#29992;&amp;#65292;&amp;#20063;&amp;#23601;&amp;#26159;&amp;#24517;&amp;#39035;&amp;#22312;&amp;#33258;&amp;#23450;&amp;#19968;&amp;#30340;&amp;#26041;&amp;#27861;&amp;#20013;&amp;#20351;&amp;#29992;&amp;#65292;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22914;&amp;#19978;&amp;#38754;&amp;#30340;bar&amp;#26041;&amp;#27861;&amp;#65292;&amp;#19981;&amp;#33021;&amp;#23558;__salt__&amp;#21464;&amp;#37327;&amp;#25918;&amp;#21040;&amp;#20840;&amp;#23616;&amp;#21464;&amp;#37327;&amp;#20013;&amp;#20351;&amp;#29992;&amp;#65292;&amp;#21542;&amp;#21017;&amp;#20250;&amp;#25253;__salt__&amp;#21464;&amp;#37327;&amp;#20026;&amp;#23450;&amp;#20041;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;注意事项&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;如果要使用__salt__变量，必须要在自定义的方法中使用，不能在全局变量中使用。
&lt;/li&gt;
&lt;li&gt;如果运行命令报错了，如报 foo.bar is not avaliable，请到minion机器上去查看具体的日志。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;报上述错误并不是模块没有同步到minion上，而是你编写的模块运行有问题。
&lt;/li&gt;
&lt;li&gt;minion的日志记录在/var/log/salt/minion中，可以去这里查看具体错误。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;最后的思考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;编写SaltStack自定义模块很简单、方便。
&lt;/li&gt;
&lt;li&gt;实现自定义模块的过程中，可以发扬NIH(Not invent here)的思想。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;可以充分利用__salt__变量里的salt自带函数来实现你想要的功能。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://docs.saltstack.com/en/latest/ref/modules/&quot;&gt;Execution Modules&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="saltstack" scheme="http://yoursite.com/categories/saltstack/"/>
    
    
  </entry>
  
  <entry>
    <title>saltstack使用笔记</title>
    <link href="http://yoursite.com/2014-06-21/2014-06-21-salt%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2014-06-21/2014-06-21-salt使用笔记/</id>
    <published>2014-06-20T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:32.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">saltstack使用笔记</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来由：</h3>
<div class="outline-text-3" id="text-1-1">
<p>
公司需要部署把服务部署到自己的服务器中，每次迁移服务都得重新安装软件<br>
配置什么东西，身为程序员的我本身比较懒，就想找个工具把配置写好，下次<br>
部署的时候直接使用配置来玩，而不是每次都手工，所以就发现了 <b>saltstack</b><br>
这个自动化部署工具了。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">简介</h3>
<div class="outline-text-3" id="text-1-2">
<p>
salt采用的C/S架构，主机master和客户端minion，master通过命令控制客户端minion <br>
进行相应的任务（软件安装，配置，重启，定时任务，状态监控。。。）。
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">核心</h3>
<div class="outline-text-3" id="text-1-3">
<p>
远程执行引擎是Salt的核心，它能够为多组系统创建高速、安全的双向通讯网络。<br>
基于这个通许系统，Salt提供了一个非常快速、灵活并且容易使用的配置管理系统，<br>
称之为“Salt States”。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">安装配置</h3>
<div class="outline-text-3" id="text-1-4">
<p>
参考 <a href="http://docs.saltstack.cn/topics/tutorials/walkthrough.html" target="_blank" rel="external">http://docs.saltstack.cn/topics/tutorials/walkthrough.html</a> <br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#36816;&#34892;</span>
:salt-key -L
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22914;&#26524;&#20986;&#29616;&#23458;&#25143;&#31471;&#26426;&#22120;&#65292;&#35828;&#26126;&#37197;&#32622;&#25104;&#21151;&#20102;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">使用</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1">salt state</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
SLS（代表SaLt State文件）只是结构化的数据。<br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#36816;&#34892;</span>
salt <span style="color: #00ff00;">'*'</span> state.highstate
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20250;&#35753;&#25152;&#26377;&#30340;minion&#21040;master&#19978;&#26469;&#21462;&#36208;&#33258;&#24049;&#30340;SLS&#23450;&#20041;</span>

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#27169;&#25311;&#36816;&#34892;</span>
salt <span style="color: #00ff00;">'minion1.example.com'</span> state.highstate -v <span style="color: #ffff00;">test</span>=True
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5-2" class="outline-4">
<h4 id="sec-1-5-2">更多使用教程</h4>
<div class="outline-text-4" id="text-1-5-2">
<p>
官方文档 <a href="http://docs.saltstack.com/" target="_blank" rel="external">http://docs.saltstack.com/</a>
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">salt 配置文件结构</h3>
<div class="outline-text-3" id="text-1-6">
</div><div id="outline-container-sec-1-6-1" class="outline-4">
<h4 id="sec-1-6-1">开启salt配置文件</h4>
<div class="outline-text-4" id="text-1-6-1">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#20462;&#25913;/etc/salt/master&#25991;&#20214;&#65292;&#21435;&#25481;&#22914;&#19979;&#27880;&#37322;</span>
file_roots:
  base:
    - /srv/salt
  prod:
    - /srv/salt/prod
  dev:
    - /srv/salt/dev


<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22914;&#26524;&#38656;&#35201;&#20351;&#29992;pillar&#65292;&#21435;&#25481;&#22914;&#19979;&#27880;&#37322;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">pillar&#21487;&#20197;&#20801;&#35768;&#20320;&#23450;&#20041;&#19968;&#20123;&#21464;&#37327;&#65292;&#25935;&#24863;&#25968;&#25454;&#65292;&#20855;&#20307;&#21442;&#32771; http://www.ituring.com.cn/article/42398</span>
pillar_root:
  base:
    - /srv/pillar
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6-2" class="outline-4">
<h4 id="sec-1-6-2">配置文件格式</h4>
<div class="outline-text-4" id="text-1-6-2">
<ol class="org-ol">
<li>salt 的配置文件使用yaml格式，文件名后缀是.sls
</li>
<li>关于yaml格式可以参考<a href="http://www.yaml.org/spec/1.2/spec.html" target="_blank" rel="external">http://www.yaml.org/spec/1.2/spec.html</a>
<ul class="org-ul">
<li>json是yaml的子集，yaml可以描述更多的东西
</li>
<li>yaml的可读性要比json好，但是身为程序员的我觉得json的可读性更好。
</li>
<li>学习yaml可以使用如下网站进行json和yaml的转换，<a href="http://yamltojson.com/" target="_blank" rel="external">http://yamltojson.com/</a> ，这样可以更好的理解yaml。
</li>
</ul>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-6-3" class="outline-4">
<h4 id="sec-1-6-3">配置文件的目录结构</h4>
<div class="outline-text-4" id="text-1-6-3">
<div class="org-src-container">

<pre class="src src-yaml">tops.sls &#65288;&#25551;&#36848;&#25152;&#26377;&#23458;&#25143;&#31471;&#38656;&#35201;&#25191;&#34892;&#30340;&#29366;&#24577;&#65289;
prod &#65288;&#29983;&#20135;&#29615;&#22659;&#37197;&#32622;&#65289;
  -- core &#65288;&#22522;&#26412;&#36719;&#20214;&#23433;&#35013;&#65289;
     -- core.sls
  -- nginx
     -- nginx.sls
     -- nginx.conf
  -- vim
     -- vim.sls
     -- vim.local
  -- git
     -- git.sls
  -- web
     -- web.sls
  -- ...
     -- ...
dev &#65288;&#27979;&#35797;&#29615;&#22659;&#37197;&#32622;&#65289;
  -- ...
     -- ...
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6-4" class="outline-4">
<h4 id="sec-1-6-4">配置文件解释</h4>
<div class="outline-text-4" id="text-1-6-4">
<p>
core.sls
</p>
<div class="org-src-container">

<pre class="src src-yaml"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">/srv/salt/tops.sls</span>
<span style="color: #ffff00;">prod</span>:
  <span style="color: #ffff00;">'*'</span>:   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25152;&#26377;minion&#37117;&#35201;&#33719;&#21462;core&#29366;&#24577;</span>
    - core.core

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">/srv/salt/prod/core/core.sls</span>
<span style="color: #ffff00;">mypkgs</span>:
  <span style="color: #ffff00;">pkg.installed</span>:
    - <span style="color: #ffff00;">pkgs</span>:
      - gcc
      - python-dev
      - tmux
      - build-essential
      - g++
      - ...
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7">总结</h3>
<div class="outline-text-3" id="text-1-7">
<p>
saltstack 可以让你像编程一样去管理服务器，简单，高效，有趣。
</p>
</div>
</div>

<div id="outline-container-sec-1-8" class="outline-3">
<h3 id="sec-1-8">参考</h3>
<div class="outline-text-3" id="text-1-8">
<blockquote>
<p>
<a href="http://docs.saltstack.cn/topics/tutorials/walkthrough.html" target="_blank" rel="external">saltstack演练</a> <br>
<a href="http://docs.saltstack.cn/topics/tutorials/starting_states.html" target="_blank" rel="external">http://docs.saltstack.cn/topics/tutorials/starting_states.html</a> <br>
<a href="http://www.ituring.com.cn/article/42398" target="_blank" rel="external">http://www.ituring.com.cn/article/42398</a> <br>
</p>
</blockquote>
<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;saltstack使用笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来由：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
公司需要部署把服务部署到自己的服务器中，每次迁移服务都得重新安装软件&lt;br  /&gt;
配置什么东西，身为程序员的我本身比较懒，就想找个工具把配置写好，下次&lt;br  /&gt;
部署的时候直接使用配置来玩，而不是每次都手工，所以就发现了 &lt;b&gt;saltstack&lt;/b&gt;&lt;br  /&gt;
这个自动化部署工具了。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;简介&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
salt采用的C/S架构，主机master和客户端minion，master通过命令控制客户端minion &lt;br  /&gt;
进行相应的任务（软件安装，配置，重启，定时任务，状态监控。。。）。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;核心&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
远程执行引擎是Salt的核心，它能够为多组系统创建高速、安全的双向通讯网络。&lt;br  /&gt;
基于这个通许系统，Salt提供了一个非常快速、灵活并且容易使用的配置管理系统，&lt;br  /&gt;
称之为“Salt States”。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;安装配置&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
参考 &lt;a href=&quot;http://docs.saltstack.cn/topics/tutorials/walkthrough.html&quot;&gt;http://docs.saltstack.cn/topics/tutorials/walkthrough.html&lt;/a&gt; &lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#36816;&amp;#34892;&lt;/span&gt;
:salt-key -L
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22914;&amp;#26524;&amp;#20986;&amp;#29616;&amp;#23458;&amp;#25143;&amp;#31471;&amp;#26426;&amp;#22120;&amp;#65292;&amp;#35828;&amp;#26126;&amp;#37197;&amp;#32622;&amp;#25104;&amp;#21151;&amp;#20102;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;使用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;salt state&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;p&gt;
SLS（代表SaLt State文件）只是结构化的数据。&lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#36816;&amp;#34892;&lt;/span&gt;
salt &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;*&#39;&lt;/span&gt; state.highstate
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20250;&amp;#35753;&amp;#25152;&amp;#26377;&amp;#30340;minion&amp;#21040;master&amp;#19978;&amp;#26469;&amp;#21462;&amp;#36208;&amp;#33258;&amp;#24049;&amp;#30340;SLS&amp;#23450;&amp;#20041;&lt;/span&gt;

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#27169;&amp;#25311;&amp;#36816;&amp;#34892;&lt;/span&gt;
salt &lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;minion1.example.com&#39;&lt;/span&gt; state.highstate -v &lt;span style=&quot;color: #ffff00;&quot;&gt;test&lt;/span&gt;=True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;更多使用教程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;p&gt;
官方文档 &lt;a href=&quot;http://docs.saltstack.com/&quot;&gt;http://docs.saltstack.com/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;salt 配置文件结构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-6-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-1&quot;&gt;开启salt配置文件&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20462;&amp;#25913;/etc/salt/master&amp;#25991;&amp;#20214;&amp;#65292;&amp;#21435;&amp;#25481;&amp;#22914;&amp;#19979;&amp;#27880;&amp;#37322;&lt;/span&gt;
file_roots:
  base:
    - /srv/salt
  prod:
    - /srv/salt/prod
  dev:
    - /srv/salt/dev


&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22914;&amp;#26524;&amp;#38656;&amp;#35201;&amp;#20351;&amp;#29992;pillar&amp;#65292;&amp;#21435;&amp;#25481;&amp;#22914;&amp;#19979;&amp;#27880;&amp;#37322;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;pillar&amp;#21487;&amp;#20197;&amp;#20801;&amp;#35768;&amp;#20320;&amp;#23450;&amp;#20041;&amp;#19968;&amp;#20123;&amp;#21464;&amp;#37327;&amp;#65292;&amp;#25935;&amp;#24863;&amp;#25968;&amp;#25454;&amp;#65292;&amp;#20855;&amp;#20307;&amp;#21442;&amp;#32771; http://www.ituring.com.cn/article/42398&lt;/span&gt;
pillar_root:
  base:
    - /srv/pillar
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-2&quot;&gt;配置文件格式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;salt 的配置文件使用yaml格式，文件名后缀是.sls
&lt;/li&gt;
&lt;li&gt;关于yaml格式可以参考&lt;a href=&quot;http://www.yaml.org/spec/1.2/spec.html&quot;&gt;http://www.yaml.org/spec/1.2/spec.html&lt;/a&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;json是yaml的子集，yaml可以描述更多的东西
&lt;/li&gt;
&lt;li&gt;yaml的可读性要比json好，但是身为程序员的我觉得json的可读性更好。
&lt;/li&gt;
&lt;li&gt;学习yaml可以使用如下网站进行json和yaml的转换，&lt;a href=&quot;http://yamltojson.com/&quot;&gt;http://yamltojson.com/&lt;/a&gt; ，这样可以更好的理解yaml。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-3&quot;&gt;配置文件的目录结构&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-yaml&quot;&gt;tops.sls &amp;#65288;&amp;#25551;&amp;#36848;&amp;#25152;&amp;#26377;&amp;#23458;&amp;#25143;&amp;#31471;&amp;#38656;&amp;#35201;&amp;#25191;&amp;#34892;&amp;#30340;&amp;#29366;&amp;#24577;&amp;#65289;
prod &amp;#65288;&amp;#29983;&amp;#20135;&amp;#29615;&amp;#22659;&amp;#37197;&amp;#32622;&amp;#65289;
  -- core &amp;#65288;&amp;#22522;&amp;#26412;&amp;#36719;&amp;#20214;&amp;#23433;&amp;#35013;&amp;#65289;
     -- core.sls
  -- nginx
     -- nginx.sls
     -- nginx.conf
  -- vim
     -- vim.sls
     -- vim.local
  -- git
     -- git.sls
  -- web
     -- web.sls
  -- ...
     -- ...
dev &amp;#65288;&amp;#27979;&amp;#35797;&amp;#29615;&amp;#22659;&amp;#37197;&amp;#32622;&amp;#65289;
  -- ...
     -- ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-6-4&quot;&gt;配置文件解释&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-6-4&quot;&gt;
&lt;p&gt;
core.sls
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-yaml&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;/srv/salt/tops.sls&lt;/span&gt;
&lt;span style=&quot;color: #ffff00;&quot;&gt;prod&lt;/span&gt;:
  &lt;span style=&quot;color: #ffff00;&quot;&gt;&#39;*&#39;&lt;/span&gt;:   &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25152;&amp;#26377;minion&amp;#37117;&amp;#35201;&amp;#33719;&amp;#21462;core&amp;#29366;&amp;#24577;&lt;/span&gt;
    - core.core

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;/srv/salt/prod/core/core.sls&lt;/span&gt;
&lt;span style=&quot;color: #ffff00;&quot;&gt;mypkgs&lt;/span&gt;:
  &lt;span style=&quot;color: #ffff00;&quot;&gt;pkg.installed&lt;/span&gt;:
    - &lt;span style=&quot;color: #ffff00;&quot;&gt;pkgs&lt;/span&gt;:
      - gcc
      - python-dev
      - tmux
      - build-essential
      - g++
      - ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;p&gt;
saltstack 可以让你像编程一样去管理服务器，简单，高效，有趣。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://docs.saltstack.cn/topics/tutorials/walkthrough.html&quot;&gt;saltstack演练&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://docs.saltstack.cn/topics/tutorials/starting_states.html&quot;&gt;http://docs.saltstack.cn/topics/tutorials/starting_states.html&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://www.ituring.com.cn/article/42398&quot;&gt;http://www.ituring.com.cn/article/42398&lt;/a&gt; &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="saltstack" scheme="http://yoursite.com/categories/saltstack/"/>
    
    
  </entry>
  
  <entry>
    <title>JustForFun读书感想</title>
    <link href="http://yoursite.com/2014-06-15/2014-06-15-justforfun%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%83%B3/"/>
    <id>http://yoursite.com/2014-06-15/2014-06-15-justforfun读书感想/</id>
    <published>2014-06-14T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:32.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">JustForFun读书感想</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">来源</h3>
<div class="outline-text-3" id="text-1-1">
<p>
无意间发现了linus的自传，周末读了一下，感觉不错，记录一下感想。
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">摘录</h3>
<div class="outline-text-3" id="text-1-2">
<blockquote>
<p>
有三件事具有生命的意义：第一是生存，第二是社会秩序，第三是娱乐。<br>
一切事物都将从生存走向娱乐。<br>
Just for Fun <br>
</p>
</blockquote>

<blockquote>
<p>
我问他,如果见到比尔盖茨想说些什么,他却说连与后者见 一面的欲望都没有。<br>
“在我们俩之间没有什么关系可言,”他说,“他所做的事是世界上最优秀的,但我却丝
毫不感兴趣。我所做的事在世界上也可能是最优秀的,他也不感兴趣。我对他经商
提不出任何建议,他对我的技术也提不出任何看法。”
</p>
</blockquote>

<blockquote>
<p>
强制性服兵役制度的主要原因就是让芬兰男人们在喝啤酒时有话可聊,而且他们能活多久
就能聊多久。生个人都忍受了许多痛苦,那是共同的。他们都恨军队,但事后聊起来时却又
都格外开心。
</p>
</blockquote>

<blockquote>
<p>
每个人都会一本改变其一生的书籍,比如《圣经》、《资本论》、《星期二和莫瑞在一起》、
《我想 知道我在幼儿园里学到的一切》等等. <br>
把我推向生命高峰的是安德鲁?塔南鲍姆 (Andrew S. Tanenbaum)写的《操作系统:设计和实现》。
</p>
</blockquote>

<blockquote>
<p>
通过阅读和对 UNIX 的了解愈来愈深,我的热情高涨起来。<br>
说实话,我的热情从来没有低落过(我希望你在做某件事时也能说出同样的话)。<br>
</p>
</blockquote>

<blockquote>
<p>
UNIX的理念是越小越漂亮。一小堆简单基本的建筑材料,结合起来就能创造出无限的复杂表述。<br>
</p>
</blockquote>

<blockquote>
<p>
编程给人带来的最初兴奋的原因有部分是显而易见的,<br>
那就是:通过编程你可以支配一台计算机,你叫计算机做什么,它就做什么,永远准确无误,而且毫无怨言。
</p>
</blockquote>

<blockquote>
<p>
一个伟大的 编程者能凭借其聪明的头脑就知道答案是什么。他知道怎样写出漂亮的程序,知道怎样采用<br>
一种全新的但最终会被证明是正确的方法。
</p>
</blockquote>

<blockquote>
<p>
在软件世界中,一旦你已解决了最根本的问题,兴趣就容易很快地消失
</p>
</blockquote>

<blockquote>
<p>
Linux 所取得的许多成功,其实可以归结为我的缺点所致: <br>
1、 我很懒散。<br>
2、 我喜欢授权给其他人。<br>
</p>
</blockquote>

<blockquote>
<p>
我遇上了塔芙。她对我一生的影响甚至比《操作系统:设计与执行》一书对我的影响 还要大。<br>
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">总结：</h3>
<div class="outline-text-3" id="text-1-3">
<pre class="example">
1. 做自己想做的事。
2. just for fun
</pre>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;JustForFun读书感想&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;来源&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
无意间发现了linus的自传，周末读了一下，感觉不错，记录一下感想。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;摘录&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
有三件事具有生命的意义：第一是生存，第二是社会秩序，第三是娱乐。&lt;br  /&gt;
一切事物都将从生存走向娱乐。&lt;br  /&gt;
Just for Fun &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
我问他,如果见到比尔盖茨想说些什么,他却说连与后者见 一面的欲望都没有。&lt;br  /&gt;
“在我们俩之间没有什么关系可言,”他说,“他所做的事是世界上最优秀的,但我却丝
毫不感兴趣。我所做的事在世界上也可能是最优秀的,他也不感兴趣。我对他经商
提不出任何建议,他对我的技术也提不出任何看法。”
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
强制性服兵役制度的主要原因就是让芬兰男人们在喝啤酒时有话可聊,而且他们能活多久
就能聊多久。生个人都忍受了许多痛苦,那是共同的。他们都恨军队,但事后聊起来时却又
都格外开心。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
每个人都会一本改变其一生的书籍,比如《圣经》、《资本论》、《星期二和莫瑞在一起》、
《我想 知道我在幼儿园里学到的一切》等等. &lt;br  /&gt;
把我推向生命高峰的是安德鲁?塔南鲍姆 (Andrew S. Tanenbaum)写的《操作系统:设计和实现》。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
通过阅读和对 UNIX 的了解愈来愈深,我的热情高涨起来。&lt;br  /&gt;
说实话,我的热情从来没有低落过(我希望你在做某件事时也能说出同样的话)。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
UNIX的理念是越小越漂亮。一小堆简单基本的建筑材料,结合起来就能创造出无限的复杂表述。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
编程给人带来的最初兴奋的原因有部分是显而易见的,&lt;br  /&gt;
那就是:通过编程你可以支配一台计算机,你叫计算机做什么,它就做什么,永远准确无误,而且毫无怨言。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
一个伟大的 编程者能凭借其聪明的头脑就知道答案是什么。他知道怎样写出漂亮的程序,知道怎样采用&lt;br  /&gt;
一种全新的但最终会被证明是正确的方法。
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
在软件世界中,一旦你已解决了最根本的问题,兴趣就容易很快地消失
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
Linux 所取得的许多成功,其实可以归结为我的缺点所致: &lt;br  /&gt;
1、 我很懒散。&lt;br  /&gt;
2、 我喜欢授权给其他人。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;
我遇上了塔芙。她对我一生的影响甚至比《操作系统:设计与执行》一书对我的影响 还要大。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;总结：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 做自己想做的事。
2. just for fun
&lt;/pre&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="life" scheme="http://yoursite.com/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Clojure写DSL</title>
    <link href="http://yoursite.com/2014-05-31/2014-05-31-clojure%E5%86%99dsl/"/>
    <id>http://yoursite.com/2014-05-31/2014-05-31-clojure写dsl/</id>
    <published>2014-05-30T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:33.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Clojure写DSL</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">哲学</h3>
<div class="outline-text-3" id="text-1-1">
<blockquote>
<ol class="org-ol">
<li>没有银弹，函数式编程也只是一种编程范式。
</li>
<li>函数式编程的范式是申明式编程，关注于描述问题是什么而不是怎么实现。
</li>
<li>函数式编程本质并不是高深的S-expr，Macro，不可变状态之类的特性，而是描述要干什么，而不是怎么干。
</li>
</ol>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">什么是DSL</h3>
<div class="outline-text-3" id="text-1-2">
<p>
DSL即领域编程语言，它是用于解决特定领域问题的语言。
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">为什么需要DSL</h3>
<div class="outline-text-3" id="text-1-3">
<p>
更好的描述问题是什么，增加语言的表现力。
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">为什么可以用Lisp来写DSL</h3>
<div class="outline-text-3" id="text-1-4">
<ol class="org-ol">
<li>Lisp中数据即代码，代码即数据。
</li>
<li>Lisp的Macro可以让你定义自己的控制结构，写出自己的编程语言。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">例子</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1">Clojure实现一个Sql的DSL</h4>
<div class="outline-text-4" id="text-1-5-1">
<div class="org-src-container">

<pre class="src src-lisp">(ns clojuresql.core)

;;; jdbc &#39537;&#21160;
(require '[clojure.java.jdbc :as jdbc])

;;; &#25968;&#25454;&#24211;&#37197;&#32622;
(def db-spec {
              :subprotocol <span style="color: #00ff00;">"mysql"</span>
              :subname <span style="color: #00ff00;">"//172.17.8.101:3306/didi_db"</span>
              :user <span style="color: #00ff00;">"admin"</span>
              :password <span style="color: #00ff00;">"root"</span>})

;;; Select &#35821;&#21477;&#22788;&#29702;
(defn select
  [fields]
  (clojure.string/join
   <span style="color: #00ff00;">" "</span>
   (concat
    [<span style="color: #00ff00;">"SELECT"</span>]
    [(clojure.string/join
    <span style="color: #00ff00;">", "</span>
    fields)])))

;;; from &#35821;&#21477;&#22788;&#29702;
(defn from
  [&amp; table]
  (clojure.string/join <span style="color: #00ff00;">" "</span> (concat [<span style="color: #00ff00;">"FROM"</span>] table)))

;;; &#23450;&#20041;&#25511;&#21046;&#32467;&#26500;
(defmacro cljsql
  [&amp; sql_atom]
  `(jdbc/query
    db-spec
    [(clojure.string/join <span style="color: #00ff00;">" "</span> (list ~@sql_atom))])
  )

;;; &#20351;&#29992;
(cljsql (select [<span style="color: #00ff00;">"username"</span>, <span style="color: #00ff00;">"password"</span>])
        (from <span style="color: #00ff00;">"auth_user"</span>))
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-1-5-2" class="outline-4">
<h4 id="sec-1-5-2">解释</h4>
<div class="outline-text-4" id="text-1-5-2">
<ol class="org-ol">
<li>lisp是提倡自底向上设计的，如果没有思路，不妨从底层开始，如select函数和from函数。
</li>
<li>lisp的哲学每一层为上一层提供抽象愿语，如select和from函数为macro cljsql提供抽象原语。
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">总结：</h3>
<div class="outline-text-3" id="text-1-6">
<p>
Lisp 强大还是在于她本身的语言表现力，描述问题是什么，而不是怎么去做。
</p>
</div>
</div>

<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7">参考</h3>
<div class="outline-text-3" id="text-1-7">
<blockquote>
<p>
<a href="http://coolshell.cn/articles/10822.html" target="_blank" rel="external">http://coolshell.cn/articles/10822.html</a> <br>
<a href="http://mzhou.me/article/95219/" target="_blank" rel="external">http://mzhou.me/article/95219/</a> <br>
</p>
</blockquote>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Clojure写DSL&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;哲学&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;blockquote&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;没有银弹，函数式编程也只是一种编程范式。
&lt;/li&gt;
&lt;li&gt;函数式编程的范式是申明式编程，关注于描述问题是什么而不是怎么实现。
&lt;/li&gt;
&lt;li&gt;函数式编程本质并不是高深的S-expr，Macro，不可变状态之类的特性，而是描述要干什么，而不是怎么干。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;什么是DSL&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
DSL即领域编程语言，它是用于解决特定领域问题的语言。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;为什么需要DSL&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
更好的描述问题是什么，增加语言的表现力。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;为什么可以用Lisp来写DSL&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Lisp中数据即代码，代码即数据。
&lt;/li&gt;
&lt;li&gt;Lisp的Macro可以让你定义自己的控制结构，写出自己的编程语言。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;例子&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;Clojure实现一个Sql的DSL&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-lisp&quot;&gt;(ns clojuresql.core)

;;; jdbc &amp;#39537;&amp;#21160;
(require &#39;[clojure.java.jdbc :as jdbc])

;;; &amp;#25968;&amp;#25454;&amp;#24211;&amp;#37197;&amp;#32622;
(def db-spec {
              :subprotocol &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;mysql&quot;&lt;/span&gt;
              :subname &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;//172.17.8.101:3306/didi_db&quot;&lt;/span&gt;
              :user &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;admin&quot;&lt;/span&gt;
              :password &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;root&quot;&lt;/span&gt;})

;;; Select &amp;#35821;&amp;#21477;&amp;#22788;&amp;#29702;
(defn select
  [fields]
  (clojure.string/join
   &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot; &quot;&lt;/span&gt;
   (concat
    [&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;SELECT&quot;&lt;/span&gt;]
    [(clojure.string/join
    &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;, &quot;&lt;/span&gt;
    fields)])))

;;; from &amp;#35821;&amp;#21477;&amp;#22788;&amp;#29702;
(defn from
  [&amp;amp; table]
  (clojure.string/join &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot; &quot;&lt;/span&gt; (concat [&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;FROM&quot;&lt;/span&gt;] table)))

;;; &amp;#23450;&amp;#20041;&amp;#25511;&amp;#21046;&amp;#32467;&amp;#26500;
(defmacro cljsql
  [&amp;amp; sql_atom]
  `(jdbc/query
    db-spec
    [(clojure.string/join &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot; &quot;&lt;/span&gt; (list ~@sql_atom))])
  )

;;; &amp;#20351;&amp;#29992;
(cljsql (select [&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;username&quot;&lt;/span&gt;, &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;password&quot;&lt;/span&gt;])
        (from &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;auth_user&quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;解释&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;lisp是提倡自底向上设计的，如果没有思路，不妨从底层开始，如select函数和from函数。
&lt;/li&gt;
&lt;li&gt;lisp的哲学每一层为上一层提供抽象愿语，如select和from函数为macro cljsql提供抽象原语。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;总结：&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;p&gt;
Lisp 强大还是在于她本身的语言表现力，描述问题是什么，而不是怎么去做。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://coolshell.cn/articles/10822.html&quot;&gt;http://coolshell.cn/articles/10822.html&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://mzhou.me/article/95219/&quot;&gt;http://mzhou.me/article/95219/&lt;/a&gt; &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Clojure" scheme="http://yoursite.com/categories/Clojure/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang实现简单HTTP服务器</title>
    <link href="http://yoursite.com/2014-05-28/2014-05-28-golang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95http%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2014-05-28/2014-05-28-golang实现简单http服务器/</id>
    <published>2014-05-27T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:34.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Golang实现简单HTTP服务器</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">设计思想</h3>
<div class="outline-text-3" id="text-1-1">
<p>
一图胜千言：<br>
<img src="http://i1.piimg.com/567571/1bcc6ee379374835.png" alt="1bcc6ee379374835.png">
并发模型是，只要有client来访问就开一个goroutine去处理，goroutine之间<br>
不需要通信。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">实现的功能</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>并发处理浏览器请求。
</li>
<li>日志模块。
</li>
<li>配置模块。
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">代码结构</h3>
<div class="outline-text-3" id="text-1-3">
<div class="org-src-container">

<pre class="src src-sh">.
&#9500;&#9472;&#9472; README.md
&#9500;&#9472;&#9472; README.org
&#9500;&#9472;&#9472; deps                          <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23433;&#35013;&#31532;&#19977;&#26041;&#24211;&#33050;&#26412;</span>
&#9500;&#9472;&#9472; install                       <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#32534;&#35793;&#33050;&#26412;</span>
&#9492;&#9472;&#9472; src                           <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#28304;&#20195;&#30721;</span>
    &#9500;&#9472;&#9472; config                    <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#37197;&#32622;&#27169;&#22359;</span>
    &#9474;&#160;&#160; &#9492;&#9472;&#9472; config.go
    &#9500;&#9472;&#9472; github.com                <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#31532;&#19977;&#26041;&#24211;</span>
    &#9500;&#9472;&#9472; gohttpserver              <span style="color: #ff0000;"># </span><span style="color: #ff0000;">main&#27169;&#22359;</span>
    &#9474;&#160;&#160; &#9492;&#9472;&#9472; gohttpserver.go
    &#9500;&#9472;&#9472; logger                    <span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26085;&#24535;&#27169;&#22359;</span>
    &#9474;&#160;&#160; &#9492;&#9472;&#9472; logger.go
    &#9500;&#9472;&#9472; request                   <span style="color: #ff0000;"># </span><span style="color: #ff0000;">request &#27169;&#22359;</span>
    &#9474;&#160;&#160; &#9500;&#9472;&#9472; request.go
    &#9474;&#160;&#160; &#9492;&#9472;&#9472; request_test.go
    &#9492;&#9472;&#9472; response                  <span style="color: #ff0000;"># </span><span style="color: #ff0000;">response &#27169;&#22359;</span>
        &#9500;&#9472;&#9472; response.go
        &#9492;&#9472;&#9472; response_test.go.
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">关键代码</h3>
<div class="outline-text-3" id="text-1-4">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#22788;&#29702;client&#30340;goroutine</span>
<span style="color: #00ffff; font-weight: bold;">func</span> (ghs *<span style="color: #00ff00;">GoHttpServer</span>) <span style="color: #0000ff; font-weight: bold;">handleClient</span>(conn net.Conn) {
        reqChans := request.<span style="color: #0000ff; font-weight: bold;">RequestsChans</span>(conn)
        response.<span style="color: #0000ff; font-weight: bold;">StartResponse</span>(conn, reqChans)
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#26381;&#21153;&#22120;&#27704;&#36828;&#36816;&#34892;&#65292;&#21482;&#35201;&#26377;client&#23601;&#29992;goroutine&#21435;&#22788;&#29702;</span>
<span style="color: #00ffff; font-weight: bold;">func</span> (ghs *<span style="color: #00ff00;">GoHttpServer</span>) <span style="color: #0000ff; font-weight: bold;">ServerForever</span>() {
        <span style="color: #00ffff; font-weight: bold;">for</span> {
                conn, err := ghs.listener.<span style="color: #0000ff; font-weight: bold;">AcceptTCP</span>()
                <span style="color: #00ffff; font-weight: bold;">if</span> err != <span style="color: #ff00ff;">nil</span> {
                        logger.Logger.<span style="color: #0000ff; font-weight: bold;">Warning</span>(
                                <span style="color: #00ff00;">"Accept Client connection error, error msg %s"</span>,
                                err.<span style="color: #0000ff; font-weight: bold;">Error</span>(),
                        )
                        <span style="color: #00ffff; font-weight: bold;">continue</span>
                }
                timeout := time.Second * time.<span style="color: #0000ff; font-weight: bold;">Duration</span>(config.SerConfig.Timeout)
                conn.<span style="color: #0000ff; font-weight: bold;">SetDeadline</span>(time.<span style="color: #0000ff; font-weight: bold;">Now</span>().<span style="color: #0000ff; font-weight: bold;">Add</span>(timeout))
                <span style="color: #00ffff; font-weight: bold;">go</span> ghs.<span style="color: #0000ff; font-weight: bold;">handleClient</span>(conn)
        }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">遇到的问题</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1">如何处理Http/1.1中的Keep-Alive?</h4>
<div class="outline-text-4" id="text-1-5-1">
<p>
解决：使用channel来当作request队列，response模块从队列读取request信息返回。
</p>
<div class="org-src-container">

<pre class="src src-go"><span style="color: #ff0000;">// </span><span style="color: #ff0000;">return http request channels</span>
<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">RequestsChans</span>(conn net.Conn) <span style="color: #00ffff; font-weight: bold;">chan</span> *<span style="color: #00ff00;">Request</span> {
        reader := bufio.<span style="color: #0000ff; font-weight: bold;">NewReader</span>(conn)
        reqCap := config.SerConfig.ReqChanCap
        reqChans := <span style="color: #0000ff; font-weight: bold;">make</span>(<span style="color: #00ffff; font-weight: bold;">chan</span> *<span style="color: #00ff00;">Request</span>, reqCap)

        <span style="color: #00ffff; font-weight: bold;">go</span> <span style="color: #00ffff; font-weight: bold;">func</span>() {
                reqSlice := <span style="color: #0000ff; font-weight: bold;">make</span>([]<span style="color: #00ff00;">string</span>, reqCap)
                <span style="color: #00ffff; font-weight: bold;">for</span> {
                        line, err := reader.<span style="color: #0000ff; font-weight: bold;">ReadString</span>(<span style="color: #00ff00;">'\n'</span>)
                        <span style="color: #00ffff; font-weight: bold;">if</span> err == <span style="color: #ff00ff;">nil</span> {
                                line = strings.<span style="color: #0000ff; font-weight: bold;">TrimSpace</span>(line)
                                reqSlice = <span style="color: #0000ff; font-weight: bold;">append</span>(reqSlice, line)
                                <span style="color: #00ffff; font-weight: bold;">if</span> <span style="color: #0000ff; font-weight: bold;">len</span>(line) == 0 {
                                        req := <span style="color: #0000ff; font-weight: bold;">parseRequest</span>(reqSlice)
                                        <span style="color: #0000ff; font-weight: bold;">loggerReqInfo</span>(conn, req)
                                        reqChans &lt;- req
                                        reqSlice = reqSlice[:0]
                                }
                        } <span style="color: #00ffff; font-weight: bold;">else</span> {
                                logger.Logger.<span style="color: #0000ff; font-weight: bold;">Debug</span>(
                                        <span style="color: #00ff00;">"Ip %s connection close, close msg %s"</span>,
                                        conn.<span style="color: #0000ff; font-weight: bold;">RemoteAddr</span>().<span style="color: #0000ff; font-weight: bold;">String</span>(),
                                        err.<span style="color: #0000ff; font-weight: bold;">Error</span>(),
                                )
                                conn.<span style="color: #0000ff; font-weight: bold;">Close</span>()
                                <span style="color: #00ffff; font-weight: bold;">break</span>
                        }
                }
                <span style="color: #0000ff; font-weight: bold;">close</span>(reqChans)
        }()
        <span style="color: #00ffff; font-weight: bold;">return</span> reqChans
}
</pre>
</div>

<p>
完整代码请参照<a href="https://bitbucket.org/runforever/gohttpserver/overview" target="_blank" rel="external">https://bitbucket.org/runforever/gohttpserver/overview</a>
<a id="more"></a>
</p>
</div>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Golang实现简单HTTP服务器&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;设计思想&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
一图胜千言：&lt;br  /&gt;
&lt;img src=&quot;http://i1.piimg.com/567571/1bcc6ee379374835.png&quot; alt=&quot;1bcc6ee379374835.png&quot; /&gt;
并发模型是，只要有client来访问就开一个goroutine去处理，goroutine之间&lt;br  /&gt;
不需要通信。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;实现的功能&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;并发处理浏览器请求。
&lt;/li&gt;
&lt;li&gt;日志模块。
&lt;/li&gt;
&lt;li&gt;配置模块。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;代码结构&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;.
&amp;#9500;&amp;#9472;&amp;#9472; README.md
&amp;#9500;&amp;#9472;&amp;#9472; README.org
&amp;#9500;&amp;#9472;&amp;#9472; deps                          &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23433;&amp;#35013;&amp;#31532;&amp;#19977;&amp;#26041;&amp;#24211;&amp;#33050;&amp;#26412;&lt;/span&gt;
&amp;#9500;&amp;#9472;&amp;#9472; install                       &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#32534;&amp;#35793;&amp;#33050;&amp;#26412;&lt;/span&gt;
&amp;#9492;&amp;#9472;&amp;#9472; src                           &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#28304;&amp;#20195;&amp;#30721;&lt;/span&gt;
    &amp;#9500;&amp;#9472;&amp;#9472; config                    &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#37197;&amp;#32622;&amp;#27169;&amp;#22359;&lt;/span&gt;
    &amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; config.go
    &amp;#9500;&amp;#9472;&amp;#9472; github.com                &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#31532;&amp;#19977;&amp;#26041;&amp;#24211;&lt;/span&gt;
    &amp;#9500;&amp;#9472;&amp;#9472; gohttpserver              &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;main&amp;#27169;&amp;#22359;&lt;/span&gt;
    &amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; gohttpserver.go
    &amp;#9500;&amp;#9472;&amp;#9472; logger                    &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26085;&amp;#24535;&amp;#27169;&amp;#22359;&lt;/span&gt;
    &amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; logger.go
    &amp;#9500;&amp;#9472;&amp;#9472; request                   &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;request &amp;#27169;&amp;#22359;&lt;/span&gt;
    &amp;#9474;&amp;#160;&amp;#160; &amp;#9500;&amp;#9472;&amp;#9472; request.go
    &amp;#9474;&amp;#160;&amp;#160; &amp;#9492;&amp;#9472;&amp;#9472; request_test.go
    &amp;#9492;&amp;#9472;&amp;#9472; response                  &lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;response &amp;#27169;&amp;#22359;&lt;/span&gt;
        &amp;#9500;&amp;#9472;&amp;#9472; response.go
        &amp;#9492;&amp;#9472;&amp;#9472; response_test.go.
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;关键代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22788;&amp;#29702;client&amp;#30340;goroutine&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (ghs *&lt;span style=&quot;color: #00ff00;&quot;&gt;GoHttpServer&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;handleClient&lt;/span&gt;(conn net.Conn) {
        reqChans := request.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;RequestsChans&lt;/span&gt;(conn)
        response.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;StartResponse&lt;/span&gt;(conn, reqChans)
}

&lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#27704;&amp;#36828;&amp;#36816;&amp;#34892;&amp;#65292;&amp;#21482;&amp;#35201;&amp;#26377;client&amp;#23601;&amp;#29992;goroutine&amp;#21435;&amp;#22788;&amp;#29702;&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (ghs *&lt;span style=&quot;color: #00ff00;&quot;&gt;GoHttpServer&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;ServerForever&lt;/span&gt;() {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; {
                conn, err := ghs.listener.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;AcceptTCP&lt;/span&gt;()
                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; err != &lt;span style=&quot;color: #ff00ff;&quot;&gt;nil&lt;/span&gt; {
                        logger.Logger.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Warning&lt;/span&gt;(
                                &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;Accept Client connection error, error msg %s&quot;&lt;/span&gt;,
                                err.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Error&lt;/span&gt;(),
                        )
                        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;continue&lt;/span&gt;
                }
                timeout := time.Second * time.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Duration&lt;/span&gt;(config.SerConfig.Timeout)
                conn.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;SetDeadline&lt;/span&gt;(time.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Now&lt;/span&gt;().&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Add&lt;/span&gt;(timeout))
                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;go&lt;/span&gt; ghs.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;handleClient&lt;/span&gt;(conn)
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;遇到的问题&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;如何处理Http/1.1中的Keep-Alive?&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;p&gt;
解决：使用channel来当作request队列，response模块从队列读取request信息返回。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;return http request channels&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;RequestsChans&lt;/span&gt;(conn net.Conn) &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;chan&lt;/span&gt; *&lt;span style=&quot;color: #00ff00;&quot;&gt;Request&lt;/span&gt; {
        reader := bufio.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;NewReader&lt;/span&gt;(conn)
        reqCap := config.SerConfig.ReqChanCap
        reqChans := &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;make&lt;/span&gt;(&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;chan&lt;/span&gt; *&lt;span style=&quot;color: #00ff00;&quot;&gt;Request&lt;/span&gt;, reqCap)

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;go&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt;() {
                reqSlice := &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;make&lt;/span&gt;([]&lt;span style=&quot;color: #00ff00;&quot;&gt;string&lt;/span&gt;, reqCap)
                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; {
                        line, err := reader.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;ReadString&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&#39;\n&#39;&lt;/span&gt;)
                        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; err == &lt;span style=&quot;color: #ff00ff;&quot;&gt;nil&lt;/span&gt; {
                                line = strings.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;TrimSpace&lt;/span&gt;(line)
                                reqSlice = &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;append&lt;/span&gt;(reqSlice, line)
                                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;len&lt;/span&gt;(line) == 0 {
                                        req := &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;parseRequest&lt;/span&gt;(reqSlice)
                                        &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;loggerReqInfo&lt;/span&gt;(conn, req)
                                        reqChans &amp;lt;- req
                                        reqSlice = reqSlice[:0]
                                }
                        } &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;else&lt;/span&gt; {
                                logger.Logger.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Debug&lt;/span&gt;(
                                        &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;Ip %s connection close, close msg %s&quot;&lt;/span&gt;,
                                        conn.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;RemoteAddr&lt;/span&gt;().&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;String&lt;/span&gt;(),
                                        err.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Error&lt;/span&gt;(),
                                )
                                conn.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Close&lt;/span&gt;()
                                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;break&lt;/span&gt;
                        }
                }
                &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;close&lt;/span&gt;(reqChans)
        }()
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; reqChans
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
完整代码请参照&lt;a href=&quot;https://bitbucket.org/runforever/gohttpserver/overview&quot;&gt;https://bitbucket.org/runforever/gohttpserver/overview&lt;/a&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
      <category term="Http" scheme="http://yoursite.com/categories/Go/Http/"/>
    
    
  </entry>
  
  <entry>
    <title>如何正确的打印日志</title>
    <link href="http://yoursite.com/2014-05-24/2014-05-24-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E7%9A%84%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/"/>
    <id>http://yoursite.com/2014-05-24/2014-05-24-如何正确的打印日志/</id>
    <published>2014-05-23T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:34.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">如果正确的打印日志</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">哲学</h3>
<div class="outline-text-3" id="text-1-1">
<blockquote>
<ol class="org-ol">
<li>日志应该像代码一样易于阅读和理解 <br>
</li>
<li>清楚你在记录什么<br>
</li>
<li>不要为了日志而记日志 <br>
</li>
</ol>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">日志级别</h3>
<div class="outline-text-3" id="text-1-2">
<pre class="example">
一个项目各个log级别的定义应该是清楚明确的，是每个开发人员所遵循的；
即使是TRACE或者DEBUG级别的日志，也应该有一定的规范，要保证除了开发人员自己以外，
包括测试人员和运维人员都可以方便地通过日志定位问题；

对于日志级别的分类，有以下参考：
FATAL — 表示需要立即被处理的系统级错误。当该错误发生时，表示服务已经出现了
某种程度的不可用，系统管理员需要立即介入。这属于最严重的日志级别，因此该
日志级 别必须慎用，如果这种级别的日志经常出现，则该日志也失去了意义。
通常情况下，一个进程的生命周期中应该只记录一次FATAL级别的日志，即该进程遇到无
法恢复的错误而退出时。当然，如果某个系统的子系统遇到了不可恢复的错误，那该
子系统的调用方也可以记入FATAL级别日志，以便通过日志报警提醒系统管 理员修复；

ERROR — 该级别的错误也需要马上被处理，但是紧急程度要低于FATAL级别。
当ERROR错误发生时，已经影响了用户的正常访问。从该意义上来说，实际上
ERROR错误和FATAL错误对用户的影响是相当的。FATAL相当于服务已经挂了，
而ERROR相当于好死不如赖活着，然而活着却无法提供正常的服务，只能不
断地打印ERROR日志。特别需要注意的是，ERROR和FATAL都属于服务器自己的
异常，是需要马上得到人工介入并处理的。而对于用户自己 操作不当，
如请求参数错误等等，是绝对不应该记为ERROR日志的；

WARN — 该日志表示系统可能出现问题，也可能没有，这种情况如网络的波动等。
对于那些目前还不是错误，然而不及时处理也会变为错误的情况，也可以记为WARN日志，
例如一个存储系统的磁盘使用量超过阀值，或者系统中某个用户的存储配额快用完等等。
对于WARN级别的日志，虽然不需要系统管理员马上处理，也是需要 即使查看并处理的。
因此此种级别的日志也不应太多，能不打WARN级别的日志，就尽量不要打；

INFO — 该种日志记录系统的正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。
通过查看INFO级别的日志，可以很快地对系统中出现的 WARN,ERROR,FATAL错误进行定位。
INFO日志不宜过多，通常情况下，INFO级别的日志应该不大于TRACE日志的10%；

DEBUG or TRACE — 这两种日志具体的规范应该由项目组自己定义，该级别日志的
主要作用是对系统每一步的运行状态进行精确的记录。通过该种日志，可以查看
某一个操作每一步的执 行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生。
可以保证在不重现错误的情况下，也可以通过DEBUG（或TRACE）级别的 日志对问题进行诊断。
需要注意的是，DEBUG日志也需要规范日志格式，应该保证除了记录日志的开发人员自己外，
其他的如运维，测试人员等也可以通过 DEBUG（或TRACE）日志来定位问题；
</pre>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">为什么要做日志</h3>
<div class="outline-text-3" id="text-1-3">
<ol class="org-ol">
<li>开发过程中帮组开发人员跟踪程序崩溃的原因(DEBUG)。（个人更喜欢喜欢用print和debug）
</li>
<li>记录一些程序的运行记录(INFO)。
</li>
<li>程序运行错误的上下文信息(ERROR)。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">参考</h3>
<div class="outline-text-3" id="text-1-4">
<blockquote>
<p>
<a href="http://it.deepinmind.com/java/2014/02/27/%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E7%9A%8410%E4%B8%AA%E5%BB%BA%E8%AE%AE.html" target="_blank" rel="external">打印日志的10个建议</a> <br>
<a href="http://www.oschina.net/question/12_44624" target="_blank" rel="external">logging日志记录的最佳实践</a> <br>
<a href="http:blog.jobbole.com/56574/" target="_blank" rel="external">王健：最佳日志实践</a> <br>
</p>
</blockquote>
<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;如果正确的打印日志&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;哲学&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;blockquote&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;日志应该像代码一样易于阅读和理解 &lt;br  /&gt;
&lt;/li&gt;
&lt;li&gt;清楚你在记录什么&lt;br  /&gt;
&lt;/li&gt;
&lt;li&gt;不要为了日志而记日志 &lt;br  /&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;日志级别&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
一个项目各个log级别的定义应该是清楚明确的，是每个开发人员所遵循的；
即使是TRACE或者DEBUG级别的日志，也应该有一定的规范，要保证除了开发人员自己以外，
包括测试人员和运维人员都可以方便地通过日志定位问题；

对于日志级别的分类，有以下参考：
FATAL — 表示需要立即被处理的系统级错误。当该错误发生时，表示服务已经出现了
某种程度的不可用，系统管理员需要立即介入。这属于最严重的日志级别，因此该
日志级 别必须慎用，如果这种级别的日志经常出现，则该日志也失去了意义。
通常情况下，一个进程的生命周期中应该只记录一次FATAL级别的日志，即该进程遇到无
法恢复的错误而退出时。当然，如果某个系统的子系统遇到了不可恢复的错误，那该
子系统的调用方也可以记入FATAL级别日志，以便通过日志报警提醒系统管 理员修复；

ERROR — 该级别的错误也需要马上被处理，但是紧急程度要低于FATAL级别。
当ERROR错误发生时，已经影响了用户的正常访问。从该意义上来说，实际上
ERROR错误和FATAL错误对用户的影响是相当的。FATAL相当于服务已经挂了，
而ERROR相当于好死不如赖活着，然而活着却无法提供正常的服务，只能不
断地打印ERROR日志。特别需要注意的是，ERROR和FATAL都属于服务器自己的
异常，是需要马上得到人工介入并处理的。而对于用户自己 操作不当，
如请求参数错误等等，是绝对不应该记为ERROR日志的；

WARN — 该日志表示系统可能出现问题，也可能没有，这种情况如网络的波动等。
对于那些目前还不是错误，然而不及时处理也会变为错误的情况，也可以记为WARN日志，
例如一个存储系统的磁盘使用量超过阀值，或者系统中某个用户的存储配额快用完等等。
对于WARN级别的日志，虽然不需要系统管理员马上处理，也是需要 即使查看并处理的。
因此此种级别的日志也不应太多，能不打WARN级别的日志，就尽量不要打；

INFO — 该种日志记录系统的正常运行状态，例如某个子系统的初始化，某个请求的成功执行等等。
通过查看INFO级别的日志，可以很快地对系统中出现的 WARN,ERROR,FATAL错误进行定位。
INFO日志不宜过多，通常情况下，INFO级别的日志应该不大于TRACE日志的10%；

DEBUG or TRACE — 这两种日志具体的规范应该由项目组自己定义，该级别日志的
主要作用是对系统每一步的运行状态进行精确的记录。通过该种日志，可以查看
某一个操作每一步的执 行过程，可以准确定位是何种操作，何种参数，何种顺序导致了某种错误的发生。
可以保证在不重现错误的情况下，也可以通过DEBUG（或TRACE）级别的 日志对问题进行诊断。
需要注意的是，DEBUG日志也需要规范日志格式，应该保证除了记录日志的开发人员自己外，
其他的如运维，测试人员等也可以通过 DEBUG（或TRACE）日志来定位问题；
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;为什么要做日志&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;开发过程中帮组开发人员跟踪程序崩溃的原因(DEBUG)。（个人更喜欢喜欢用print和debug）
&lt;/li&gt;
&lt;li&gt;记录一些程序的运行记录(INFO)。
&lt;/li&gt;
&lt;li&gt;程序运行错误的上下文信息(ERROR)。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://it.deepinmind.com/java/2014/02/27/%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E7%9A%8410%E4%B8%AA%E5%BB%BA%E8%AE%AE.html&quot;&gt;打印日志的10个建议&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://www.oschina.net/question/12_44624&quot;&gt;logging日志记录的最佳实践&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http:blog.jobbole.com/56574/&quot;&gt;王健：最佳日志实践&lt;/a&gt; &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="logging" scheme="http://yoursite.com/categories/logging/"/>
    
    
  </entry>
  
  <entry>
    <title>Emacs clojure-mode使用</title>
    <link href="http://yoursite.com/2014-05-18/2014-05-18-emacs-clojure-mode%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2014-05-18/2014-05-18-emacs-clojure-mode使用/</id>
    <published>2014-05-17T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:34.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Emacs 中使用Clojure Mode</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">基本配置</h3>
<div class="outline-text-3" id="text-1-1">
<p>
兄弟，不要折腾了，直接照抄Emacs大师Steve Purcell的配置<a href="https://github.com/purcell/emacs.d" target="_blank" rel="external">https://github.com/purcell/emacs.d</a> <br>
配置完之后Clojure－Mode已经配置好，附带一些其他的配置。
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">使用</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1">安装leiningen <a href="https://github.com/technomancy/leiningen" target="_blank" rel="external">https://github.com/technomancy/leiningen</a></h4>
<div class="outline-text-4" id="text-1-2-1">
<p>
leiningen 是一个Clojure的项目管理工具。
</p>
</div>
</div>

<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2">常用快捷键</h4>
<div class="outline-text-4" id="text-1-2-2">
<p>
M-x cider-jack-in 打开一个repl 的session，你编写的Clojure代码之后会在这里运行。<br>
</p>

<p>
C-c C-k 编译Clojure代码，如果编译出错 C-c C-f来定位错误的地方然后修正。<br>
</p>

<p>
C-c C-, 可以用来运行测试文件，结果会输出到打开的repl session。<br>
</p>

<p>
C-c M-n 用来切换repl session的namespace， 如果你正在编写一个clojure文件，可以<br>
使用这个快捷键来一边开发，一边测试。<br>
</p>

<p>
C-c C-o 可以用来清初repl session的无用信息。<br>
</p>

<p>
C-c C-d 可以用来查看函数的doc。<br>
</p>

<p>
M-. 可以查看函数的源代码。<br>
</p>

<p>
M-, 用来查看第三方库。<br>
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">参考</h3>
<div class="outline-text-3" id="text-1-3">
<blockquote>
<p>
<a href="https://github.com/technomancy/leiningen" target="_blank" rel="external">https://github.com/technomancy/leiningen</a> leiningen使用 <br>
<a href="http://clojure-doc.org/articles/tutorials/emacs.html" target="_blank" rel="external">http://clojure-doc.org/articles/tutorials/emacs.html</a> 官方教程 <br>
</p>
</blockquote>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Emacs 中使用Clojure Mode&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;基本配置&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
兄弟，不要折腾了，直接照抄Emacs大师Steve Purcell的配置&lt;a href=&quot;https://github.com/purcell/emacs.d&quot;&gt;https://github.com/purcell/emacs.d&lt;/a&gt; &lt;br  /&gt;
配置完之后Clojure－Mode已经配置好，附带一些其他的配置。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;使用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;安装leiningen &lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;https://github.com/technomancy/leiningen&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;p&gt;
leiningen 是一个Clojure的项目管理工具。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;常用快捷键&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;p&gt;
M-x cider-jack-in 打开一个repl 的session，你编写的Clojure代码之后会在这里运行。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
C-c C-k 编译Clojure代码，如果编译出错 C-c C-f来定位错误的地方然后修正。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
C-c C-, 可以用来运行测试文件，结果会输出到打开的repl session。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
C-c M-n 用来切换repl session的namespace， 如果你正在编写一个clojure文件，可以&lt;br  /&gt;
使用这个快捷键来一边开发，一边测试。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
C-c C-o 可以用来清初repl session的无用信息。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
C-c C-d 可以用来查看函数的doc。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
M-. 可以查看函数的源代码。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
M-, 用来查看第三方库。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;https://github.com/technomancy/leiningen&lt;/a&gt; leiningen使用 &lt;br  /&gt;
&lt;a href=&quot;http://clojure-doc.org/articles/tutorials/emacs.html&quot;&gt;http://clojure-doc.org/articles/tutorials/emacs.html&lt;/a&gt; 官方教程 &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Clojure" scheme="http://yoursite.com/categories/Clojure/"/>
    
      <category term="Emacs" scheme="http://yoursite.com/categories/Clojure/Emacs/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker使用笔记</title>
    <link href="http://yoursite.com/2014-05-01/2014-05-01-docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2014-05-01/2014-05-01-docker使用笔记/</id>
    <published>2014-04-30T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:34.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Docker使用笔记</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">什么是Docker</h3>
<div class="outline-text-3" id="text-1-1">
<p class="verse">
docker的英文本意是码头工人，也就是搬运工，这种搬运工搬运的是集装箱（Container），<br>
集装箱里面装的可不是商品货物，而是任意类型的App，Docker把App（叫Payload）装在Container内，<br>
通过Linux Container技术的包装将App变成一种标准化的、可移植的、自管理的组件，<br>
这种组件可以在你的latop上开发、调试、运行，最终非常方便和一致地运行在production环境下。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">Docker的特点</h3>
<div class="outline-text-3" id="text-1-2">
<p class="verse">
1. Docker提供了一种可移植的配置标准化机制，允许你一致性地在不同的机器上运行同一个Container；而LXC本身可能因为不同机器的不同配置而无法方便地移植运行；<br>
2. Docker以App为中心，为应用的部署做了很多优化，而LXC的帮助脚本主要是聚焦于如何机器启动地更快和耗更少的内存；<br>
3. Docker为App提供了一种自动化构建机制（Dockerfile），包括打包，基础设施依赖管理和安装等等；<br>
4. Docker提供了一种类似git的Container版本化的机制，允许你对你创建过的容器进行版本管理，依靠这种机制，你还可以下载别人创建的Container，甚至像git那样进行合并；<br>
5. Docker Container是可重用的，依赖于版本化机制，你很容易重用别人的Container（叫Image），作为基础版本进行扩展；<br>
6. Docker Container是可共享的，有点类似github一样，Docker有自己的INDEX，你可以创建自己的Docker用户并上传和下载Docker Image；<br>
7. Docker提供了很多的工具链，形成了一个生态系统；这些工具的目标是自动化、个性化和集成化，包括对PAAS平台的支持等；<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">为什么使用Docker</h3>
<div class="outline-text-3" id="text-1-3">
<p class="verse">
1. 打包的开发环境，方便部署和迁移。<br>
2. 对于没有服务器的程序员可以用来模拟集群。<br>
3. 保持开发机器的干净整洁，将数据库、Web服务器这些东西放到Container里。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">Mac上使用Docker</h3>
<div class="outline-text-3" id="text-1-4">
<p>
直接根据官网教程安装即可，<a href="https://docs.docker.com/docker-for-mac/" target="_blank" rel="external">https://docs.docker.com/docker-for-mac/</a>
</p>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">使用Docker</h3>
<div class="outline-text-3" id="text-1-5">
<p>
首先请查看官方的基础教程，移步<a href="https://www.docker.io/gettingstarted/" target="_blank" rel="external">https://www.docker.io/gettingstarted/</a>  <br>
</p>

<p>
Docker类似Git，可以使用pull命令获取公共镜像。<br>
如我的开发环境需要Mysql，我可以很方便的使用下面的命令获取镜像。<br>
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#25214;&#21253;&#21547;MySql&#26381;&#21153;&#30340;&#38236;&#20687;</span>
docker search mysql

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#25214;&#21040;&#21518;</span>
docker pull tutum/mysql

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#19979;&#36733;&#23436;&#25104;&#21518;&#36816;&#34892;&#65292; -d &#26159;deamon&#26041;&#24335;&#36816;&#34892;&#65292;-p &#26159;&#31471;&#21475;&#36716;&#21457;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21629;&#20196;&#30340;&#24847;&#24605;&#26159;&#21518;&#21488;&#36816;&#34892;&#36825;&#20010;Container&#65292;&#24182;&#19988;&#23558;CoreOS&#30340;3306&#31471;&#21475;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#36716;&#21457;&#21040;Container&#30340;3306&#31471;&#21475;&#19978;</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23487;&#20027;&#26426;&#22120;&#65288;Mac&#65289;&#23601;&#21487;&#20197;&#36890;&#36807;mysql -h CoreOS&#30340;&#22806;&#32593;IP -u admin -p</span>
<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#36830;&#25509;Mysql&#26381;&#21153;&#20102;</span>
docker run -d -p 3306:3306 tutum/mysql
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">Docker 常用命令</h3>
<div class="outline-text-3" id="text-1-6">
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#30475;&#25152;&#26377;image</span>
docker images

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#30475;&#27491;&#22312;&#36816;&#34892;&#30340;Container&#65292;-l &#26159;&#26368;&#21518;&#36816;&#34892;&#30340;Container&#65292;-a &#25152;&#26377;&#36816;&#34892;&#30340;Container</span>
docker ps

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#30475;Container&#30340;&#36816;&#34892;&#20449;&#24687;</span>
docker logs container_id

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#26597;&#30475;Container&#30340;&#37197;&#32622;&#20449;&#24687;&#12290;</span>
docker inspect

<span style="color: #ff0000;">#</span><span style="color: #ff0000;">&#20132;&#20114;&#24335;&#36816;&#34892;shell&#65292;&#23601;&#20687;ssh&#21040;Container&#19968;&#26679;&#65292;&#21487;&#20197;&#22312;Container&#37324;Do everything</span>
docker run -i -t image_id /bin/bash

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#23558;&#23545;Container&#30340;&#20462;&#25913;&#25552;&#20132;&#65292;&#23450;&#21046;&#33258;&#24049;&#30340;Image</span>
docker commit container_id image_name

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21024;&#38500;&#25152;&#26377;&#30340;&#38236;&#20687;&#65288;&#24910;&#29992;&#65289;</span>
docker kill $(docker ps -q) ; docker rm $(docker ps -a -q) ; docker rmi $(docker images -q -a)

<span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#21024;&#38500;&#25152;&#26377;&#30340;Container</span>
docker rm <span style="color: #ff00ff;">`docker ps -a -q`</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7">参考</h3>
<div class="outline-text-3" id="text-1-7">
<blockquote>
<p>
<a href="http://tech.uc.cn/?p=2726" target="_blank" rel="external">http://tech.uc.cn/?p=2726</a> <br>
<a href="http://cn.soulmachine.me/blog/20131026/" target="_blank" rel="external">http://cn.soulmachine.me/blog/20131026/</a> <br>
<a href="http://blog.segmentfault.com/yexiaobai/1190000000482229" target="_blank" rel="external">http://blog.segmentfault.com/yexiaobai/1190000000482229</a> <br>
</p>
</blockquote>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Docker使用笔记&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;什么是Docker&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
docker的英文本意是码头工人，也就是搬运工，这种搬运工搬运的是集装箱（Container），&lt;br  /&gt;
集装箱里面装的可不是商品货物，而是任意类型的App，Docker把App（叫Payload）装在Container内，&lt;br  /&gt;
通过Linux Container技术的包装将App变成一种标准化的、可移植的、自管理的组件，&lt;br  /&gt;
这种组件可以在你的latop上开发、调试、运行，最终非常方便和一致地运行在production环境下。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Docker的特点&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
1. Docker提供了一种可移植的配置标准化机制，允许你一致性地在不同的机器上运行同一个Container；而LXC本身可能因为不同机器的不同配置而无法方便地移植运行；&lt;br  /&gt;
2. Docker以App为中心，为应用的部署做了很多优化，而LXC的帮助脚本主要是聚焦于如何机器启动地更快和耗更少的内存；&lt;br  /&gt;
3. Docker为App提供了一种自动化构建机制（Dockerfile），包括打包，基础设施依赖管理和安装等等；&lt;br  /&gt;
4. Docker提供了一种类似git的Container版本化的机制，允许你对你创建过的容器进行版本管理，依靠这种机制，你还可以下载别人创建的Container，甚至像git那样进行合并；&lt;br  /&gt;
5. Docker Container是可重用的，依赖于版本化机制，你很容易重用别人的Container（叫Image），作为基础版本进行扩展；&lt;br  /&gt;
6. Docker Container是可共享的，有点类似github一样，Docker有自己的INDEX，你可以创建自己的Docker用户并上传和下载Docker Image；&lt;br  /&gt;
7. Docker提供了很多的工具链，形成了一个生态系统；这些工具的目标是自动化、个性化和集成化，包括对PAAS平台的支持等；&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;为什么使用Docker&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
1. 打包的开发环境，方便部署和迁移。&lt;br  /&gt;
2. 对于没有服务器的程序员可以用来模拟集群。&lt;br  /&gt;
3. 保持开发机器的干净整洁，将数据库、Web服务器这些东西放到Container里。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;Mac上使用Docker&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
直接根据官网教程安装即可，&lt;a href=&quot;https://docs.docker.com/docker-for-mac/&quot;&gt;https://docs.docker.com/docker-for-mac/&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;使用Docker&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;p&gt;
首先请查看官方的基础教程，移步&lt;a href=&quot;https://www.docker.io/gettingstarted/&quot;&gt;https://www.docker.io/gettingstarted/&lt;/a&gt;  &lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
Docker类似Git，可以使用pull命令获取公共镜像。&lt;br  /&gt;
如我的开发环境需要Mysql，我可以很方便的使用下面的命令获取镜像。&lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26597;&amp;#25214;&amp;#21253;&amp;#21547;MySql&amp;#26381;&amp;#21153;&amp;#30340;&amp;#38236;&amp;#20687;&lt;/span&gt;
docker search mysql

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25214;&amp;#21040;&amp;#21518;&lt;/span&gt;
docker pull tutum/mysql

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#19979;&amp;#36733;&amp;#23436;&amp;#25104;&amp;#21518;&amp;#36816;&amp;#34892;&amp;#65292; -d &amp;#26159;deamon&amp;#26041;&amp;#24335;&amp;#36816;&amp;#34892;&amp;#65292;-p &amp;#26159;&amp;#31471;&amp;#21475;&amp;#36716;&amp;#21457;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#21629;&amp;#20196;&amp;#30340;&amp;#24847;&amp;#24605;&amp;#26159;&amp;#21518;&amp;#21488;&amp;#36816;&amp;#34892;&amp;#36825;&amp;#20010;Container&amp;#65292;&amp;#24182;&amp;#19988;&amp;#23558;CoreOS&amp;#30340;3306&amp;#31471;&amp;#21475;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#36716;&amp;#21457;&amp;#21040;Container&amp;#30340;3306&amp;#31471;&amp;#21475;&amp;#19978;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23487;&amp;#20027;&amp;#26426;&amp;#22120;&amp;#65288;Mac&amp;#65289;&amp;#23601;&amp;#21487;&amp;#20197;&amp;#36890;&amp;#36807;mysql -h CoreOS&amp;#30340;&amp;#22806;&amp;#32593;IP -u admin -p&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#36830;&amp;#25509;Mysql&amp;#26381;&amp;#21153;&amp;#20102;&lt;/span&gt;
docker run -d -p 3306:3306 tutum/mysql
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;Docker 常用命令&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26597;&amp;#30475;&amp;#25152;&amp;#26377;image&lt;/span&gt;
docker images

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26597;&amp;#30475;&amp;#27491;&amp;#22312;&amp;#36816;&amp;#34892;&amp;#30340;Container&amp;#65292;-l &amp;#26159;&amp;#26368;&amp;#21518;&amp;#36816;&amp;#34892;&amp;#30340;Container&amp;#65292;-a &amp;#25152;&amp;#26377;&amp;#36816;&amp;#34892;&amp;#30340;Container&lt;/span&gt;
docker ps

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26597;&amp;#30475;Container&amp;#30340;&amp;#36816;&amp;#34892;&amp;#20449;&amp;#24687;&lt;/span&gt;
docker logs container_id

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#26597;&amp;#30475;Container&amp;#30340;&amp;#37197;&amp;#32622;&amp;#20449;&amp;#24687;&amp;#12290;&lt;/span&gt;
docker inspect

&lt;span style=&quot;color: #ff0000;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20132;&amp;#20114;&amp;#24335;&amp;#36816;&amp;#34892;shell&amp;#65292;&amp;#23601;&amp;#20687;ssh&amp;#21040;Container&amp;#19968;&amp;#26679;&amp;#65292;&amp;#21487;&amp;#20197;&amp;#22312;Container&amp;#37324;Do everything&lt;/span&gt;
docker run -i -t image_id /bin/bash

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23558;&amp;#23545;Container&amp;#30340;&amp;#20462;&amp;#25913;&amp;#25552;&amp;#20132;&amp;#65292;&amp;#23450;&amp;#21046;&amp;#33258;&amp;#24049;&amp;#30340;Image&lt;/span&gt;
docker commit container_id image_name

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#21024;&amp;#38500;&amp;#25152;&amp;#26377;&amp;#30340;&amp;#38236;&amp;#20687;&amp;#65288;&amp;#24910;&amp;#29992;&amp;#65289;&lt;/span&gt;
docker kill $(docker ps -q) ; docker rm $(docker ps -a -q) ; docker rmi $(docker images -q -a)

&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#21024;&amp;#38500;&amp;#25152;&amp;#26377;&amp;#30340;Container&lt;/span&gt;
docker rm &lt;span style=&quot;color: #ff00ff;&quot;&gt;`docker ps -a -q`&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://tech.uc.cn/?p=2726&quot;&gt;http://tech.uc.cn/?p=2726&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://cn.soulmachine.me/blog/20131026/&quot;&gt;http://cn.soulmachine.me/blog/20131026/&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://blog.segmentfault.com/yexiaobai/1190000000482229&quot;&gt;http://blog.segmentfault.com/yexiaobai/1190000000482229&lt;/a&gt; &lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang单元测试</title>
    <link href="http://yoursite.com/2014-04-27/2014-04-27-golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2014-04-27/2014-04-27-golang单元测试/</id>
    <published>2014-04-26T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:35.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Golang 单元测试</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">哲学</h3>
<div class="outline-text-3" id="text-1-1">
<blockquote>
<p>
测试只能证明你的代码有问题，不能证明你的代码没有问题。
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">测似的粒度</h3>
<div class="outline-text-3" id="text-1-2">
<p class="verse">
老板为我的代码付报酬，而不是测试，所以，我对此的价值观是——测试越少越好，<br>
少到你对你的代码质量达到了某种自信（我觉得这种的自信标准应该要高于业内的<br>
标准，当然，这种自信也可能是种自大）。如果我的编码生涯中不会犯这种典型的<br>
错误（如：在构造函数中设了个错误的值），那我就不会测试它。我倾向于去对<br>
那些有意义的错误做测试，所以，我对一些比较复杂的条件逻辑会异常地小心。<br>
当在一个团队中，我会非常小心的测试那些会让团队容易出错的代码。<br>
<br>
个人理解：测试需要测有意义的东西，而不是盲目的100%覆盖，需要的是恰到好处<br>
的UT。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">TDD(测试驱动开发)</h3>
<div class="outline-text-3" id="text-1-3">
<p class="verse">
个人理解：<br>
1. 测试不能帮助你写出优秀的设计，只能保证你写的代码不出错。<br>
2. 软件开发是一种发现问题解决问题的过程，TDD并不能达到这样<br>
&#xa0;&#xa0;&#xa0;的效果。<br>
3. TDD保证代码正确，但是什么来保证TDD的case是正确的。<br>
4. TDD的好处大多是理论上的，实际上是不是只有做过才知道。<br>
5. 决定软件工艺的还是设计，程序员需要知道怎么思考，怎么设计，<br>
&#xa0;&#xa0;&#xa0;怎么测试，而不是教条主义的照搬某某理论，某某Best Practice。<br>
6. 软件工程是没有银弹的，TDD也许适合你的项目，你的编程风格，<br>
&#xa0;&#xa0;&#xa0;但是不一定适合所有人。<br>
<br>
总结： 软件需要的是恰到好处的设计和单元测试。<br>
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">Go语言中的单元测试</h3>
<div class="outline-text-3" id="text-1-4">
<p>
go语言自带 <b>testing</b> 测试框架， <b>go test</b> 命令可以运行单元测试和性能测试。<br>
</p>
</div>

<div id="outline-container-sec-1-4-1" class="outline-4">
<h4 id="sec-1-4-1">使用</h4>
</div>
</div>
<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">exa.go 文件</h3>
<div class="outline-text-3" id="text-1-5">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">package</span> main

<span style="color: #00ffff; font-weight: bold;">import</span> <span style="color: #00ff00;">"fmt"</span>

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">Add</span>(x, y int) int {
        <span style="color: #00ffff; font-weight: bold;">return</span> x + y
}

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">main</span>() {
        x, y := 1, 2
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(<span style="color: #0000ff; font-weight: bold;">Add</span>(x, y))
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">exa_test.go 测试文件</h3>
<div class="outline-text-3" id="text-1-6">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">package</span> main

<span style="color: #00ffff; font-weight: bold;">import</span> (
        <span style="color: #00ff00;">"testing"</span>
)

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">TestAdd</span>(t *testing.T) {
        <span style="color: #00ffff; font-weight: bold;">if</span> x := <span style="color: #0000ff; font-weight: bold;">Add</span>(1, 3); x != 4 {
                t.<span style="color: #0000ff; font-weight: bold;">Error</span>(<span style="color: #00ff00;">"error in test Add"</span>)
        }
        <span style="color: #00ffff; font-weight: bold;">if</span> x := <span style="color: #0000ff; font-weight: bold;">Add</span>(1, 3); x != 5 {
                t.<span style="color: #0000ff; font-weight: bold;">Error</span>(<span style="color: #00ff00;">"error in test Add 5"</span>)
        }
}
</pre>
</div>

<div class="org-src-container">

<pre class="src src-sh"><span style="color: #ff0000;"># </span><span style="color: #ff0000;">&#22312;&#24403;&#21069;&#25991;&#20214;&#22841;&#36816;&#34892;go test&#20415;&#21487;&#20197;&#36816;&#34892;&#27979;&#35797;</span>
go test
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7">使用原则</h3>
<div class="outline-text-3" id="text-1-7">
<p class="verse">
1. 文件名必须是_test.go结尾的，这样在执行go test的时候才会执行到相应的代码<br>
2. 你必须import testing这个包<br>
3. 所有的测试用例函数必须是Test开头<br>
4. 测试用例会按照源代码中写的顺序依次执行<br>
5. 测试函数TestXxx()的参数是testing.T，我们可以使用该类型来记录错误或者是<br>
&#xa0;&#xa0;&#xa0;测试状态<br>
6. 测试格式：func TestXxx (t *testing.T),Xxx部分可以为任意的字母数字的组合，<br>
&#xa0;&#xa0;&#xa0;但是首字母不能是小写字母[a-z]，例如Testintdiv是错误的函数名。<br>
7. 函数中通过调用testing.T的Error, Errorf, FailNow, Fatal, FatalIf方法，<br>
&#xa0;&#xa0;&#xa0;说明测试不通过，调用Log方法用来记录测试的信息。<br>
</p>
</div>
</div>


<div id="outline-container-sec-1-8" class="outline-3">
<h3 id="sec-1-8">参考</h3>
<div class="outline-text-3" id="text-1-8">
<p class="verse">
<a href="http://coolshell.cn/articles/8209.html" target="_blank" rel="external">http://coolshell.cn/articles/8209.html</a><br>
<a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/11.3.md" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/11.3.md</a><br>
</p>
<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Golang 单元测试&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;哲学&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
测试只能证明你的代码有问题，不能证明你的代码没有问题。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;测似的粒度&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
老板为我的代码付报酬，而不是测试，所以，我对此的价值观是——测试越少越好，&lt;br  /&gt;
少到你对你的代码质量达到了某种自信（我觉得这种的自信标准应该要高于业内的&lt;br  /&gt;
标准，当然，这种自信也可能是种自大）。如果我的编码生涯中不会犯这种典型的&lt;br  /&gt;
错误（如：在构造函数中设了个错误的值），那我就不会测试它。我倾向于去对&lt;br  /&gt;
那些有意义的错误做测试，所以，我对一些比较复杂的条件逻辑会异常地小心。&lt;br  /&gt;
当在一个团队中，我会非常小心的测试那些会让团队容易出错的代码。&lt;br  /&gt;
&lt;br  /&gt;
个人理解：测试需要测有意义的东西，而不是盲目的100%覆盖，需要的是恰到好处&lt;br  /&gt;
的UT。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;TDD(测试驱动开发)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
个人理解：&lt;br  /&gt;
1. 测试不能帮助你写出优秀的设计，只能保证你写的代码不出错。&lt;br  /&gt;
2. 软件开发是一种发现问题解决问题的过程，TDD并不能达到这样&lt;br  /&gt;
&amp;#xa0;&amp;#xa0;&amp;#xa0;的效果。&lt;br  /&gt;
3. TDD保证代码正确，但是什么来保证TDD的case是正确的。&lt;br  /&gt;
4. TDD的好处大多是理论上的，实际上是不是只有做过才知道。&lt;br  /&gt;
5. 决定软件工艺的还是设计，程序员需要知道怎么思考，怎么设计，&lt;br  /&gt;
&amp;#xa0;&amp;#xa0;&amp;#xa0;怎么测试，而不是教条主义的照搬某某理论，某某Best Practice。&lt;br  /&gt;
6. 软件工程是没有银弹的，TDD也许适合你的项目，你的编程风格，&lt;br  /&gt;
&amp;#xa0;&amp;#xa0;&amp;#xa0;但是不一定适合所有人。&lt;br  /&gt;
&lt;br  /&gt;
总结： 软件需要的是恰到好处的设计和单元测试。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;Go语言中的单元测试&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
go语言自带 &lt;b&gt;testing&lt;/b&gt; 测试框架， &lt;b&gt;go test&lt;/b&gt; 命令可以运行单元测试和性能测试。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;使用&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;exa.go 文件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Add&lt;/span&gt;(x, y int) int {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; x + y
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;main&lt;/span&gt;() {
        x, y := 1, 2
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Add&lt;/span&gt;(x, y))
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;exa_test.go 测试文件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;testing&quot;&lt;/span&gt;
)

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;TestAdd&lt;/span&gt;(t *testing.T) {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; x := &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Add&lt;/span&gt;(1, 3); x != 4 {
                t.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Error&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;error in test Add&quot;&lt;/span&gt;)
        }
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;if&lt;/span&gt; x := &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Add&lt;/span&gt;(1, 3); x != 5 {
                t.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Error&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;error in test Add 5&quot;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#22312;&amp;#24403;&amp;#21069;&amp;#25991;&amp;#20214;&amp;#22841;&amp;#36816;&amp;#34892;go test&amp;#20415;&amp;#21487;&amp;#20197;&amp;#36816;&amp;#34892;&amp;#27979;&amp;#35797;&lt;/span&gt;
go test
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;使用原则&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
1. 文件名必须是_test.go结尾的，这样在执行go test的时候才会执行到相应的代码&lt;br  /&gt;
2. 你必须import testing这个包&lt;br  /&gt;
3. 所有的测试用例函数必须是Test开头&lt;br  /&gt;
4. 测试用例会按照源代码中写的顺序依次执行&lt;br  /&gt;
5. 测试函数TestXxx()的参数是testing.T，我们可以使用该类型来记录错误或者是&lt;br  /&gt;
&amp;#xa0;&amp;#xa0;&amp;#xa0;测试状态&lt;br  /&gt;
6. 测试格式：func TestXxx (t *testing.T),Xxx部分可以为任意的字母数字的组合，&lt;br  /&gt;
&amp;#xa0;&amp;#xa0;&amp;#xa0;但是首字母不能是小写字母[a-z]，例如Testintdiv是错误的函数名。&lt;br  /&gt;
7. 函数中通过调用testing.T的Error, Errorf, FailNow, Fatal, FatalIf方法，&lt;br  /&gt;
&amp;#xa0;&amp;#xa0;&amp;#xa0;说明测试不通过，调用Log方法用来记录测试的信息。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-8&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-8&quot;&gt;
&lt;p class=&quot;verse&quot;&gt;
&lt;a href=&quot;http://coolshell.cn/articles/8209.html&quot;&gt;http://coolshell.cn/articles/8209.html&lt;/a&gt;&lt;br  /&gt;
&lt;a href=&quot;https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/11.3.md&quot;&gt;https://github.com/astaxie/build-web-application-with-golang/blob/master/ebook/11.3.md&lt;/a&gt;&lt;br  /&gt;
&lt;/p&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang面向对象编程</title>
    <link href="http://yoursite.com/2014-04-26/2014-04-26-go%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2014-04-26/2014-04-26-go面向对象和接口/</id>
    <published>2014-04-25T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:35.000Z</updated>
    
    <content type="html"><![CDATA[

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">GO 面向对象编程</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">哲学</h3>
<div class="outline-text-3" id="text-1-1">
<blockquote>
<p>
Less is more
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">区别</h3>
<div class="outline-text-3" id="text-1-2">
<p>
与Java、C++、Python等面向对象语言的区别
</p>
<ol class="org-ol">
<li>没有传统OOP编程中继承、虚函数、构造函数和析构函数、隐藏的this指针等概念。
</li>
<li>接口无需申明（静态类型的duck typing）。
</li>
<li>无侵式实现接口，接口与实现分离。
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">接口</h3>
<div class="outline-text-3" id="text-1-3">
</div><div id="outline-container-sec-1-3-1" class="outline-4">
<h4 id="sec-1-3-1">解释</h4>
<div class="outline-text-4" id="text-1-3-1">
<p>
接口就是一个协议，规定了一组成员。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">语法</h3>
<div class="outline-text-3" id="text-1-4">
</div><div id="outline-container-sec-1-4-1" class="outline-4">
<h4 id="sec-1-4-1">类</h4>
<div class="outline-text-4" id="text-1-4-1">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #ff0000;">/* </span><span style="color: #ff0000;">&#23450;&#20041;&#19968;&#20010;&#24418;&#29366;&#31867;</span>
<span style="color: #ff0000;">   &#23454;&#29616;&#27491;&#26041;&#24418;&#35745;&#31639;&#38754;&#31215;&#30340;&#26041;&#27861;</span>
<span style="color: #ff0000;">   &#23454;&#29616;&#22278;&#35745;&#31639;&#38754;&#31215;&#30340;&#26041;&#27861;</span>
<span style="color: #ff0000;">*/</span>
<span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">Sharp</span> <span style="color: #00ffff; font-weight: bold;">struct</span> {
    r float64
}

<span style="color: #00ffff; font-weight: bold;">func</span> (s <span style="color: #00ff00;">Sharp</span>) <span style="color: #0000ff; font-weight: bold;">Square</span>() <span style="color: #00ff00;">float64</span>{
    <span style="color: #00ffff; font-weight: bold;">return</span> s.r * s.r
}

<span style="color: #00ffff; font-weight: bold;">func</span> (s <span style="color: #00ff00;">Sharp</span>) <span style="color: #0000ff; font-weight: bold;">Circle</span>() <span style="color: #00ff00;">float64</span>{
    <span style="color: #00ffff; font-weight: bold;">return</span> s.r * s.r * 3.14
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-4-2" class="outline-4">
<h4 id="sec-1-4-2">接口</h4>
<div class="outline-text-4" id="text-1-4-2">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">Area</span> <span style="color: #00ffff; font-weight: bold;">interface</span> {
    <span style="color: #0000ff; font-weight: bold;">Square</span>() float64
    <span style="color: #0000ff; font-weight: bold;">Circle</span>() float64
}
<span style="color: #ff0000;">/* </span><span style="color: #ff0000;">&#19978;&#38754;&#31867;&#30340;&#20363;&#23376;&#27809;&#26377;&#32487;&#25215;&#25509;&#21475;&#65292;&#20294;&#26159;&#23454;&#29616;&#20102;&#25509;&#21475;&#30340;&#26041;&#27861;&#65292;&#25509;&#21475;&#26080;&#38656;&#32487;&#25215; */</span>
<span style="color: #ff0000;">/* </span><span style="color: #ff0000;">&#20351;&#29992; */</span>
<span style="color: #00ffff; font-weight: bold;">var</span> sharp Area = &amp;<span style="color: #00ff00;">sharp</span>{4}
sharp.<span style="color: #0000ff; font-weight: bold;">Square</span>()
sharp.<span style="color: #0000ff; font-weight: bold;">Circle</span>()
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-4-3" class="outline-4">
<h4 id="sec-1-4-3">完整代码</h4>
<div class="outline-text-4" id="text-1-4-3">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">package</span> main

<span style="color: #00ffff; font-weight: bold;">import</span> <span style="color: #00ff00;">"fmt"</span>

<span style="color: #ff0000;">/* </span><span style="color: #ff0000;">&#23450;&#20041;&#19968;&#20010;&#24418;&#29366;&#31867;</span>
<span style="color: #ff0000;">   &#23454;&#29616;&#27491;&#26041;&#24418;&#35745;&#31639;&#38754;&#31215;&#30340;&#26041;&#27861;</span>
<span style="color: #ff0000;">   &#23454;&#29616;&#22278;&#35745;&#31639;&#38754;&#31215;&#30340;&#26041;&#27861;</span>
<span style="color: #ff0000;">*/</span>
<span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">Sharp</span> <span style="color: #00ffff; font-weight: bold;">struct</span> {
        r float64
}

<span style="color: #00ffff; font-weight: bold;">func</span> (s <span style="color: #00ff00;">Sharp</span>) <span style="color: #0000ff; font-weight: bold;">Square</span>() float64 {
        <span style="color: #00ffff; font-weight: bold;">return</span> s.r * s.r
}

<span style="color: #00ffff; font-weight: bold;">func</span> (s <span style="color: #00ff00;">Sharp</span>) <span style="color: #0000ff; font-weight: bold;">Circle</span>() float64 {
        <span style="color: #00ffff; font-weight: bold;">return</span> s.r * s.r * 3.14
}

<span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">Area</span> <span style="color: #00ffff; font-weight: bold;">interface</span> {
        <span style="color: #0000ff; font-weight: bold;">Square</span>() float64
        <span style="color: #0000ff; font-weight: bold;">Circle</span>() float64
}

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">main</span>() {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#23454;&#20363;&#21270;&#31867;&#26041;&#27861;, &#24341;&#29992;</span>
        <span style="color: #00ffff; font-weight: bold;">var</span> sharpSquare Sharp = <span style="color: #00ff00;">Sharp</span>{4}
        <span style="color: #00ffff; font-weight: bold;">var</span> sharpCircle Sharp = <span style="color: #00ff00;">Sharp</span>{4}

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#23454;&#20363;&#21270;&#31867;&#26041;&#27861;&#65292;&#25351;&#38024;</span>
        <span style="color: #00ffff; font-weight: bold;">var</span> sharpSquare1 *Sharp = &amp;<span style="color: #00ff00;">Sharp</span>{4}
        <span style="color: #00ffff; font-weight: bold;">var</span> sharpCircle1 *Sharp = &amp;<span style="color: #00ff00;">Sharp</span>{4}

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#23454;&#20363;&#21270;&#31867;&#26041;&#27861;, &#20351;&#29992;new&#20851;&#38190;&#23383;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">new &#20998;&#37197;&#20102;0&#20540;&#22635;&#20805;&#30340;Sharp&#31867;&#22411;&#30340;&#20869;&#23384;&#31354;&#38388;&#65292;&#24182;&#19988;&#36820;&#22238;&#35813;&#31354;&#38388;&#30340;&#22320;&#22336;</span>
        sharpSquare2 := <span style="color: #0000ff; font-weight: bold;">new</span>(<span style="color: #00ff00;">Sharp</span>)
        sharpSquare2.r = 5

        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(<span style="color: #00ff00;">"&#24341;&#29992;"</span>)
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(sharpSquare.<span style="color: #0000ff; font-weight: bold;">Square</span>())
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(sharpCircle.<span style="color: #0000ff; font-weight: bold;">Circle</span>())

        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(<span style="color: #00ff00;">"&#25351;&#38024;"</span>)
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(sharpSquare1.<span style="color: #0000ff; font-weight: bold;">Square</span>())
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(sharpCircle1.<span style="color: #0000ff; font-weight: bold;">Circle</span>())

        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(<span style="color: #00ff00;">"new&#20851;&#38190;&#23383;"</span>)
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(sharpSquare2.<span style="color: #0000ff; font-weight: bold;">Circle</span>())

        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">Sharp &#23454;&#29616;&#20102;&#25509;&#21475;&#30340;&#20004;&#20010;&#26041;&#27861;&#65292;&#24050;&#32463;&#23454;&#29616;&#20102;&#35813;&#25509;&#21475;</span>
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#25509;&#21475;&#35843;&#29992;</span>
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(<span style="color: #00ff00;">"&#25509;&#21475;"</span>)
        <span style="color: #00ffff; font-weight: bold;">var</span> area1 Area = <span style="color: #00ff00;">Sharp</span>{6}
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(area1.<span style="color: #0000ff; font-weight: bold;">Square</span>())
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(area1.<span style="color: #0000ff; font-weight: bold;">Circle</span>())
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-4-4" class="outline-4">
<h4 id="sec-1-4-4">多态</h4>
<div class="outline-text-4" id="text-1-4-4">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">package</span> main

<span style="color: #00ffff; font-weight: bold;">import</span> (
        <span style="color: #00ff00;">"fmt"</span>
)
<span style="color: #ff0000;">/*</span>
<span style="color: #ff0000;">    &#23450;&#20041;Square&#21644;Circle&#20004;&#20010;&#31867;</span>
<span style="color: #ff0000;">    &#20998;&#21035;&#23454;&#29616;Area&#26041;&#27861;</span>
<span style="color: #ff0000;">    &#23450;&#20041;&#25509;&#21475;PolySharp&#65292;&#25509;&#21475;&#26041;&#27861;Area</span>
<span style="color: #ff0000;">    Square&#21644;Circle&#30456;&#24403;&#20110;&#23454;&#29616;&#20102;&#25509;&#21475;PolySharp</span>
<span style="color: #ff0000;">*/</span>
<span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">Square</span> <span style="color: #00ffff; font-weight: bold;">struct</span> {
        width float64
}

<span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">Circle</span> <span style="color: #00ffff; font-weight: bold;">struct</span> {
        redius float64
}

<span style="color: #00ffff; font-weight: bold;">func</span> (s <span style="color: #00ff00;">Square</span>) <span style="color: #0000ff; font-weight: bold;">Area</span>() float64 {
        <span style="color: #00ffff; font-weight: bold;">return</span> s.width * s.width
}

<span style="color: #00ffff; font-weight: bold;">func</span> (s <span style="color: #00ff00;">Circle</span>) <span style="color: #0000ff; font-weight: bold;">Area</span>() float64 {
        <span style="color: #00ffff; font-weight: bold;">return</span> s.redius * s.redius * 3.14
}

<span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">PolySharp</span> <span style="color: #00ffff; font-weight: bold;">interface</span> {
        <span style="color: #0000ff; font-weight: bold;">Area</span>() float64
}

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">main</span>() {
        <span style="color: #00ffff; font-weight: bold;">var</span> s1 PolySharp = &amp;<span style="color: #00ff00;">Square</span>{4}
        <span style="color: #00ffff; font-weight: bold;">var</span> s2 PolySharp = &amp;<span style="color: #00ff00;">Circle</span>{4}
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(s1.<span style="color: #0000ff; font-weight: bold;">Area</span>())
        fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(s2.<span style="color: #0000ff; font-weight: bold;">Area</span>())
}
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">杂项</h3>
<div class="outline-text-3" id="text-1-5">
</div><div id="outline-container-sec-1-5-1" class="outline-4">
<h4 id="sec-1-5-1">函数定义文法</h4>
<div class="outline-text-4" id="text-1-5-1">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">type</span> <span style="color: #00ff00;">mytype</span> <span style="color: #00ff00;">int</span>
<span style="color: #00ffff; font-weight: bold;">func</span> (p <span style="color: #00ff00;">mytype</span>) <span style="color: #0000ff; font-weight: bold;">funcname</span>(i int) (r int) {
    <span style="color: #00ffff; font-weight: bold;">return</span> 0
}

<span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20851;&#38190;&#23383;func&#65292; &#32465;&#23450;&#21040;mytype&#19978;&#65288;&#21483;&#20570;&#26041;&#27861;method&#65289;&#65292; &#20989;&#25968;&#21517;&#65292; &#36820;&#22238;&#31867;&#22411;</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-5-2" class="outline-4">
<h4 id="sec-1-5-2">指针：Go语言的指针，基本上只剩下用于区分 byref 和 byval 语义。</h4>
<div class="outline-text-4" id="text-1-5-2">
<p>
解释： 值类型保存的是具体的值 引用类型保存的是值的地址。<br>
</p>
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">package</span> main

<span style="color: #00ffff; font-weight: bold;">import</span> <span style="color: #00ff00;">"fmt"</span>

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">byval</span>(a int) {
    a += 5
    fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(a)
}

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">byref</span>(a *int) {
    fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(a)
    *a += 5
    fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(a)
}

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">main</span>() {
    a := 4;
    fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(a)
    <span style="color: #0000ff; font-weight: bold;">byval</span>(a)
    fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(a)
    <span style="color: #0000ff; font-weight: bold;">byref</span>(&amp;a)
    fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(a)
}

<span style="color: #ff0000;">/* </span><span style="color: #ff0000;">result</span>
<span style="color: #ff0000;">4</span>
<span style="color: #ff0000;">9</span>
<span style="color: #ff0000;">4</span>
<span style="color: #ff0000;">9</span>
<span style="color: #ff0000;">9</span>
<span style="color: #ff0000;">*/</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">总结</h3>
<div class="outline-text-3" id="text-1-6">
<ol class="org-ol">
<li>无侵入式的接口设计确实很新颖和优雅，仔细读代码简单明了。
</li>
<li>golang使用组合替代继承，符合OOP的设计原则。
</li>
<li>OOP的消息传递机制更直接。
</li>
</ol>


<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;GO 面向对象编程&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;哲学&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
Less is more
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;区别&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
与Java、C++、Python等面向对象语言的区别
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;没有传统OOP编程中继承、虚函数、构造函数和析构函数、隐藏的this指针等概念。
&lt;/li&gt;
&lt;li&gt;接口无需申明（静态类型的duck typing）。
&lt;/li&gt;
&lt;li&gt;无侵式实现接口，接口与实现分离。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;接口&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-3-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-3-1&quot;&gt;解释&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;
&lt;p&gt;
接口就是一个协议，规定了一组成员。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;语法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-4-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-1&quot;&gt;类&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23450;&amp;#20041;&amp;#19968;&amp;#20010;&amp;#24418;&amp;#29366;&amp;#31867;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;   &amp;#23454;&amp;#29616;&amp;#27491;&amp;#26041;&amp;#24418;&amp;#35745;&amp;#31639;&amp;#38754;&amp;#31215;&amp;#30340;&amp;#26041;&amp;#27861;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;   &amp;#23454;&amp;#29616;&amp;#22278;&amp;#35745;&amp;#31639;&amp;#38754;&amp;#31215;&amp;#30340;&amp;#26041;&amp;#27861;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
    r float64
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (s &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;() &lt;span style=&quot;color: #00ff00;&quot;&gt;float64&lt;/span&gt;{
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; s.r * s.r
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (s &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;() &lt;span style=&quot;color: #00ff00;&quot;&gt;float64&lt;/span&gt;{
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; s.r * s.r * 3.14
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-2&quot;&gt;接口&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;Area&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;interface&lt;/span&gt; {
    &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;() float64
    &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;() float64
}
&lt;span style=&quot;color: #ff0000;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#19978;&amp;#38754;&amp;#31867;&amp;#30340;&amp;#20363;&amp;#23376;&amp;#27809;&amp;#26377;&amp;#32487;&amp;#25215;&amp;#25509;&amp;#21475;&amp;#65292;&amp;#20294;&amp;#26159;&amp;#23454;&amp;#29616;&amp;#20102;&amp;#25509;&amp;#21475;&amp;#30340;&amp;#26041;&amp;#27861;&amp;#65292;&amp;#25509;&amp;#21475;&amp;#26080;&amp;#38656;&amp;#32487;&amp;#25215; */&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20351;&amp;#29992; */&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; sharp Area = &amp;amp;&lt;span style=&quot;color: #00ff00;&quot;&gt;sharp&lt;/span&gt;{4}
sharp.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;()
sharp.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-3&quot;&gt;完整代码&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #ff0000;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23450;&amp;#20041;&amp;#19968;&amp;#20010;&amp;#24418;&amp;#29366;&amp;#31867;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;   &amp;#23454;&amp;#29616;&amp;#27491;&amp;#26041;&amp;#24418;&amp;#35745;&amp;#31639;&amp;#38754;&amp;#31215;&amp;#30340;&amp;#26041;&amp;#27861;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;   &amp;#23454;&amp;#29616;&amp;#22278;&amp;#35745;&amp;#31639;&amp;#38754;&amp;#31215;&amp;#30340;&amp;#26041;&amp;#27861;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
        r float64
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (s &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;() float64 {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; s.r * s.r
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (s &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;() float64 {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; s.r * s.r * 3.14
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;Area&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;interface&lt;/span&gt; {
        &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;() float64
        &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;() float64
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;main&lt;/span&gt;() {
        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23454;&amp;#20363;&amp;#21270;&amp;#31867;&amp;#26041;&amp;#27861;, &amp;#24341;&amp;#29992;&lt;/span&gt;
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; sharpSquare Sharp = &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;{4}
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; sharpCircle Sharp = &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;{4}

        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23454;&amp;#20363;&amp;#21270;&amp;#31867;&amp;#26041;&amp;#27861;&amp;#65292;&amp;#25351;&amp;#38024;&lt;/span&gt;
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; sharpSquare1 *Sharp = &amp;amp;&lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;{4}
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; sharpCircle1 *Sharp = &amp;amp;&lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;{4}

        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23454;&amp;#20363;&amp;#21270;&amp;#31867;&amp;#26041;&amp;#27861;, &amp;#20351;&amp;#29992;new&amp;#20851;&amp;#38190;&amp;#23383;&lt;/span&gt;
        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;new &amp;#20998;&amp;#37197;&amp;#20102;0&amp;#20540;&amp;#22635;&amp;#20805;&amp;#30340;Sharp&amp;#31867;&amp;#22411;&amp;#30340;&amp;#20869;&amp;#23384;&amp;#31354;&amp;#38388;&amp;#65292;&amp;#24182;&amp;#19988;&amp;#36820;&amp;#22238;&amp;#35813;&amp;#31354;&amp;#38388;&amp;#30340;&amp;#22320;&amp;#22336;&lt;/span&gt;
        sharpSquare2 := &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;new&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;)
        sharpSquare2.r = 5

        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;&amp;#24341;&amp;#29992;&quot;&lt;/span&gt;)
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(sharpSquare.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;())
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(sharpCircle.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;())

        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;&amp;#25351;&amp;#38024;&quot;&lt;/span&gt;)
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(sharpSquare1.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;())
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(sharpCircle1.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;())

        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;new&amp;#20851;&amp;#38190;&amp;#23383;&quot;&lt;/span&gt;)
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(sharpSquare2.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;())

        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;Sharp &amp;#23454;&amp;#29616;&amp;#20102;&amp;#25509;&amp;#21475;&amp;#30340;&amp;#20004;&amp;#20010;&amp;#26041;&amp;#27861;&amp;#65292;&amp;#24050;&amp;#32463;&amp;#23454;&amp;#29616;&amp;#20102;&amp;#35813;&amp;#25509;&amp;#21475;&lt;/span&gt;
        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#25509;&amp;#21475;&amp;#35843;&amp;#29992;&lt;/span&gt;
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;&amp;#25509;&amp;#21475;&quot;&lt;/span&gt;)
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; area1 Area = &lt;span style=&quot;color: #00ff00;&quot;&gt;Sharp&lt;/span&gt;{6}
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(area1.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Square&lt;/span&gt;())
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(area1.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Circle&lt;/span&gt;())
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4-4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-4-4&quot;&gt;多态&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; (
        &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
)
&lt;span style=&quot;color: #ff0000;&quot;&gt;/*&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;    &amp;#23450;&amp;#20041;Square&amp;#21644;Circle&amp;#20004;&amp;#20010;&amp;#31867;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;    &amp;#20998;&amp;#21035;&amp;#23454;&amp;#29616;Area&amp;#26041;&amp;#27861;&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;    &amp;#23450;&amp;#20041;&amp;#25509;&amp;#21475;PolySharp&amp;#65292;&amp;#25509;&amp;#21475;&amp;#26041;&amp;#27861;Area&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;    Square&amp;#21644;Circle&amp;#30456;&amp;#24403;&amp;#20110;&amp;#23454;&amp;#29616;&amp;#20102;&amp;#25509;&amp;#21475;PolySharp&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;Square&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
        width float64
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;Circle&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;struct&lt;/span&gt; {
        redius float64
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (s &lt;span style=&quot;color: #00ff00;&quot;&gt;Square&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Area&lt;/span&gt;() float64 {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; s.width * s.width
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (s &lt;span style=&quot;color: #00ff00;&quot;&gt;Circle&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Area&lt;/span&gt;() float64 {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; s.redius * s.redius * 3.14
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;PolySharp&lt;/span&gt; &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;interface&lt;/span&gt; {
        &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Area&lt;/span&gt;() float64
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;main&lt;/span&gt;() {
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; s1 PolySharp = &amp;amp;&lt;span style=&quot;color: #00ff00;&quot;&gt;Square&lt;/span&gt;{4}
        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;var&lt;/span&gt; s2 PolySharp = &amp;amp;&lt;span style=&quot;color: #00ff00;&quot;&gt;Circle&lt;/span&gt;{4}
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(s1.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Area&lt;/span&gt;())
        fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(s2.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Area&lt;/span&gt;())
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;杂项&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-5-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-1&quot;&gt;函数定义文法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;type&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;mytype&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;int&lt;/span&gt;
&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; (p &lt;span style=&quot;color: #00ff00;&quot;&gt;mytype&lt;/span&gt;) &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;funcname&lt;/span&gt;(i int) (r int) {
    &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;return&lt;/span&gt; 0
}

&lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20851;&amp;#38190;&amp;#23383;func&amp;#65292; &amp;#32465;&amp;#23450;&amp;#21040;mytype&amp;#19978;&amp;#65288;&amp;#21483;&amp;#20570;&amp;#26041;&amp;#27861;method&amp;#65289;&amp;#65292; &amp;#20989;&amp;#25968;&amp;#21517;&amp;#65292; &amp;#36820;&amp;#22238;&amp;#31867;&amp;#22411;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-5-2&quot;&gt;指针：Go语言的指针，基本上只剩下用于区分 byref 和 byval 语义。&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;p&gt;
解释： 值类型保存的是具体的值 引用类型保存的是值的地址。&lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;byval&lt;/span&gt;(a int) {
    a += 5
    fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(a)
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;byref&lt;/span&gt;(a *int) {
    fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(a)
    *a += 5
    fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(a)
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;main&lt;/span&gt;() {
    a := 4;
    fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(a)
    &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;byval&lt;/span&gt;(a)
    fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(a)
    &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;byref&lt;/span&gt;(&amp;amp;a)
    fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(a)
}

&lt;span style=&quot;color: #ff0000;&quot;&gt;/* &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;result&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;9&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;4&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;9&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;9&lt;/span&gt;
&lt;span style=&quot;color: #ff0000;&quot;&gt;*/&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;无侵入式的接口设计确实很新颖和优雅，仔细读代码简单明了。
&lt;/li&gt;
&lt;li&gt;golang使用组合替代继承，符合OOP的设计原则。
&lt;/li&gt;
&lt;li&gt;OOP的消息传递机制更直接。
&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>go语言并发模型</title>
    <link href="http://yoursite.com/2014-04-25/2014-04-25-go%E8%AF%AD%E8%A8%80%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2014-04-25/2014-04-25-go语言并发模型/</id>
    <published>2014-04-24T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:35.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">GO 语言并发模型</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">哲学</h3>
<div class="outline-text-3" id="text-1-1">
<blockquote>
<p>
不要通过共享内存来通信， 应该通过通信来共享内存
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">进程、线程、协程</h3>
<div class="outline-text-3" id="text-1-2">
</div><div id="outline-container-sec-1-2-1" class="outline-4">
<h4 id="sec-1-2-1">进程</h4>
<div class="outline-text-4" id="text-1-2-1">
<blockquote>
<ol class="org-ol">
<li>操作系统中最核心的概念是进程。
</li>
<li>进程是“程序执行的一个实例” ，担当分配系统资源的实体。
</li>
<li>进程创建必须分配一个完整的独立地址空间。
</li>
<li>让计算机能够同时处理多个任务，操作系统有了进程的概念，
而且在进程内部，基本可以认为当前系统只有一个进程在运行，
操作系统对此作了非常好的封装。进程间的切换是有操作系统来完成的。
</li>
</ol>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-2-2" class="outline-4">
<h4 id="sec-1-2-2">线程</h4>
<div class="outline-text-4" id="text-1-2-2">
<blockquote>
<p>
线程是进程的一个执行流，独立执行它自己的程序代码。
线程是操作系统能够进行运算调度的最小单位。
</p>

<p>
线程的问题是：<br>
1）存在线程安全问题，出了问题非常不易定位。<br>
2）进程内部有线程数目的限制。<br>
3）随着并发量的增加，线程生成和切换的成本也变得昂贵。<br>
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-2-3" class="outline-4">
<h4 id="sec-1-2-3">协程</h4>
<div class="outline-text-4" id="text-1-2-3">
<blockquote>
<ol class="org-ol">
<li>协程不同于线程的地方在于协程不是操作系统进行切换，
而是由程序员编码进行切换的，也就是说切换是由程序员控制的，
这样就没有了线程所谓的安全问题。
</li>

<li>所有的协程都共享整个进程的上下文，这样协程间的交换也非
常方便。
</li>
</ol>

<p>
缺点：协程的缺点可能是无法利用多核优势。
</p>

<p>
简而言之：编程语言提供的一种并发机制，不受操作系统的调度，由
程序员来控制。
</p>
</blockquote>
</div>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">并发编程难度</h3>
<div class="outline-text-3" id="text-1-3">
<blockquote>
<p>
并发编程的难度在于协调，而协调就要通过通信。<br>
并发通信模型： 共享数据和消息。<br>
</p>

<p>
基于内存的消息通信缺点：<br>
我们还能用多线程干活，只是因为我们手里还有加锁机制，<br>
而它可以部分地堵上线程模型的漏洞。讽刺的是，<br>
引入加锁机制解决问题的同时，又带来了新的问题，<br>
所以我们编写多线程程序总会遇上死锁，活锁，优先级反转……等等。<br>
</p>

<p>
基于消息共享内存的优点：
</p>
<ol class="org-ol">
<li>抹去共享变量。（解决资源竞争问题）
</li>
<li>异步传递消息。
</li>
<li>可控制。
</li>
</ol>

<p>
个人理解：
基于内存的消息通信最大的缺点就是程序员不可控制，它是由
操作系统控制的，而基于消息的并发模型是程序员可以控制的。
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">go语言并发编程</h3>
<div class="outline-text-3" id="text-1-4">
<p>
<b>goroutine</b> 是协程的实现，由Go runtime管理，使用只需要<br>
<b>go</b> 关键字开启。
</p>

<p>
<b>channel</b> 是goroutine间的传递消息的通道。（类似Unix中的管道）
</p>
<blockquote>
<p>
通道是协程之间的数据传输通道。通道可以在众多的协程之间传递数据，<br>
具体可以值也可以是个引用。通道有两种使用方式。<br>
 ·  协程可以试图向通道放入数据，如果通道满了，会挂起协程，<br>
    直到通道可以为他放入数据为止。<br>
 ·  协程可以试图向通道索取数据，如果通道没有数据，会挂起协程，<br>
    直到通道返回数据为止。<br>
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-5" class="outline-3">
<h3 id="sec-1-5">使用</h3>
<div class="outline-text-3" id="text-1-5">
<div class="org-src-container">

<pre class="src src-go"><span style="color: #00ffff; font-weight: bold;">package</span> main

<span style="color: #00ffff; font-weight: bold;">import</span> <span style="color: #00ff00;">"fmt"</span>

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">Add</span>(ch <span style="color: #00ffff; font-weight: bold;">chan</span> <span style="color: #00ff00;">int</span>, x, y int) {
        z := x + y
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#24448;channel&#20013;&#20889;&#25968;&#25454;</span>
        ch &lt;- z
}

<span style="color: #00ffff; font-weight: bold;">func</span> <span style="color: #0000ff; font-weight: bold;">main</span>() {
        <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#23450;&#20041;10&#20010;channel</span>
        chs := <span style="color: #0000ff; font-weight: bold;">make</span>([]<span style="color: #00ffff; font-weight: bold;">chan</span> <span style="color: #00ff00;">int</span>, 10)

        <span style="color: #00ffff; font-weight: bold;">for</span> i := 0; i &lt; 10; i++ {
                chs[i] = <span style="color: #0000ff; font-weight: bold;">make</span>(<span style="color: #00ffff; font-weight: bold;">chan</span> <span style="color: #00ff00;">int</span>)
                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#20351;&#29992;goroutine</span>
                <span style="color: #00ffff; font-weight: bold;">go</span> <span style="color: #0000ff; font-weight: bold;">Add</span>(chs[i], i, 1)
        }

        <span style="color: #00ffff; font-weight: bold;">for</span> i, ch := <span style="color: #00ffff; font-weight: bold;">range</span> chs {
                fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(<span style="color: #00ff00;">"chan index"</span>, i)
                <span style="color: #ff0000;">// </span><span style="color: #ff0000;">&#35835;channel&#20013;&#30340;&#25968;&#25454;</span>
                value := &lt;-ch
                fmt.<span style="color: #0000ff; font-weight: bold;">Println</span>(<span style="color: #00ff00;">"value"</span>, value)
        }
}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-1-6" class="outline-3">
<h3 id="sec-1-6">总结</h3>
<div class="outline-text-3" id="text-1-6">
</div><ul class="org-ul"><li>Golang的并发模型是基于消息来共享内存，这种模型的好处就是程序员可以控制并发。<br></li></ul>
</div>


<div id="outline-container-sec-1-7" class="outline-3">
<h3 id="sec-1-7">参考</h3>
<div class="outline-text-3" id="text-1-7">
<blockquote>
<p>
<a href="http://www.cnblogs.com/shenguanpu/archive/2013/05/05/3060616.html" target="_blank" rel="external">http://www.cnblogs.com/shenguanpu/archive/2013/05/05/3060616.html</a> <br>
<a href="http://www.cnblogs.com/chgaowei/archive/2012/06/21/2557175.html" target="_blank" rel="external">http://www.cnblogs.com/chgaowei/archive/2012/06/21/2557175.html</a><br>
《Go语言编程》 许式伟 吕桂华<br>
<a href="http://qing.blog.sina.com.cn/tj/88ca09aa33002ele.html" target="_blank" rel="external">http://qing.blog.sina.com.cn/tj/88ca09aa33002ele.html</a><br>
</p>
</blockquote>

<p>
<a id="more"></a>
</p>
</div>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;GO 语言并发模型&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;哲学&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
不要通过共享内存来通信， 应该通过通信来共享内存
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;进程、线程、协程&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-1-2-1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-1&quot;&gt;进程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-1&quot;&gt;
&lt;blockquote&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;操作系统中最核心的概念是进程。
&lt;/li&gt;
&lt;li&gt;进程是“程序执行的一个实例” ，担当分配系统资源的实体。
&lt;/li&gt;
&lt;li&gt;进程创建必须分配一个完整的独立地址空间。
&lt;/li&gt;
&lt;li&gt;让计算机能够同时处理多个任务，操作系统有了进程的概念，
而且在进程内部，基本可以认为当前系统只有一个进程在运行，
操作系统对此作了非常好的封装。进程间的切换是有操作系统来完成的。
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-2&quot;&gt;线程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-2&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
线程是进程的一个执行流，独立执行它自己的程序代码。
线程是操作系统能够进行运算调度的最小单位。
&lt;/p&gt;

&lt;p&gt;
线程的问题是：&lt;br  /&gt;
1）存在线程安全问题，出了问题非常不易定位。&lt;br  /&gt;
2）进程内部有线程数目的限制。&lt;br  /&gt;
3）随着并发量的增加，线程生成和切换的成本也变得昂贵。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2-3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;sec-1-2-3&quot;&gt;协程&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-2-3&quot;&gt;
&lt;blockquote&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;协程不同于线程的地方在于协程不是操作系统进行切换，
而是由程序员编码进行切换的，也就是说切换是由程序员控制的，
这样就没有了线程所谓的安全问题。
&lt;/li&gt;

&lt;li&gt;所有的协程都共享整个进程的上下文，这样协程间的交换也非
常方便。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
缺点：协程的缺点可能是无法利用多核优势。
&lt;/p&gt;

&lt;p&gt;
简而言之：编程语言提供的一种并发机制，不受操作系统的调度，由
程序员来控制。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;并发编程难度&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
并发编程的难度在于协调，而协调就要通过通信。&lt;br  /&gt;
并发通信模型： 共享数据和消息。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
基于内存的消息通信缺点：&lt;br  /&gt;
我们还能用多线程干活，只是因为我们手里还有加锁机制，&lt;br  /&gt;
而它可以部分地堵上线程模型的漏洞。讽刺的是，&lt;br  /&gt;
引入加锁机制解决问题的同时，又带来了新的问题，&lt;br  /&gt;
所以我们编写多线程程序总会遇上死锁，活锁，优先级反转……等等。&lt;br  /&gt;
&lt;/p&gt;

&lt;p&gt;
基于消息共享内存的优点：
&lt;/p&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;抹去共享变量。（解决资源竞争问题）
&lt;/li&gt;
&lt;li&gt;异步传递消息。
&lt;/li&gt;
&lt;li&gt;可控制。
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
个人理解：
基于内存的消息通信最大的缺点就是程序员不可控制，它是由
操作系统控制的，而基于消息的并发模型是程序员可以控制的。
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;go语言并发编程&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;goroutine&lt;/b&gt; 是协程的实现，由Go runtime管理，使用只需要&lt;br  /&gt;
&lt;b&gt;go&lt;/b&gt; 关键字开启。
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;channel&lt;/b&gt; 是goroutine间的传递消息的通道。（类似Unix中的管道）
&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
通道是协程之间的数据传输通道。通道可以在众多的协程之间传递数据，&lt;br  /&gt;
具体可以值也可以是个引用。通道有两种使用方式。&lt;br  /&gt;
 ·  协程可以试图向通道放入数据，如果通道满了，会挂起协程，&lt;br  /&gt;
    直到通道可以为他放入数据为止。&lt;br  /&gt;
 ·  协程可以试图向通道索取数据，如果通道没有数据，会挂起协程，&lt;br  /&gt;
    直到通道返回数据为止。&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-5&quot;&gt;使用&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-go&quot;&gt;&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;package&lt;/span&gt; main

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;import&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Add&lt;/span&gt;(ch &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;chan&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;int&lt;/span&gt;, x, y int) {
        z := x + y
        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#24448;channel&amp;#20013;&amp;#20889;&amp;#25968;&amp;#25454;&lt;/span&gt;
        ch &amp;lt;- z
}

&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;func&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;main&lt;/span&gt;() {
        &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#23450;&amp;#20041;10&amp;#20010;channel&lt;/span&gt;
        chs := &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;make&lt;/span&gt;([]&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;chan&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;int&lt;/span&gt;, 10)

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; i := 0; i &amp;lt; 10; i++ {
                chs[i] = &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;make&lt;/span&gt;(&lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;chan&lt;/span&gt; &lt;span style=&quot;color: #00ff00;&quot;&gt;int&lt;/span&gt;)
                &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#20351;&amp;#29992;goroutine&lt;/span&gt;
                &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;go&lt;/span&gt; &lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Add&lt;/span&gt;(chs[i], i, 1)
        }

        &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;for&lt;/span&gt; i, ch := &lt;span style=&quot;color: #00ffff; font-weight: bold;&quot;&gt;range&lt;/span&gt; chs {
                fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;chan index&quot;&lt;/span&gt;, i)
                &lt;span style=&quot;color: #ff0000;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #ff0000;&quot;&gt;&amp;#35835;channel&amp;#20013;&amp;#30340;&amp;#25968;&amp;#25454;&lt;/span&gt;
                value := &amp;lt;-ch
                fmt.&lt;span style=&quot;color: #0000ff; font-weight: bold;&quot;&gt;Println&lt;/span&gt;(&lt;span style=&quot;color: #00ff00;&quot;&gt;&quot;value&quot;&lt;/span&gt;, value)
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-6&quot;&gt;总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;/div&gt;&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;Golang的并发模型是基于消息来共享内存，这种模型的好处就是程序员可以控制并发。&lt;br  /&gt;&lt;/li&gt;&lt;/ul&gt;
&lt;/div&gt;


&lt;div id=&quot;outline-container-sec-1-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-7&quot;&gt;参考&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;a href=&quot;http://www.cnblogs.com/shenguanpu/archive/2013/05/05/3060616.html&quot;&gt;http://www.cnblogs.com/shenguanpu/archive/2013/05/05/3060616.html&lt;/a&gt; &lt;br  /&gt;
&lt;a href=&quot;http://www.cnblogs.com/chgaowei/archive/2012/06/21/2557175.html&quot;&gt;http://www.cnblogs.com/chgaowei/archive/2012/06/21/2557175.html&lt;/a&gt;&lt;br  /&gt;
《Go语言编程》 许式伟 吕桂华&lt;br  /&gt;
&lt;a href=&quot;http://qing.blog.sina.com.cn/tj/88ca09aa33002ele.html&quot;&gt;http://qing.blog.sina.com.cn/tj/88ca09aa33002ele.html&lt;/a&gt;&lt;br  /&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://yoursite.com/categories/Go/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL统计</title>
    <link href="http://yoursite.com/2014-04-20/2014-04-20-mysql%E7%BB%9F%E8%AE%A1/"/>
    <id>http://yoursite.com/2014-04-20/2014-04-20-mysql统计/</id>
    <published>2014-04-19T16:00:00.000Z</published>
    <updated>2016-11-01T06:35:36.000Z</updated>
    
    <content type="html"><![CDATA[
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">按日期统计</h2>
<div class="outline-text-2" id="text-1">
<p>
代码：<br>
</p>
<div class="org-src-container">

<pre class="src src-SQL">-- 按年统计
SELECT YEAR(`date_field`), COUNT(*) AS `total`
FROM `table`
GROUP BY YEAR(`date_field`)

-- 按年月统计
SELECT YEAR(`date_field`), MONTH(`date_field`), COUNT(*) AS `total`
FROM `table`
GROUP BY YEAR(`date_field`), MONTH(`date_field`)

-- 按年月日统计
SELECT YEAR(`date_field`), MONTH(`date_filed`), COUNT(*) AS `total`
FROM `table`
GROUP BY YEAR(`date_field`), MONTH(`date_field`), DAY(`date_field`)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">一个字段不同的统计条件</h2>
<div class="outline-text-2" id="text-2">
<p>
使用 <b>CASE</b> 关键字<br>
代码：<br>
</p>
<div class="org-src-container">

<pre class="src src-SQL">/* 我需要按月统计完成的订单中客户给5星评价和给4星评价的数目*/
SELECT
    YEAR(`finishtime`),
    MONTH(`finishtime`),
    (CASE WHEN `rate`=5 THEN 1 ELSE NULL END),
    (CASE WHEN `rate`=4 THEN 1 ELSE NULL END),
FROM `order`
GROUP BY YEAR(`finishtime`), MONTH(`finishtime`)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">杂项</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">为什么使用 ` `</h3>
<div class="outline-text-3" id="text-3-1">
<p>
为了区别SQL关键字和数据库的字段。<br>
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">为什么不用IS NULL 和 IS NOT NULL来过滤数据</h3>
<div class="outline-text-3" id="text-3-2">
<p>
使用IS NULL 或这IS NOT NULL 无法命中索引，导致效率问题，<br>
可以使用 `field`&gt;'' 或者 `field`&gt;0替换上述情况。<br>
</p>
</div>
</div>

<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">SQL 规范</h3>
<div class="outline-text-3" id="text-3-3">
<p>
SQL 的关键字都用大写。 <br>
</p>
</div>
</div>

<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">SQL注释</h3>
<div class="outline-text-3" id="text-3-4">
<div class="org-src-container">

<pre class="src src-SQL">-- 是单行注释
/*多行注释*/
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5">MySQL 时间戳函数</h3>
<div class="outline-text-3" id="text-3-5">
<div class="org-src-container">

<pre class="src src-SQL">UNIX_TIMESTAMP(datetime)
FROM_UNIXTIME(unixtime)
</pre>
</div>
</div>

<ul class="org-ul"><li>最后更新<span class="timestamp-wrapper"><span class="timestamp">[2014-04-20 日 20:24]</span></span><br><div class="outline-text-6" id="text-3-5-0-0-1">
<p>
<a id="more"></a>
</p>
</div>
</li></ul>
</div>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;按日期统计&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
代码：&lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-SQL&quot;&gt;-- 按年统计
SELECT YEAR(`date_field`), COUNT(*) AS `total`
FROM `table`
GROUP BY YEAR(`date_field`)

-- 按年月统计
SELECT YEAR(`date_field`), MONTH(`date_field`), COUNT(*) AS `total`
FROM `table`
GROUP BY YEAR(`date_field`), MONTH(`date_field`)

-- 按年月日统计
SELECT YEAR(`date_field`), MONTH(`date_filed`), COUNT(*) AS `total`
FROM `table`
GROUP BY YEAR(`date_field`), MONTH(`date_field`), DAY(`date_field`)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;一个字段不同的统计条件&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
使用 &lt;b&gt;CASE&lt;/b&gt; 关键字&lt;br  /&gt;
代码：&lt;br  /&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-SQL&quot;&gt;/* 我需要按月统计完成的订单中客户给5星评价和给4星评价的数目*/
SELECT
    YEAR(`finishtime`),
    MONTH(`finishtime`),
    (CASE WHEN `rate`=5 THEN 1 ELSE NULL END),
    (CASE WHEN `rate`=4 THEN 1 ELSE NULL END),
FROM `order`
GROUP BY YEAR(`finishtime`), MONTH(`finishtime`)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;杂项&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;为什么使用 ` `&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
为了区别SQL关键字和数据库的字段。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;为什么不用IS NULL 和 IS NOT NULL来过滤数据&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p&gt;
使用IS NULL 或这IS NOT NULL 无法命中索引，导致效率问题，&lt;br  /&gt;
可以使用 `field`&amp;gt;&#39;&#39; 或者 `field`&amp;gt;0替换上述情况。&lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;SQL 规范&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;p&gt;
SQL 的关键字都用大写。 &lt;br  /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;SQL注释&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-SQL&quot;&gt;-- 是单行注释
/*多行注释*/
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot;&gt;MySQL 时间戳函数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-SQL&quot;&gt;UNIX_TIMESTAMP(datetime)
FROM_UNIXTIME(unixtime)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;&lt;li&gt;最后更新&lt;span class=&quot;timestamp-wrapper&quot;&gt;&lt;span class=&quot;timestamp&quot;&gt;[2014-04-20 日 20:24]&lt;/span&gt;&lt;/span&gt;&lt;br  /&gt;&lt;div class=&quot;outline-text-6&quot; id=&quot;text-3-5-0-0-1&quot;&gt;
&lt;p&gt;
    
    </summary>
    
      <category term="MySql" scheme="http://yoursite.com/categories/MySql/"/>
    
    
  </entry>
  
</feed>
